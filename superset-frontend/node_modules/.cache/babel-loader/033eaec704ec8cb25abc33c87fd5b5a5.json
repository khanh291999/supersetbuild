{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo } from 'react';\nimport Loading from 'src/components/Loading';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport handleResourceExport from 'src/utils/export';\nimport DatabaseModal from './DatabaseModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them. Please note that the \"Secure Extra\" and \"Certificate\" ' +\n'sections of the database configuration are not present in export ' +\n'files, and should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more databases that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst IconCheck = styled(Icons.Check)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\nconst IconCancelX = styled(Icons.CancelX)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nfunction BooleanDisplay({ value }) {\n  return value ? ___EmotionJSX(IconCheck, null) : ___EmotionJSX(IconCancelX, null);\n}\nfunction DatabaseList({ addDangerToast, addSuccessToast }) {\n  const { state: { loading, resourceCount: databaseCount, resourceCollection: databases }, hasPerm, fetchData, refreshData } = useListViewResource('database', t('database'), addDangerToast);\n  const [databaseModalOpen, setDatabaseModalOpen] = useState(false);\n  const [databaseCurrentlyDeleting, setDatabaseCurrentlyDeleting] = useState(null);\n  const [currentDatabase, setCurrentDatabase] = useState(null);\n  const [importingDatabase, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openDatabaseImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDatabaseImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDatabaseImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const openDatabaseDeleteModal = (database) => SupersetClient.get({\n    endpoint: `/api/v1/database/${database.id}/related_objects/` }).\n\n  then(({ json = {} }) => {\n    setDatabaseCurrentlyDeleting({\n      ...database,\n      chart_count: json.charts.count,\n      dashboard_count: json.dashboards.count });\n\n  }).\n  catch(createErrorHandler((errMsg) => t('An error occurred while fetching database related data: %s', errMsg)));\n  function handleDatabaseDelete({ id, database_name: dbName }) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/database/${id}` }).\n    then(() => {\n      refreshData();\n      addSuccessToast(t('Deleted: %s', dbName));\n      // Close delete modal\n      setDatabaseCurrentlyDeleting(null);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', dbName, errMsg))));\n  }\n  function handleDatabaseEditModal({ database = null, modalOpen = false } = {}) {\n    // Set database and modal\n    setCurrentDatabase(database);\n    setDatabaseModalOpen(modalOpen);\n  }\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const menuData = {\n    activeChild: 'Databases',\n    ...commonMenuData };\n\n  if (canCreate) {\n    menuData.buttons = [\n    {\n      'data-test': 'btn-create-database',\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Database'), ' '),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        // Ensure modal will be opened in add mode\n        handleDatabaseEditModal({ modalOpen: true });\n      } }];\n\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      menuData.buttons.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import databases'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, null)),\n\n        buttonStyle: 'link',\n        onClick: openDatabaseImportModal });\n\n    }\n  }\n  function handleDatabaseExport(database) {\n    if (database.id === undefined) {\n      return;\n    }\n    handleResourceExport('database', [database.id], () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  }\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'database_name',\n    Header: t('Database') },\n\n  {\n    accessor: 'backend',\n    Header: t('Backend'),\n    size: 'lg',\n    disableSortBy: true // TODO: api support for sorting by 'backend'\n  },\n  {\n    accessor: 'allow_run_async',\n    Header: ___EmotionJSX(Tooltip, { id: \"allow-run-async-header-tooltip\", title: t('Asynchronous query execution'), placement: \"top\" },\n    ___EmotionJSX(\"span\", null, t('AQE'))),\n\n    Cell: ({ row: { original: { allow_run_async: allowRunAsync } } }) => ___EmotionJSX(BooleanDisplay, { value: allowRunAsync }),\n    size: 'sm' },\n\n  {\n    accessor: 'allow_dml',\n    Header: ___EmotionJSX(Tooltip, { id: \"allow-dml-header-tooltip\", title: t('Allow data manipulation language'), placement: \"top\" },\n    ___EmotionJSX(\"span\", null, t('DML'))),\n\n    Cell: ({ row: { original: { allow_dml: allowDML } } }) => ___EmotionJSX(BooleanDisplay, { value: allowDML }),\n    size: 'sm' },\n\n  {\n    accessor: 'allow_csv_upload',\n    Header: t('CSV upload'),\n    Cell: ({ row: { original: { allow_csv_upload: allowCSVUpload } } }) => ___EmotionJSX(BooleanDisplay, { value: allowCSVUpload }),\n    size: 'md' },\n\n  {\n    accessor: 'expose_in_sqllab',\n    Header: t('Expose in SQL Lab'),\n    Cell: ({ row: { original: { expose_in_sqllab: exposeInSqllab } } }) => ___EmotionJSX(BooleanDisplay, { value: exposeInSqllab }),\n    size: 'md' },\n\n  {\n    accessor: 'created_by',\n    disableSortBy: true,\n    Header: t('Created by'),\n    Cell: ({ row: { original: { created_by: createdBy } } }) => createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => changedOn,\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleDatabaseEditModal({ database: original, modalOpen: true });\n      const handleDelete = () => openDatabaseDeleteModal(original);\n      const handleExport = () => handleDatabaseExport(original);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDelete },\n      ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete database'), placement: \"bottom\" },\n      ___EmotionJSX(Icons.Trash, null))),\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete,\n    disableSortBy: true }],\n\n  [canDelete, canEdit, canExport]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Expose in SQL Lab'),\n    id: 'expose_in_sqllab',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: 'Yes', value: true },\n    { label: 'No', value: false }] },\n\n\n  {\n    Header: ___EmotionJSX(Tooltip, { id: \"allow-run-async-filter-header-tooltip\", title: t('Asynchronous query execution'), placement: \"top\" },\n    ___EmotionJSX(\"span\", null, t('AQE'))),\n\n    id: 'allow_run_async',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: 'Yes', value: true },\n    { label: 'No', value: false }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'database_name',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  []);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  ___EmotionJSX(DatabaseModal, { databaseId: currentDatabase == null ? void 0 : currentDatabase.id, show: databaseModalOpen, onHide: handleDatabaseEditModal, onDatabaseAdd: () => {\n      refreshData();\n    } }),\n  databaseCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('The database %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the database will break those objects.', databaseCurrentlyDeleting.database_name, databaseCurrentlyDeleting.chart_count, databaseCurrentlyDeleting.dashboard_count), onConfirm: () => {\n      if (databaseCurrentlyDeleting) {\n        handleDatabaseDelete(databaseCurrentlyDeleting);\n      }\n    }, onHide: () => setDatabaseCurrentlyDeleting(null), open: true, title: t('Delete Database?') }),\n\n  ___EmotionJSX(ListView, { className: \"database-list-view\", columns: columns, count: databaseCount, data: databases, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE }),\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"database\", resourceLabel: t('database'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDatabaseImport, show: importingDatabase, onHide: closeDatabaseImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(DatabaseList);","map":null,"metadata":{},"sourceType":"module"}