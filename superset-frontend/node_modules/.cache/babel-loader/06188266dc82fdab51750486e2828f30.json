{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@superset-ui/core';\n\nimport DashboardComponent from '../../containers/DashboardComponent';\nimport DragDroppable from '../dnd/DragDroppable';\nimport EditableTitle from '../../../components/EditableTitle';\nimport AnchorLink from '../../../components/AnchorLink';\nimport { componentShape } from '../../util/propShapes';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nexport const RENDER_TAB = 'RENDER_TAB';\nexport const RENDER_TAB_CONTENT = 'RENDER_TAB_CONTENT';\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  depth: PropTypes.number.isRequired,\n  renderType: PropTypes.oneOf([RENDER_TAB, RENDER_TAB_CONTENT]).isRequired,\n  onDropOnTab: PropTypes.func,\n  editMode: PropTypes.bool.isRequired,\n  filters: PropTypes.object.isRequired,\n\n  // grid related\n  availableColumnCount: PropTypes.number,\n  columnWidth: PropTypes.number,\n  onResizeStart: PropTypes.func,\n  onResize: PropTypes.func,\n  onResizeStop: PropTypes.func,\n\n  // redux\n  handleComponentDrop: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  availableColumnCount: 0,\n  columnWidth: 0,\n  onDropOnTab() {},\n  onResizeStart() {},\n  onResize() {},\n  onResizeStop() {} };\n\n\nconst TabTitleContainer = styled.div`\n  ${({ isHighlighted, theme: { gridUnit, colors } }) => `\n    padding: ${gridUnit}px ${gridUnit * 2}px;\n    margin: ${-gridUnit}px ${gridUnit * -2}px;\n    transition: box-shadow 0.2s ease-in-out;\n    ${\nisHighlighted && `box-shadow: 0 0 ${gridUnit}px ${colors.primary.light1};`\n}\n  `}\n`;\n\nconst renderDraggableContentBottom = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--bottom\" });\n\n\nconst renderDraggableContentTop = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--top\" });\n\n\nexport default class Tab extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleDrop = this.handleDrop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  handleChangeText(nextTabText) {\n    const { updateComponents, component } = this.props;\n    if (nextTabText && nextTabText !== component.meta.text) {\n      updateComponents({\n        [component.id]: {\n          ...component,\n          meta: {\n            ...component.meta,\n            text: nextTabText } } });\n\n\n\n    }\n  }\n\n  handleDrop(dropResult) {\n    this.props.handleComponentDrop(dropResult);\n    this.props.onDropOnTab(dropResult);\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0 } });\n\n\n    }\n  }\n\n  renderTabContent() {\n    const {\n      component: tabComponent,\n      parentComponent: tabParentComponent,\n      depth,\n      availableColumnCount,\n      columnWidth,\n      onResizeStart,\n      onResize,\n      onResizeStop,\n      editMode,\n      isComponentVisible } =\n    this.props;\n\n    return (\n      ___EmotionJSX(\"div\", { className: \"dashboard-component-tabs-content\" },\n\n      editMode &&\n      ___EmotionJSX(DragDroppable, {\n        component: tabComponent,\n        parentComponent: tabParentComponent,\n        orientation: \"column\",\n        index: 0,\n        depth: depth,\n        onDrop: this.handleTopDropTargetDrop,\n        editMode: true,\n        className: \"empty-droptarget\" },\n\n      renderDraggableContentTop),\n\n\n      tabComponent.children.map((componentId, componentIndex) =>\n      ___EmotionJSX(DashboardComponent, {\n        key: componentId,\n        id: componentId,\n        parentId: tabComponent.id,\n        depth: depth // see isValidChild.js for why tabs don't increment child depth\n        , index: componentIndex,\n        onDrop: this.handleDrop,\n        availableColumnCount: availableColumnCount,\n        columnWidth: columnWidth,\n        onResizeStart: onResizeStart,\n        onResize: onResize,\n        onResizeStop: onResizeStop,\n        isComponentVisible: isComponentVisible,\n        onChangeTab: this.handleChangeTab })),\n\n\n\n      editMode &&\n      ___EmotionJSX(DragDroppable, {\n        component: tabComponent,\n        parentComponent: tabParentComponent,\n        orientation: \"column\",\n        index: tabComponent.children.length,\n        depth: depth,\n        onDrop: this.handleDrop,\n        editMode: true,\n        className: \"empty-droptarget\" },\n\n      renderDraggableContentBottom)));\n\n\n\n\n  }\n\n  renderTab() {\n    const {\n      component,\n      parentComponent,\n      index,\n      depth,\n      editMode,\n      filters,\n      isFocused,\n      isHighlighted } =\n    this.props;\n\n    return (\n      ___EmotionJSX(DragDroppable, {\n        component: component,\n        parentComponent: parentComponent,\n        orientation: \"column\",\n        index: index,\n        depth: depth,\n        onDrop: this.handleDrop,\n        editMode: editMode },\n\n      ({ dropIndicatorProps, dragSourceRef }) =>\n      ___EmotionJSX(TabTitleContainer, {\n        isHighlighted: isHighlighted,\n        className: \"dragdroppable-tab\",\n        ref: dragSourceRef },\n\n      ___EmotionJSX(EditableTitle, {\n        title: component.meta.text,\n        defaultTitle: component.meta.defaultText,\n        placeholder: component.meta.placeholder,\n        canEdit: editMode && isFocused,\n        onSaveTitle: this.handleChangeText,\n        showTooltip: false,\n        editing: editMode && isFocused }),\n\n      !editMode &&\n      ___EmotionJSX(AnchorLink, {\n        anchorLinkId: component.id,\n        filters: filters,\n        showShortLinkButton: true,\n        placement: index >= 5 ? 'left' : 'right' }),\n\n\n\n      dropIndicatorProps && ___EmotionJSX(\"div\", dropIndicatorProps))));\n\n\n\n\n  }\n\n  render() {\n    const { renderType } = this.props;\n    return renderType === RENDER_TAB ?\n    this.renderTab() :\n    this.renderTabContent();\n  }}\n\n\nTab.propTypes = propTypes;\nTab.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}