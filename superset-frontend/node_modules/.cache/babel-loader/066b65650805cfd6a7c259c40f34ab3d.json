{"ast":null,"code":"var _container$getAttribu; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport messageToastReducer from 'src/components/MessageToasts/reducers';\nimport { initEnhancer } from 'src/reduxUtils';\nimport charts from 'src/chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport reports from 'src/reports/reducers/reports';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport datasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport shortid from 'shortid';\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer = (initialState) => (state = initialState) => state;\nconst container = document.getElementById('app');\nconst bootstrap = JSON.parse((_container$getAttribu = container == null ? void 0 : container.getAttribute('data-bootstrap')) != null ? _container$getAttribu : '{}');\n// reducers used only in the dashboard page\nconst dashboardReducers = {\n  charts,\n  datasources,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities,\n  reports };\n\n// exported for tests\nexport const rootReducer = combineReducers({\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrap.common || {}),\n  user: noopReducer(bootstrap.user || {}),\n  impressionId: noopReducer(shortid.generate()),\n  ...dashboardReducers });\n\nexport const store = createStore(rootReducer, {}, compose(applyMiddleware(thunk, logger), initEnhancer(false)));","map":null,"metadata":{},"sourceType":"module"}