{"ast":null,"code":"import _uniqBy from \"lodash/uniqBy\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartMetadataRegistry, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useMemo, useState } from 'react';\nimport rison from 'rison';\n\nimport moment from 'moment';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { createErrorHandler, createFetchRelated, handleChartDelete } from 'src/views/CRUD/utils';\nimport { useChartEditModal, useFavoriteStatus, useListViewResource } from 'src/views/CRUD/hooks';\nimport handleResourceExport from 'src/utils/export';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport FaveStar from 'src/components/FaveStar';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport { getFromLocalStorage } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport ChartCard from './ChartCard';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the charts. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more charts that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nsetupPlugins();\nconst registry = getChartMetadataRegistry();\nconst createFetchDatasets = async (filterValue = '', page, pageSize) => {var _json$result;\n  // add filters if filterValue\n  const filters = filterValue ?\n  { filters: [{ col: 'table_name', opr: 'sw', value: filterValue }] } :\n  {};\n  const queryParams = rison.encode({\n    columns: ['datasource_name', 'datasource_id'],\n    keys: ['none'],\n    order_column: 'table_name',\n    order_direction: 'asc',\n    page,\n    page_size: pageSize,\n    ...filters });\n\n  const { json = {} } = await SupersetClient.get({\n    endpoint: `/api/v1/dataset/?q=${queryParams}` });\n\n  const datasets = json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _json$result.map(({ table_name: tableName, id }) => ({\n    label: tableName,\n    value: id }));\n\n  return {\n    data: _uniqBy(datasets, 'value'),\n    totalCount: json == null ? void 0 : json.count };\n\n};\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nfunction ChartList(props) {\n  const { addDangerToast, addSuccessToast } = props;\n  const { state: { loading, resourceCount: chartCount, resourceCollection: charts, bulkSelectEnabled }, setResourceCollection: setCharts, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('chart', t('chart'), addDangerToast);\n  const chartIds = useMemo(() => charts.map((c) => c.id), [charts]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('chart', chartIds, addDangerToast);\n  const { sliceCurrentlyEditing, handleChartUpdated, openChartEditModal, closeChartEditModal } = useChartEditModal(setCharts, charts);\n  const [importingChart, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const { userId } = props.user;\n  const userKey = getFromLocalStorage(userId == null ? void 0 : userId.toString(), null);\n  const openChartImportModal = () => {\n    showImportModal(true);\n  };\n  const closeChartImportModal = () => {\n    showImportModal(false);\n  };\n  const handleChartImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const handleBulkChartExport = (chartsToExport) => {\n    const ids = chartsToExport.map(({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  function handleBulkChartDelete(chartsToDelete) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/chart/?q=${rison.encode(chartsToDelete.map(({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected charts: %s', errMsg))));\n  }\n  const columns = useMemo(() => [\n  ...(props.user.userId ?\n  [\n  {\n    Cell: ({ row: { original: { id } } }) => ___EmotionJSX(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] }),\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs' }] :\n\n\n  []),\n  {\n    Cell: ({ row: { original: { url, slice_name: sliceName, certified_by: certifiedBy, certification_details: certificationDetails } } }) => ___EmotionJSX(\"a\", { href: url },\n    certifiedBy && ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CertifiedIcon, { certifiedBy: certifiedBy, details: certificationDetails }), ' '),\n\n    sliceName),\n\n    Header: t('Chart'),\n    accessor: 'slice_name' },\n\n  {\n    Cell: ({ row: { original: { viz_type: vizType } } }) => {var _registry$get;return ((_registry$get = registry.get(vizType)) == null ? void 0 : _registry$get.name) || vizType;},\n    Header: t('Visualization type'),\n    accessor: 'viz_type',\n    size: 'xxl' },\n\n  {\n    Cell: ({ row: { original: { datasource_name_text: dsNameTxt, datasource_url: dsUrl } } }) => ___EmotionJSX(\"a\", { href: dsUrl }, dsNameTxt),\n    Header: t('Dataset'),\n    accessor: 'datasource_id',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { last_saved_by: lastSavedBy, changed_by_url: changedByUrl } } }) => ___EmotionJSX(\"a\", { href: changedByUrl },\n    lastSavedBy != null && lastSavedBy.first_name ?\n    `${lastSavedBy == null ? void 0 : lastSavedBy.first_name} ${lastSavedBy == null ? void 0 : lastSavedBy.last_name}` :\n    null),\n\n    Header: t('Modified by'),\n    accessor: 'last_saved_by.first_name',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { last_saved_at: lastSavedAt } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" },\n    lastSavedAt ? moment.utc(lastSavedAt).fromNow() : null),\n\n    Header: t('Last modified'),\n    accessor: 'last_saved_at',\n    size: 'xl' },\n\n  {\n    accessor: 'owners',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original: { created_by: createdBy } } }) => createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n    Header: t('Created by'),\n    accessor: 'created_by',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleDelete = () => handleChartDelete(original, addSuccessToast, addDangerToast, refreshData);\n      const openEditModal = () => openChartEditModal(original);\n      const handleExport = () => handleBulkChartExport([original]);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: ___EmotionJSX(React.Fragment, null,\n        t('Are you sure you want to delete'), ' ',\n        ___EmotionJSX(\"b\", null, original.slice_name), \"?\"),\n        onConfirm: handleDelete },\n      (confirmDelete) => ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n      ___EmotionJSX(Icons.Trash, null)))),\n\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: openEditModal },\n      ___EmotionJSX(Icons.EditAlt, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true,\n    hidden: !canEdit && !canDelete }],\n\n  [\n  canEdit,\n  canDelete,\n  canExport,\n  ...(props.user.userId ? [favoriteStatus] : [])]);\n\n  const favoritesFilter = useMemo(() => ({\n    Header: t('Favorite'),\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperator.chartIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] }),\n\n  []);\n  const filters = useMemo(() => [\n  {\n    Header: t('Owner'),\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.relationManyMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('chart', 'owners', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching chart owners values: %s', errMsg))), props.user),\n    paginate: true },\n\n  {\n    Header: t('Created by'),\n    id: 'created_by',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('chart', 'created_by', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching chart created by values: %s', errMsg))), props.user),\n    paginate: true },\n\n  {\n    Header: t('Viz type'),\n    id: 'viz_type',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: t('All'),\n    selects: registry.\n    keys().\n    filter((k) => {var _registry$get2;return nativeFilterGate(((_registry$get2 = registry.get(k)) == null ? void 0 : _registry$get2.behaviors) || []);}).\n    map((k) => {var _registry$get3;return { label: ((_registry$get3 = registry.get(k)) == null ? void 0 : _registry$get3.name) || k, value: k };}).\n    sort((a, b) => {\n      if (!a.label || !b.label) {\n        return 0;\n      }\n      if (a.label > b.label) {\n        return 1;\n      }\n      if (a.label < b.label) {\n        return -1;\n      }\n      return 0;\n    }) },\n\n  {\n    Header: t('Dataset'),\n    id: 'datasource_id',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchDatasets,\n    paginate: true },\n\n  ...(props.user.userId ? [favoritesFilter] : []),\n  {\n    Header: t('Certified'),\n    id: 'id',\n    urlDisplay: 'certified',\n    input: 'select',\n    operator: FilterOperator.chartIsCertified,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'slice_name',\n    input: 'search',\n    operator: FilterOperator.chartAllText }],\n\n  [addDangerToast, favoritesFilter, props.user]);\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'slice_name',\n    label: t('Alphabetical'),\n    value: 'alphabetical' },\n\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified' },\n\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified' }];\n\n\n  function renderCard(chart) {\n    return ___EmotionJSX(ChartCard, { chart: chart, showThumbnails: userKey ?\n      userKey.thumbnails :\n      isFeatureEnabled(FeatureFlag.THUMBNAILS), hasPerm: hasPerm, openChartEditModal: openChartEditModal, bulkSelectEnabled: bulkSelectEnabled, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: refreshData, loading: loading, favoriteStatus: favoriteStatus[chart.id], saveFavoriteStatus: saveFavoriteStatus, handleBulkChartExport: handleBulkChartExport });\n  }\n  const subMenuButtons = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect });\n\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Chart')),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/chart/add');\n      } });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import charts'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, null)),\n\n        buttonStyle: 'link',\n        onClick: openChartImportModal });\n\n    }\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { name: t('Charts'), buttons: subMenuButtons }),\n  sliceCurrentlyEditing && ___EmotionJSX(PropertiesModal, { onHide: closeChartEditModal, onSave: handleChartUpdated, show: true, slice: sliceCurrentlyEditing }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected charts?'), onConfirm: handleBulkChartDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        type: 'danger',\n        onSelect: confirmDelete });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkChartExport });\n\n    }\n    return ___EmotionJSX(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"chart-list-view\", columns: columns, count: chartCount, data: charts, disableBulkSelect: toggleBulkSelect, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, renderCard: renderCard, showThumbnails: userKey ?\n      userKey.thumbnails :\n      isFeatureEnabled(FeatureFlag.THUMBNAILS), defaultViewMode: isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW) ?\n      'card' :\n      'table' });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"chart\", resourceLabel: t('chart'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleChartImport, show: importingChart, onHide: closeChartImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(ChartList);","map":null,"metadata":{},"sourceType":"module"}