{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import \"core-js/modules/es.string.replace.js\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze asycn imports statically.\n */import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools') };\n\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(aceModules, { defaultMode, defaultTheme, defaultTabSize = 2, placeholder } = {}) {\n  return AsyncEsmComponent(async () => {var _aceModules$find, _aceModules$find2;\n    const { default: ace } = await import('brace');\n    const { default: ReactAceEditor } = await import('react-ace');\n    await Promise.all(aceModules.map((x) => aceModuleLoaders[x]()));\n    const inferredMode = defaultMode || ((_aceModules$find =\n    aceModules.find((x) => x.startsWith('mode/'))) == null ? void 0 : _aceModules$find.replace('mode/', ''));\n    const inferredTheme = defaultTheme || ((_aceModules$find2 =\n    aceModules.find((x) => x.startsWith('theme/'))) == null ? void 0 : _aceModules$find2.replace('theme/', ''));\n    return /*#__PURE__*/React.forwardRef(function ExtendedAceEditor({ keywords, mode = inferredMode, theme = inferredTheme, tabSize = defaultTabSize, defaultValue = '', ...props }, ref) {\n      if (keywords) {\n        const langTools = ace.acequire('ace/ext/language_tools');\n        const completer = {\n          getCompletions: (editor, session, pos, prefix, callback) => {\n            // If the prefix starts with a number, don't try to autocomplete\n            if (!Number.isNaN(parseInt(prefix, 10))) {\n              return;\n            }\n            if (session.getMode().$id === `ace/mode/${mode}`) {\n              callback(null, keywords);\n            }\n          } };\n\n        langTools.setCompleters([completer]);\n      }\n      return ___EmotionJSX(ReactAceEditor, _extends({ ref: ref, mode: mode, theme: theme, tabSize: tabSize, defaultValue: defaultValue }, props));\n    });\n  }, placeholder);\n}\nexport const SQLEditor = AsyncAceEditor([\n'mode/sql',\n'theme/github',\n'ext/language_tools']);\n\nexport const FullSQLEditor = AsyncAceEditor(['mode/sql', 'theme/github', 'ext/language_tools'], {\n  // a custom placeholder in SQL lab for less jumpy re-renders\n  placeholder: () => {\n    const gutterBackground = '#e8e8e8'; // from ace-github theme\n    return ___EmotionJSX(\"div\", { style: {\n        height: '100%' } },\n\n    ___EmotionJSX(\"div\", { style: { width: 41, height: '100%', background: gutterBackground } }),\n\n    ___EmotionJSX(\"div\", { className: \"ace_content\" }));\n\n  } });\n\nexport const MarkdownEditor = AsyncAceEditor([\n'mode/markdown',\n'theme/textmate']);\n\nexport const TextAreaEditor = AsyncAceEditor([\n'mode/markdown',\n'mode/sql',\n'mode/json',\n'mode/html',\n'mode/javascript',\n'theme/textmate']);\n\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n'mode/json',\n'mode/yaml',\n'theme/github']);","map":null,"metadata":{},"sourceType":"module"}