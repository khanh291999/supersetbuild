{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport cx from 'classnames';\nimport React, { useCallback, useMemo } from 'react';\nimport { styled, css } from '@superset-ui/core';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport BuilderComponentPane from 'src/dashboard/components/BuilderComponentPane';\nimport DashboardHeader from 'src/dashboard/containers/DashboardHeader';\nimport Icons from 'src/components/Icons';\nimport IconButton from 'src/dashboard/components/IconButton';\nimport DragDroppable from 'src/dashboard/components/dnd/DragDroppable';\nimport DashboardComponent from 'src/dashboard/containers/DashboardComponent';\nimport WithPopoverMenu from 'src/dashboard/components/menu/WithPopoverMenu';\nimport getDirectPathToTabIndex from 'src/dashboard/util/getDirectPathToTabIndex';\nimport { URL_PARAMS } from 'src/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { useElementOnScreen } from 'src/common/hooks/useElementOnScreen';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { deleteTopLevelTabs, handleComponentDrop } from 'src/dashboard/actions/dashboardLayout';\nimport { DASHBOARD_GRID_ID, DASHBOARD_ROOT_ID, DASHBOARD_ROOT_DEPTH, DashboardStandaloneMode } from 'src/dashboard/util/constants';\nimport FilterBar from 'src/dashboard/components/nativeFilters/FilterBar';\nimport Loading from 'src/components/Loading';\nimport { Global } from '@emotion/react';\nimport { shouldFocusTabs, getRootLevelTabsComponent } from './utils';\nimport DashboardContainer from './DashboardContainer';\nimport { useNativeFilters } from './state';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MAIN_HEADER_HEIGHT = 53;\nconst TABS_HEIGHT = 50;\nconst HEADER_HEIGHT = 72;\nconst CLOSED_FILTER_BAR_WIDTH = 32;\nconst OPEN_FILTER_BAR_WIDTH = 260;\nconst FILTER_BAR_HEADER_HEIGHT = 80;\nconst FILTER_BAR_TABS_HEIGHT = 46;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto 1fr;\n  flex: 1;\n`;\n// @z-index-above-dashboard-charts + 1 = 11\nconst FiltersPanel = styled.div`\n  grid-column: 1;\n  grid-row: 1 / span 2;\n  z-index: 11;\n`;\nconst StickyPanel = styled.div`\n  position: sticky;\n  top: -1px;\n  width: ${({ width }) => width}px;\n  flex: 0 0 ${({ width }) => width}px;\n`;\n// @z-index-above-dashboard-popovers (99) + 1 = 100\nconst StyledHeader = styled.div`\n  grid-column: 2;\n  grid-row: 1;\n  position: sticky;\n  top: 0px;\n  z-index: 100;\n`;\nconst StyledContent = styled.div`\n  grid-column: 2;\n  grid-row: 2;\n  // @z-index-above-dashboard-header (100) + 1 = 101\n  ${({ fullSizeChartId }) => fullSizeChartId && `z-index: 101;`}\n`;\nconst StyledDashboardContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  height: auto;\n  flex: 1;\n\n  .grid-container .dashboard-component-tabs {\n    box-shadow: none;\n    padding-left: 0;\n  }\n\n  .grid-container {\n    /* without this, the grid will not get smaller upon toggling the builder panel on */\n    width: 0px;\n    flex: 1;\n    position: relative;\n    margin-top: ${({ theme }) => theme.gridUnit * 6}px;\n    margin-right: ${({ theme }) => theme.gridUnit * 8}px;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 6}px;\n    margin-left: ${({ theme, dashboardFiltersOpen, editMode }) => {\n  if (!dashboardFiltersOpen && !editMode) {\n    return 0;\n  }\n  return theme.gridUnit * 8;\n}}px;\n  }\n\n  .dashboard-component-chart-holder {\n    // transitionable traits to show filter relevance\n    transition: opacity ${({ theme }) => theme.transitionTiming}s,\n      border-color ${({ theme }) => theme.transitionTiming}s,\n      box-shadow ${({ theme }) => theme.transitionTiming}s;\n    border: 0 solid transparent;\n  }\n`;\nconst DashboardBuilder = () => {\n  const dispatch = useDispatch();\n  const dashboardLayout = useSelector((state) => state.dashboardLayout.present);\n  const editMode = useSelector((state) => state.dashboardState.editMode);\n  const directPathToChild = useSelector((state) => state.dashboardState.directPathToChild);\n  const fullSizeChartId = useSelector((state) => state.dashboardState.fullSizeChartId);\n  const handleChangeTab = useCallback(({ pathToTabIndex }) => {\n    dispatch(setDirectPathToChild(pathToTabIndex));\n  }, [dispatch]);\n  const handleDeleteTopLevelTabs = useCallback(() => {\n    dispatch(deleteTopLevelTabs());\n    const firstTab = getDirectPathToTabIndex(getRootLevelTabsComponent(dashboardLayout), 0);\n    dispatch(setDirectPathToChild(firstTab));\n  }, [dashboardLayout, dispatch]);\n  const handleDrop = useCallback((dropResult) => dispatch(handleComponentDrop(dropResult)), [dispatch]);\n  const dashboardRoot = dashboardLayout[DASHBOARD_ROOT_ID];\n  const rootChildId = dashboardRoot.children[0];\n  const topLevelTabs = rootChildId !== DASHBOARD_GRID_ID ?\n  dashboardLayout[rootChildId] :\n  undefined;\n  const StandaloneMode = getUrlParam(URL_PARAMS.standalone);\n  const isReport = StandaloneMode === DashboardStandaloneMode.REPORT;\n  const hideDashboardHeader = StandaloneMode === DashboardStandaloneMode.HIDE_NAV_AND_TITLE || isReport;\n  const barTopOffset = (hideDashboardHeader ? 0 : HEADER_HEIGHT) + (\n  topLevelTabs ? TABS_HEIGHT : 0);\n  const { showDashboard, dashboardFiltersOpen, toggleDashboardFiltersOpen, nativeFiltersEnabled } = useNativeFilters();\n  const filterBarWidth = dashboardFiltersOpen ?\n  OPEN_FILTER_BAR_WIDTH :\n  CLOSED_FILTER_BAR_WIDTH;\n  const [containerRef, isSticky] = useElementOnScreen({\n    threshold: [1] });\n\n  const filterSetEnabled = isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS_SET);\n  const offset = FILTER_BAR_HEADER_HEIGHT + (\n  isSticky || StandaloneMode ? 0 : MAIN_HEADER_HEIGHT) + (\n  filterSetEnabled ? FILTER_BAR_TABS_HEIGHT : 0);\n  const filterBarHeight = `calc(100vh - ${offset}px)`;\n  const filterBarOffset = dashboardFiltersOpen ? 0 : barTopOffset + 20;\n  const draggableStyle = useMemo(() => ({\n    marginLeft: dashboardFiltersOpen || editMode ? 0 : -32 }),\n  [dashboardFiltersOpen, editMode]);\n  const renderDraggableContent = useCallback(({ dropIndicatorProps }) => ___EmotionJSX(\"div\", null,\n  !hideDashboardHeader && ___EmotionJSX(DashboardHeader, null),\n  dropIndicatorProps && ___EmotionJSX(\"div\", dropIndicatorProps),\n  !isReport && topLevelTabs && ___EmotionJSX(WithPopoverMenu, { shouldFocus: shouldFocusTabs, menuItems: [\n    ___EmotionJSX(IconButton, { icon: ___EmotionJSX(Icons.FallOutlined, { iconSize: \"xl\" }), label: \"Collapse tab content\", onClick: handleDeleteTopLevelTabs })],\n    editMode: editMode },\n\n  ___EmotionJSX(DashboardComponent, { id: topLevelTabs == null ? void 0 : topLevelTabs.id, parentId: DASHBOARD_ROOT_ID, depth: DASHBOARD_ROOT_DEPTH + 1, index: 0, renderTabContent: false, renderHoverMenu: false, onChangeTab: handleChangeTab }))),\n\n  [\n  editMode,\n  handleChangeTab,\n  handleDeleteTopLevelTabs,\n  hideDashboardHeader,\n  isReport,\n  topLevelTabs]);\n\n  return ___EmotionJSX(StyledDiv, null,\n  nativeFiltersEnabled && !editMode && ___EmotionJSX(FiltersPanel, null,\n  ___EmotionJSX(StickyPanel, { ref: containerRef, width: filterBarWidth },\n  ___EmotionJSX(ErrorBoundary, null,\n  ___EmotionJSX(FilterBar, { filtersOpen: dashboardFiltersOpen, toggleFiltersBar: toggleDashboardFiltersOpen, directPathToChild: directPathToChild, width: filterBarWidth, height: filterBarHeight, offset: filterBarOffset })))),\n\n\n\n  ___EmotionJSX(StyledHeader, null,\n\n  ___EmotionJSX(DragDroppable, { component: dashboardRoot, parentComponent: null, depth: DASHBOARD_ROOT_DEPTH, index: 0, orientation: \"column\", onDrop: handleDrop, editMode: editMode\n    // you cannot drop on/displace tabs if they already exist\n    , disableDragDrop: !!topLevelTabs, style: draggableStyle },\n  renderDraggableContent)),\n\n\n  ___EmotionJSX(StyledContent, { fullSizeChartId: fullSizeChartId },\n  ___EmotionJSX(Global, { styles: css`\n            // @z-index-above-dashboard-header (100) + 1 = 101\n            ${fullSizeChartId &&\n    `div > .filterStatusPopover.ant-popover{z-index: 101}`}\n          ` }),\n  ___EmotionJSX(\"div\", { className: cx('dashboard', editMode && 'dashboard--editing') },\n  ___EmotionJSX(StyledDashboardContent, { className: \"dashboard-content\", dashboardFiltersOpen: dashboardFiltersOpen, editMode: editMode },\n  showDashboard ? ___EmotionJSX(DashboardContainer, { topLevelTabs: topLevelTabs }) : ___EmotionJSX(Loading, null),\n  editMode && ___EmotionJSX(BuilderComponentPane, { topOffset: barTopOffset })))));\n\n\n\n\n};\nexport default DashboardBuilder;","map":null,"metadata":{},"sourceType":"module"}