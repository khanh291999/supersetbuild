{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEmpty from \"lodash/isEmpty\";import \"core-js/modules/es.string.replace.js\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { FeatureFlag, isFeatureEnabled, tn } from '@superset-ui/core';\n\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { useComponentDidUpdate } from 'src/common/hooks/useComponentDidUpdate';\nimport ColumnSelectPopoverTrigger from './ColumnSelectPopoverTrigger';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport function DndColumnSelect(props) {\n  const { value, options, multi = true, onChange, canDelete = true, ghostButtonText, name, label } = props;\n  const [newColumnPopoverVisible, setNewColumnPopoverVisible] = useState(false);\n  const optionSelector = useMemo(() => new OptionSelector(options, multi, value), [multi, options, value]);\n  // synchronize values in case of dataset changes\n  const handleOptionsChange = useCallback(() => {\n    const optionSelectorValues = optionSelector.getValues();\n    if (typeof value !== typeof optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (typeof value === 'string' &&\n    typeof optionSelectorValues === 'string' &&\n    value !== optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (Array.isArray(optionSelectorValues) &&\n    Array.isArray(value) && (\n    optionSelectorValues.length !== value.length ||\n    optionSelectorValues.every((val, index) => val === value[index]))) {\n      onChange(optionSelectorValues);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(value), JSON.stringify(optionSelector.getValues())]);\n  // useComponentDidUpdate to avoid running this for the first render, to avoid\n  // calling onChange when the initial value is not valid for the dataset\n  useComponentDidUpdate(handleOptionsChange);\n  const onDrop = useCallback((item) => {\n    const column = item.value;\n    if (!optionSelector.multi && !_isEmpty(optionSelector.values)) {\n      optionSelector.replace(0, column.column_name);\n    } else\n    {\n      optionSelector.add(column.column_name);\n    }\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const canDrop = useCallback((item) => {\n    const columnName = item.value.column_name;\n    return columnName in optionSelector.options && !optionSelector.has(columnName);\n  }, [optionSelector]);\n  const onClickClose = useCallback((index) => {\n    optionSelector.del(index);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const onShiftOptions = useCallback((dragIndex, hoverIndex) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const popoverOptions = useMemo(() => Object.values(options).filter((col) => !optionSelector.values.\n  map((val) => val.column_name).\n  includes(col.column_name)), [optionSelector.values, options]);\n  const valuesRenderer = useCallback(() => optionSelector.values.map((column, idx) => isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ? ___EmotionJSX(ColumnSelectPopoverTrigger, { columns: popoverOptions, onColumnEdit: (newColumn) => {\n      optionSelector.replace(idx, newColumn.column_name);\n      onChange(optionSelector.getValues());\n    }, editedColumn: column },\n  ___EmotionJSX(OptionWrapper, { key: idx, index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: `${DndItemType.ColumnOption}_${name}_${label}`, canDelete: canDelete, column: column, withCaret: true })) :\n  ___EmotionJSX(OptionWrapper, { key: idx, index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: `${DndItemType.ColumnOption}_${name}_${label}`, canDelete: canDelete, column: column })), [\n  canDelete,\n  label,\n  name,\n  onChange,\n  onClickClose,\n  onShiftOptions,\n  optionSelector,\n  popoverOptions]);\n\n  const addNewColumnWithPopover = useCallback((newColumn) => {\n    optionSelector.add(newColumn.column_name);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const togglePopover = useCallback((visible) => {\n    setNewColumnPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const openPopover = useCallback(() => {\n    togglePopover(true);\n  }, [togglePopover]);\n  const defaultGhostButtonText = isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n  tn('Drop a column here or click', 'Drop columns here or click', multi ? 2 : 1) :\n  tn('Drop column here', 'Drop columns here', multi ? 2 : 1);\n  return ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: onDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DndItemType.Column, displayGhostButton: multi || optionSelector.values.length === 0, ghostButtonText: ghostButtonText || defaultGhostButtonText, onClickGhostButton: isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n    openPopover :\n    undefined }, props)),\n  ___EmotionJSX(ColumnSelectPopoverTrigger, { columns: popoverOptions, onColumnEdit: addNewColumnWithPopover, isControlledComponent: true, togglePopover: togglePopover, closePopover: closePopover, visible: newColumnPopoverVisible },\n  ___EmotionJSX(\"div\", null)));\n\n\n}","map":null,"metadata":{},"sourceType":"module"}