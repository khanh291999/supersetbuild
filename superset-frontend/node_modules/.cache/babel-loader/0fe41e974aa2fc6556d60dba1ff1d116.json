{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { createRef } from 'react';\nimport shortid from 'shortid';\nimport Alert from 'src/components/Alert';\nimport Tabs from 'src/components/Tabs';\nimport { t, styled } from '@superset-ui/core';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport Label from 'src/components/Label';\nimport QueryHistory from '../QueryHistory';\nimport ResultSet from '../ResultSet';\nimport { STATUS_OPTIONS, STATE_TYPE_MAP, LOCALSTORAGE_MAX_QUERY_AGE_MS } from '../../constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TAB_HEIGHT = 140;\nconst StyledPane = styled.div`\n  width: 100%;\n\n  .ant-tabs .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .SouthPaneTabs {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .ant-tabs-tabpane {\n    display: flex;\n    flex-direction: column;\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .tab-content {\n    .alert {\n      margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    button.fetch {\n      margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\nexport default function SouthPane({ editorQueries, latestQueryId, dataPreviewQueries, actions, activeSouthPaneTab = 'Results', height, databases, offline = false, displayLimit, user, defaultQueryLimit }) {\n  const innerTabContentHeight = height - TAB_HEIGHT;\n  const southPaneRef = /*#__PURE__*/createRef();\n  const switchTab = (id) => {\n    actions.setActiveSouthPaneTab(id);\n  };\n  const renderOfflineStatus = () => ___EmotionJSX(Label, { className: \"m-r-3\", type: STATE_TYPE_MAP[STATUS_OPTIONS.offline] },\n  STATUS_OPTIONS.offline);\n\n  const renderResults = () => {\n    let latestQuery;\n    if (editorQueries.length > 0) {\n      // get the latest query\n      latestQuery = editorQueries.find(({ id }) => id === latestQueryId);\n    }\n    let results;\n    if (latestQuery) {var _latestQuery, _latestQuery$extra;\n      if ((_latestQuery = latestQuery) != null && (_latestQuery$extra = _latestQuery.extra) != null && _latestQuery$extra.errors) {\n        latestQuery.errors = latestQuery.extra.errors;\n      }\n      if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      latestQuery.state === 'success' &&\n      !latestQuery.resultsKey &&\n      !latestQuery.results) {\n        results = ___EmotionJSX(Alert, { type: \"warning\", message: t('No stored results found, you need to re-run your query') });\n        return results;\n      }\n      if (Date.now() - latestQuery.startDttm <= LOCALSTORAGE_MAX_QUERY_AGE_MS) {\n        results = ___EmotionJSX(ResultSet, { showControls: true, search: true, query: latestQuery, actions: actions, user: user, height: innerTabContentHeight, database: databases[latestQuery.dbId], displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit });\n      }\n    } else\n    {\n      results = ___EmotionJSX(Alert, { type: \"info\", message: t('Run a query to display results here') });\n    }\n    return results;\n  };\n  const renderDataPreviewTabs = () => dataPreviewQueries.map((query) => ___EmotionJSX(Tabs.TabPane, { tab: t('Preview: `%s`', decodeURIComponent(query.tableName)), key: query.id },\n  ___EmotionJSX(ResultSet, { query: query, visualize: false, csv: false, actions: actions, cache: true, user: user, height: innerTabContentHeight, displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit })));\n\n  return offline ? renderOfflineStatus() : ___EmotionJSX(StyledPane, { className: \"SouthPane\", ref: southPaneRef },\n  ___EmotionJSX(Tabs, { activeKey: activeSouthPaneTab, className: \"SouthPaneTabs\", onChange: switchTab, id: shortid.generate(), fullWidth: false, animated: false },\n  ___EmotionJSX(Tabs.TabPane, { tab: t('Results'), key: \"Results\" },\n  renderResults()),\n\n  ___EmotionJSX(Tabs.TabPane, { tab: t('Query history'), key: \"History\" },\n  ___EmotionJSX(QueryHistory, { queries: editorQueries, actions: actions, displayLimit: displayLimit })),\n\n  renderDataPreviewTabs()));\n\n\n}","map":null,"metadata":{},"sourceType":"module"}