{"ast":null,"code":"function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { t } from '@superset-ui/core';\nimport { Switch, Select, Button } from 'src/common/components';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport FormLabel from 'src/components/Form/FormLabel';\nimport { DeleteFilled, CloseOutlined } from '@ant-design/icons';\nimport { formScrollableStyles, validatedFormStyles, CredentialInfoForm, toggleStyle, infoTooltip, StyledFooterButton, StyledCatalogTable, labelMarginBotton } from './styles';\n// These are the columns that are going to be added to encrypted extra, they differ in name based\n// on the engine, however we want to use the same component for each of them. Make sure to add the\n// the engine specific name here.\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";export const encryptedCredentialsMap = {\n  gsheets: 'service_account_info',\n  bigquery: 'credentials_info' };\n\nvar CredentialInfoOptions;\n(function (CredentialInfoOptions) {\n  CredentialInfoOptions[CredentialInfoOptions[\"jsonUpload\"] = 0] = \"jsonUpload\";\n  CredentialInfoOptions[CredentialInfoOptions[\"copyPaste\"] = 1] = \"copyPaste\";\n})(CredentialInfoOptions || (CredentialInfoOptions = {}));\nconst castStringToBoolean = (optionValue) => optionValue === 'true';\nexport const FormFieldOrder = [\n'host',\n'port',\n'database',\n'username',\n'password',\n'database_name',\n'credentials_info',\n'service_account_info',\n'catalog',\n'query',\n'encryption'];var _ref = process.env.NODE_ENV === \"production\" ? { name: \"s5xdrg\", styles: \"display:flex;align-items:center\" } : { name: \"1s62nco-CredentialsInfo\", styles: \"display:flex;align-items:center;label:CredentialsInfo;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nconst CredentialsInfo = ({ changeMethods, isEditMode, db, editNewDb }) => {var _db$parameters, _db$parameters2, _db$parameters3;\n  const [uploadOption, setUploadOption] = useState(CredentialInfoOptions.jsonUpload.valueOf());\n  const [fileToUpload, setFileToUpload] = useState(null);\n  const [isPublic, setIsPublic] = useState(true);\n  const showCredentialsInfo = (db == null ? void 0 : db.engine) === 'gsheets' ? !isEditMode && !isPublic : !isEditMode;\n  // a database that has an optional encrypted field has an encrypted_extra that is an empty object, this checks for that.\n  const isEncrypted = isEditMode && (db == null ? void 0 : db.encrypted_extra) !== '{}';\n  const encryptedField = (db == null ? void 0 : db.engine) && encryptedCredentialsMap[db.engine];\n  const encryptedValue = typeof (db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters[encryptedField]) === 'object' ?\n  JSON.stringify(db == null ? void 0 : (_db$parameters2 = db.parameters) == null ? void 0 : _db$parameters2[encryptedField]) :\n  db == null ? void 0 : (_db$parameters3 = db.parameters) == null ? void 0 : _db$parameters3[encryptedField];\n  return ___EmotionJSX(CredentialInfoForm, null,\n  (db == null ? void 0 : db.engine) === 'gsheets' && ___EmotionJSX(\"div\", { className: \"catalog-type-select\" },\n  ___EmotionJSX(FormLabel, { css: (theme) => labelMarginBotton(theme), required: true },\n  t('Type of Google Sheets allowed')),\n\n  ___EmotionJSX(Select, { style: { width: '100%' }, defaultValue: isEncrypted ? 'false' : 'true', onChange: (value) => setIsPublic(castStringToBoolean(value)) },\n  ___EmotionJSX(Select.Option, { value: \"true\", key: 1 },\n  t('Publicly shared sheets only')),\n\n  ___EmotionJSX(Select.Option, { value: \"false\", key: 2 },\n  t('Public and privately shared sheets')))),\n\n\n\n  showCredentialsInfo && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(FormLabel, { required: true },\n  t('How∂ do you want to enter service account credentials?')),\n\n  ___EmotionJSX(Select, { defaultValue: uploadOption, style: { width: '100%' }, onChange: (option) => setUploadOption(option) },\n  ___EmotionJSX(Select.Option, { value: CredentialInfoOptions.jsonUpload },\n  t('Upload JSON file')),\n\n\n  ___EmotionJSX(Select.Option, { value: CredentialInfoOptions.copyPaste },\n  t('Copy and Paste JSON credentials')))),\n\n\n\n  uploadOption === CredentialInfoOptions.copyPaste ||\n  isEditMode ||\n  editNewDb ? ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(FormLabel, { required: true }, t('Service Account')),\n  ___EmotionJSX(\"textarea\", { className: \"input-form\", name: encryptedField, value: encryptedValue, onChange: changeMethods.onParametersChange, placeholder: \"Paste content of service credentials JSON file here\" }),\n  ___EmotionJSX(\"span\", { className: \"label-paste\" },\n  t('Copy and paste the entire service account .json file here'))) :\n\n  showCredentialsInfo && ___EmotionJSX(\"div\", { className: \"input-container\", css: (theme) => infoTooltip(theme) },\n  ___EmotionJSX(\"div\", { css: _ref },\n  ___EmotionJSX(FormLabel, { required: true }, t('Upload Credentials')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Use the JSON file you automatically downloaded when creating your service account.'), viewBox: \"0 0 24 24\" })),\n\n\n  !fileToUpload && ___EmotionJSX(Button, { className: \"input-upload-btn\", onClick: () => {var _document, _document$getElementB;return (_document = document) == null ? void 0 : (_document$getElementB = _document.getElementById('selectedFile')) == null ? void 0 : _document$getElementB.click();} },\n  t('Choose File')),\n\n  fileToUpload && ___EmotionJSX(\"div\", { className: \"input-upload-current\" },\n  fileToUpload,\n  ___EmotionJSX(DeleteFilled, { onClick: () => {\n      setFileToUpload(null);\n      changeMethods.onParametersChange({\n        target: {\n          name: encryptedField,\n          value: '' } });\n\n\n    } })),\n\n\n  ___EmotionJSX(\"input\", { id: \"selectedFile\", className: \"input-upload\", type: \"file\", onChange: async (event) => {var _file, _file2;\n      let file;\n      if (event.target.files) {\n        file = event.target.files[0];\n      }\n      setFileToUpload((_file = file) == null ? void 0 : _file.name);\n      changeMethods.onParametersChange({\n        target: {\n          type: null,\n          name: encryptedField,\n          value: await ((_file2 = file) == null ? void 0 : _file2.text()),\n          checked: false } });\n\n\n      document.getElementById('selectedFile').value = null;\n    } })));\n\n\n};\nconst TableCatalog = ({ required, changeMethods, getValidation, validationErrors, db }) => {\n  const tableCatalog = (db == null ? void 0 : db.catalog) || [];\n  const catalogError = validationErrors || {};\n  return ___EmotionJSX(StyledCatalogTable, null,\n  ___EmotionJSX(\"h4\", { className: \"gsheet-title\" },\n  t('Connect Google Sheets as tables to this database')),\n\n  ___EmotionJSX(\"div\", null,\n  tableCatalog == null ? void 0 : tableCatalog.map((sheet, idx) => {var _catalogError$idx, _catalogError$idx2;return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(FormLabel, { className: \"catalog-label\", required: true },\n    t('Google Sheet Name and URL')),\n\n    ___EmotionJSX(\"div\", { className: \"catalog-name\" },\n    ___EmotionJSX(ValidatedInput, { className: \"catalog-name-input\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: (_catalogError$idx = catalogError[idx]) == null ? void 0 : _catalogError$idx.name, placeholder: t('Enter a name for this sheet'), onChange: (e) => {\n        changeMethods.onParametersChange({\n          target: {\n            type: `catalog-${idx}`,\n            name: 'name',\n            value: e.target.value } });\n\n\n      }, value: sheet.name }),\n    (tableCatalog == null ? void 0 : tableCatalog.length) > 1 && ___EmotionJSX(CloseOutlined, { className: \"catalog-delete\", onClick: () => changeMethods.onRemoveTableCatalog(idx) })),\n\n    ___EmotionJSX(ValidatedInput, { className: \"catalog-name-url\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: (_catalogError$idx2 = catalogError[idx]) == null ? void 0 : _catalogError$idx2.url, placeholder: t('Paste the shareable Google Sheet URL here'), onChange: (e) => changeMethods.onParametersChange({\n        target: {\n          type: `catalog-${idx}`,\n          name: 'value',\n          value: e.target.value } }),\n\n      value: sheet.value }));}),\n\n  ___EmotionJSX(StyledFooterButton, { className: \"catalog-add-btn\", onClick: () => {\n      changeMethods.onAddTableCatalog();\n    } }, \"+ \",\n  t('Add sheet'))));\n\n\n\n};\nconst hostField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters4;return ___EmotionJSX(ValidatedInput, { id: \"host\", name: \"host\", value: db == null ? void 0 : (_db$parameters4 = db.parameters) == null ? void 0 : _db$parameters4.host, required: required, hasTooltip: true, tooltipText: t('This can be either an IP address (e.g. 127.0.0.1) or a domain name (e.g. mydatabase.com).'), validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.host, placeholder: \"e.g. 127.0.0.1\", className: \"form-group-w-50\", label: \"Host\", onChange: changeMethods.onParametersChange });};\nconst portField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters5;return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ValidatedInput, { id: \"port\", name: \"port\", type: \"number\", required: required, value: db == null ? void 0 : (_db$parameters5 = db.parameters) == null ? void 0 : _db$parameters5.port, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.port, placeholder: \"e.g. 5432\", className: \"form-group-w-50\", label: \"Port\", onChange: changeMethods.onParametersChange }));};\n\nconst databaseField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters6;return ___EmotionJSX(ValidatedInput, { id: \"database\", name: \"database\", required: required, value: db == null ? void 0 : (_db$parameters6 = db.parameters) == null ? void 0 : _db$parameters6.database, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database, placeholder: \"e.g. world_population\", label: \"Database name\", onChange: changeMethods.onParametersChange, helpText: t('Copy the name of the  database you are trying to connect to.') });};\nconst usernameField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters7;return ___EmotionJSX(ValidatedInput, { id: \"username\", name: \"username\", required: required, value: db == null ? void 0 : (_db$parameters7 = db.parameters) == null ? void 0 : _db$parameters7.username, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.username, placeholder: \"e.g. Analytics\", label: \"Username\", onChange: changeMethods.onParametersChange });};\nconst passwordField = ({ required, changeMethods, getValidation, validationErrors, db, isEditMode }) => {var _db$parameters8;return ___EmotionJSX(ValidatedInput, { id: \"password\", name: \"password\", required: required, type: isEditMode && 'password', value: db == null ? void 0 : (_db$parameters8 = db.parameters) == null ? void 0 : _db$parameters8.password, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.password, placeholder: \"e.g. ********\", label: \"Password\", onChange: changeMethods.onParametersChange });};\nconst displayField = ({ changeMethods, getValidation, validationErrors, db }) => ___EmotionJSX(React.Fragment, null,\n___EmotionJSX(ValidatedInput, { id: \"database_name\", name: \"database_name\", required: true, value: db == null ? void 0 : db.database_name, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database_name, placeholder: \"\", label: t('Display Name'), onChange: changeMethods.onChange, helpText: t('Pick a nickname for this database to display as in Superset.') }));\n\nconst queryField = ({ required, changeMethods, getValidation, validationErrors, db }) => ___EmotionJSX(ValidatedInput, { id: \"query_input\", name: \"query_input\", required: required, value: (db == null ? void 0 : db.query_input) || '', validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.query, placeholder: \"e.g. param1=value1&param2=value2\", label: \"Additional Parameters\", onChange: changeMethods.onQueryChange, helpText: t('Add additional custom parameters') });\nconst forceSSLField = ({ isEditMode, changeMethods, db, sslForced }) => {var _db$parameters9;return ___EmotionJSX(\"div\", { css: (theme) => infoTooltip(theme) },\n  ___EmotionJSX(Switch, { disabled: sslForced && !isEditMode, checked: (db == null ? void 0 : (_db$parameters9 = db.parameters) == null ? void 0 : _db$parameters9.encryption) || sslForced, onChange: (changed) => {\n      changeMethods.onParametersChange({\n        target: {\n          type: 'toggle',\n          name: 'encryption',\n          checked: true,\n          value: changed } });\n\n\n    } }),\n  ___EmotionJSX(\"span\", { css: toggleStyle }, \"SSL\"),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('SSL Mode \"require\" will be used.'), placement: \"right\", viewBox: \"0 -5 24 24\" }));};\n\nconst FORM_FIELD_MAP = {\n  host: hostField,\n  port: portField,\n  database: databaseField,\n  username: usernameField,\n  password: passwordField,\n  database_name: displayField,\n  query: queryField,\n  encryption: forceSSLField,\n  credentials_info: CredentialsInfo,\n  service_account_info: CredentialsInfo,\n  catalog: TableCatalog };\n\nconst DatabaseConnectionForm = ({ dbModel: { parameters }, onParametersChange, onChange, onQueryChange, onParametersUploadFileChange, onAddTableCatalog, onRemoveTableCatalog, validationErrors, getValidation, db, isEditMode = false, sslForced, editNewDb }) => ___EmotionJSX(React.Fragment, null,\n___EmotionJSX(\"div\", {\n  // @ts-ignore\n  css: (theme) => [\n  formScrollableStyles,\n  validatedFormStyles(theme)] },\n\nparameters &&\nFormFieldOrder.filter((key) => Object.keys(parameters.properties).includes(key) ||\nkey === 'database_name').map((field) => {var _parameters$required;return FORM_FIELD_MAP[field]({\n    required: (_parameters$required = parameters.required) == null ? void 0 : _parameters$required.includes(field),\n    changeMethods: {\n      onParametersChange,\n      onChange,\n      onQueryChange,\n      onParametersUploadFileChange,\n      onAddTableCatalog,\n      onRemoveTableCatalog },\n\n    validationErrors,\n    getValidation,\n    db,\n    key: field,\n    isEditMode,\n    sslForced,\n    editNewDb });})));\n\n\n\nexport const FormFieldMap = FORM_FIELD_MAP;\nexport default DatabaseConnectionForm;","map":null,"metadata":{},"sourceType":"module"}