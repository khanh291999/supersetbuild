{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Typography, Tooltip } from 'src/common/components';\nimport { useDispatch } from 'react-redux';\nimport Button from 'src/components/Button';\nimport { setFilterSetsConfiguration } from 'src/dashboard/actions/nativeFilters';\nimport { WarningOutlined } from '@ant-design/icons';\nimport { ActionButtons } from './Footer';\nimport { useNativeFiltersDataMask, useFilters, useFilterSets } from '../state';\nimport { APPLY_FILTERS_HINT, findExistingFilterSet } from './utils';\nimport { useFilterSetNameDuplicated } from './state';\nimport { getFilterBarTestId } from '../index';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  align-items: flex-start;\n  justify-content: flex-start;\n  grid-gap: ${({ theme }) => theme.gridUnit}px;\n  background: ${({ theme }) => theme.colors.primary.light4};\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst Title = styled(Typography.Text)`\n  color: ${({ theme }) => theme.colors.primary.dark2};\n`;\nconst Warning = styled(Typography.Text)`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  & .anticon {\n    padding: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst ActionButton = styled.div`\n  display: flex;\n  & button {\n    ${({ disabled }) => `pointer-events: ${disabled ? 'none' : 'all'}`};\n    flex: 1;\n  }\n`;\nconst EditSection = ({ filterSetId, onCancel, dataMaskSelected, disabled }) => {\n  const dataMaskApplied = useNativeFiltersDataMask();\n  const dispatch = useDispatch();\n  const filterSets = useFilterSets();\n  const filters = useFilters();\n  const filterSetFilterValues = Object.values(filterSets);\n  const [filterSetName, setFilterSetName] = useState(filterSets[filterSetId].name);\n  const isFilterSetNameDuplicated = useFilterSetNameDuplicated(filterSetName, filterSets[filterSetId].name);\n  const handleSave = () => {\n    dispatch(setFilterSetsConfiguration(filterSetFilterValues.map((filterSet) => {\n      const newFilterSet = {\n        ...filterSet,\n        name: filterSetName,\n        nativeFilters: filters,\n        dataMask: { ...dataMaskApplied } };\n\n      return filterSetId === filterSet.id ? newFilterSet : filterSet;\n    })));\n    onCancel();\n  };\n  const foundFilterSet = useMemo(() => findExistingFilterSet({\n    dataMaskSelected,\n    filterSetFilterValues }),\n  [dataMaskSelected, filterSetFilterValues]);\n  const isDuplicateFilterSet = foundFilterSet && foundFilterSet.id !== filterSetId;\n  const resultDisabled = disabled || isDuplicateFilterSet || isFilterSetNameDuplicated;\n  return ___EmotionJSX(Wrapper, null,\n  ___EmotionJSX(Title, { strong: true }, t('Editing filter set:')),\n  ___EmotionJSX(Title, { editable: {\n      editing: true,\n      icon: ___EmotionJSX(\"span\", null),\n      onChange: setFilterSetName } },\n\n  filterSetName),\n\n  ___EmotionJSX(ActionButtons, null,\n  ___EmotionJSX(Button, { ghost: true, buttonStyle: \"tertiary\", buttonSize: \"small\", onClick: onCancel },\n  t('Cancel')),\n\n  ___EmotionJSX(Tooltip, { placement: \"right\", title: isFilterSetNameDuplicated &&\n    t('Filter set with this name already exists') ||\n    isDuplicateFilterSet && t('Filter set already exists') ||\n    disabled && APPLY_FILTERS_HINT },\n  ___EmotionJSX(ActionButton, { disabled: resultDisabled },\n  ___EmotionJSX(Button, _extends({ disabled: resultDisabled, buttonStyle: \"primary\", htmlType: \"submit\", buttonSize: \"small\", onClick: handleSave }, getFilterBarTestId('filter-set-edit-save')),\n  t('Save'))))),\n\n\n\n\n  isDuplicateFilterSet && ___EmotionJSX(Warning, { mark: true },\n  ___EmotionJSX(WarningOutlined, null),\n  t('This filter set is identical to: \"%s\"', foundFilterSet == null ? void 0 : foundFilterSet.name)));\n\n\n};\nexport default EditSection;","map":null,"metadata":{},"sourceType":"module"}