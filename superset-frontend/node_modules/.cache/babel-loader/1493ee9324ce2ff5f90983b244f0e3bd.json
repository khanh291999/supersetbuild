{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { styled, t } from '@superset-ui/core';\nimport { useFilters, usePagination, useSortBy, useTable } from 'react-table';\nimport { Empty } from 'src/common/components';\nimport { TableCollection, Pagination } from 'src/components/dataViewCommon';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_PAGE_SIZE = 10;\nexport var EmptyWrapperType;\n(function (EmptyWrapperType) {\n  EmptyWrapperType[\"Default\"] = \"Default\";\n  EmptyWrapperType[\"Small\"] = \"Small\";\n})(EmptyWrapperType || (EmptyWrapperType = {}));\nconst EmptyWrapper = styled.div`\n  margin: ${({ theme }) => theme.gridUnit * 40}px 0;\n`;\nconst TableViewStyles = styled.div`\n  ${({ scrollTable, theme }) => scrollTable &&\n`\n    flex: 1 1 auto;\n    margin-bottom: ${theme.gridUnit * 4}px;\n    overflow: auto;\n  `}\n\n  .table-row {\n    ${({ theme, small }) => !small && `height: ${theme.gridUnit * 11 - 1}px;`}\n\n    .table-cell {\n      ${({ theme, small }) => small &&\n`\n        padding-top: ${theme.gridUnit + 1}px;\n        padding-bottom: ${theme.gridUnit + 1}px;\n        line-height: 1.45;\n      `}\n    }\n  }\n\n  th[role='columnheader'] {\n    z-index: 1;\n    border-bottom: ${({ theme }) => `${theme.gridUnit - 2}px solid ${theme.colors.grayscale.light2}`};\n    ${({ small }) => small && `padding-bottom: 0;`}\n  }\n`;\nconst PaginationStyles = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n\n  ${({ isPaginationSticky }) => isPaginationSticky &&\n`\n        position: sticky;\n        bottom: 0;\n        left: 0;\n    `};\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\nconst TableView = ({ columns, data, pageSize: initialPageSize, totalCount = data.length, initialPageIndex, initialSortBy = [], loading = false, withPagination = true, emptyWrapperType = EmptyWrapperType.Default, noDataText, showRowCount = true, serverPagination = false, onServerPagination = () => {}, ...props }) => {\n  const initialState = {\n    pageSize: initialPageSize != null ? initialPageSize : DEFAULT_PAGE_SIZE,\n    pageIndex: initialPageIndex != null ? initialPageIndex : 0,\n    sortBy: initialSortBy };\n\n  const { getTableProps, getTableBodyProps, headerGroups, page, rows, prepareRow, pageCount, gotoPage, state: { pageIndex, pageSize, sortBy } } = useTable({\n    columns,\n    data,\n    initialState,\n    manualPagination: serverPagination,\n    manualSortBy: serverPagination,\n    pageCount: Math.ceil(totalCount / initialState.pageSize) },\n  useFilters, useSortBy, usePagination);\n  useEffect(() => {\n    if (serverPagination && pageIndex !== initialState.pageIndex) {\n      onServerPagination({\n        pageIndex });\n\n    }\n  }, [pageIndex]);\n  useEffect(() => {\n    if (serverPagination && !isEqual(sortBy, initialState.sortBy)) {\n      onServerPagination({\n        pageIndex: 0,\n        sortBy });\n\n    }\n  }, [sortBy]);\n  const content = withPagination ? page : rows;\n  let EmptyWrapperComponent;\n  switch (emptyWrapperType) {\n    case EmptyWrapperType.Small:\n      EmptyWrapperComponent = ({ children }) => ___EmotionJSX(React.Fragment, null, children);\n      break;\n    case EmptyWrapperType.Default:\n    default:\n      EmptyWrapperComponent = ({ children }) => ___EmotionJSX(EmptyWrapper, null, children);}\n\n  const isEmpty = !loading && content.length === 0;\n  const hasPagination = pageCount > 1 && withPagination;\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(TableViewStyles, props,\n  ___EmotionJSX(TableCollection, { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, prepareRow: prepareRow, headerGroups: headerGroups, rows: content, columns: columns, loading: loading }),\n  isEmpty && ___EmotionJSX(EmptyWrapperComponent, null,\n  noDataText ? ___EmotionJSX(Empty, { image: Empty.PRESENTED_IMAGE_SIMPLE, description: noDataText }) : ___EmotionJSX(Empty, { image: Empty.PRESENTED_IMAGE_SIMPLE }))),\n\n\n  hasPagination && ___EmotionJSX(PaginationStyles, { className: \"pagination-container\", isPaginationSticky: props.isPaginationSticky },\n  ___EmotionJSX(Pagination, { totalPages: pageCount || 0, currentPage: pageCount ? pageIndex + 1 : 0, onChange: (p) => gotoPage(p - 1), hideFirstAndLastPageLinks: true }),\n  showRowCount && ___EmotionJSX(\"div\", { className: \"row-count-container\" },\n  !loading &&\n  t('%s-%s of %s', pageSize * pageIndex + (page.length && 1), pageSize * pageIndex + page.length, totalCount))));\n\n\n\n};\nexport default /*#__PURE__*/React.memo(TableView);","map":null,"metadata":{},"sourceType":"module"}