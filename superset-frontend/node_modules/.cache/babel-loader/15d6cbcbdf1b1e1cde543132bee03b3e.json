{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getDropPosition, {\nclearDropCache,\nDROP_TOP,\nDROP_RIGHT,\nDROP_BOTTOM,\nDROP_LEFT } from\n'../../util/getDropPosition';\n\nexport default function handleDrop(props, monitor, Component) {\n  // this may happen due to throttling\n  if (!Component.mounted) return undefined;\n\n  Component.setState(() => ({ dropIndicator: null }));\n  const dropPosition = getDropPosition(monitor, Component);\n\n  if (!dropPosition) {\n    return undefined;\n  }\n\n  const {\n    parentComponent,\n    component,\n    index: componentIndex,\n    onDrop,\n    orientation } =\n  Component.props;\n\n  const draggingItem = monitor.getItem();\n\n  const dropAsChildOrSibling =\n  orientation === 'row' && (\n  dropPosition === DROP_TOP || dropPosition === DROP_BOTTOM) ||\n  orientation === 'column' && (\n  dropPosition === DROP_LEFT || dropPosition === DROP_RIGHT) ?\n  'sibling' :\n  'child';\n\n  const dropResult = {\n    source: {\n      id: draggingItem.parentId,\n      type: draggingItem.parentType,\n      index: draggingItem.index },\n\n    dragging: {\n      id: draggingItem.id,\n      type: draggingItem.type,\n      meta: draggingItem.meta } };\n\n\n\n  // simplest case, append as child\n  if (dropAsChildOrSibling === 'child') {\n    dropResult.destination = {\n      id: component.id,\n      type: component.type,\n      index: component.children.length };\n\n  } else {\n    // if the item is in the same list with a smaller index, you must account for the\n    // \"missing\" index upon movement within the list\n    const sameParent =\n    parentComponent && draggingItem.parentId === parentComponent.id;\n    const sameParentLowerIndex =\n    sameParent && draggingItem.index < componentIndex;\n\n    let nextIndex = sameParentLowerIndex ? componentIndex - 1 : componentIndex;\n    if (dropPosition === DROP_BOTTOM || dropPosition === DROP_RIGHT) {\n      nextIndex += 1;\n    }\n\n    dropResult.destination = {\n      id: parentComponent.id,\n      type: parentComponent.type,\n      index: nextIndex };\n\n  }\n\n  onDrop(dropResult);\n  clearDropCache();\n\n  return dropResult;\n}","map":null,"metadata":{},"sourceType":"module"}