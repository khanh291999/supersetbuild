{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nconst findPermission = memoizeOne((perm, view, roles) => !!roles &&\nObject.values(roles).some((permissions) => permissions.some(([perm_, view_]) => perm_ === perm && view_ === view)));\nexport default findPermission;\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\nconst isUserAdmin = (user) => Object.keys(user.roles).some((role) => role.toLowerCase() === ADMIN_ROLE_NAME);\nconst isUserDashboardOwner = (dashboard, user) => dashboard.owners.some((owner) => owner.username === user.username);\nexport const canUserEditDashboard = (dashboard, user) => !!(user != null && user.roles) && (\nisUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\nfindPermission('can_write', 'Dashboard', user.roles);","map":null,"metadata":{},"sourceType":"module"}