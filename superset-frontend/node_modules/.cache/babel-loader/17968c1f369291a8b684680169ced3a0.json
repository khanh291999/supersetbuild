{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport moment from 'moment';\nimport { SEPARATOR } from './dateFilterUtils';\nimport { SEVEN_DAYS_AGO, MIDNIGHT, MOMENT_FORMAT } from './constants';\n/**\n * RegExp to test a string for a full ISO 8601 Date\n * Does not do any sort of date validation, only checks if the string is according to the ISO 8601 spec.\n *  YYYY-MM-DDThh:mm:ss\n *  YYYY-MM-DDThh:mm:ssTZD\n *  YYYY-MM-DDThh:mm:ss.sTZD\n * @see: https://www.w3.org/TR/NOTE-datetime\n */\nconst iso8601 = String.raw`\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.\\d+)?(?:(?:[+-]\\d\\d:\\d\\d)|Z)?`;\nconst datetimeConstant = String.raw`TODAY|NOW`;\nconst grainValue = String.raw`[+-]?[1-9][0-9]*`;\nconst grain = String.raw`YEAR|QUARTER|MONTH|WEEK|DAY|HOUR|MINUTE|SECOND`;\nconst CUSTOM_RANGE_EXPRESSION = RegExp(String.raw`^DATEADD\\(DATETIME\\(\"(${iso8601}|${datetimeConstant})\"\\),\\s(${grainValue}),\\s(${grain})\\)$`, 'i');\nexport const ISO8601_AND_CONSTANT = RegExp(String.raw`^${iso8601}$|^${datetimeConstant}$`, 'i');\nconst DATETIME_CONSTANT = ['now', 'today'];\nconst defaultCustomRange = {\n  sinceDatetime: SEVEN_DAYS_AGO,\n  sinceMode: 'relative',\n  sinceGrain: 'day',\n  sinceGrainValue: -7,\n  untilDatetime: MIDNIGHT,\n  untilMode: 'specific',\n  untilGrain: 'day',\n  untilGrainValue: 7,\n  anchorMode: 'now',\n  anchorValue: 'now' };\n\nconst SPECIFIC_MODE = ['specific', 'today', 'now'];\nexport const dttmToMoment = (dttm) => {\n  if (dttm === 'now') {\n    return moment().utc().startOf('second');\n  }\n  if (dttm === 'today') {\n    return moment().utc().startOf('day');\n  }\n  return moment(dttm);\n};\nexport const dttmToString = (dttm) => dttmToMoment(dttm).format(MOMENT_FORMAT);\nexport const customTimeRangeDecode = (timeRange) => {\n  const splitDateRange = timeRange.split(SEPARATOR);\n  if (splitDateRange.length === 2) {\n    const [since, until] = splitDateRange;\n    // specific : specific\n    if (ISO8601_AND_CONSTANT.test(since) && ISO8601_AND_CONSTANT.test(until)) {\n      const sinceMode = DATETIME_CONSTANT.includes(since) ?\n      since :\n      'specific';\n      const untilMode = DATETIME_CONSTANT.includes(until) ?\n      until :\n      'specific';\n      return {\n        customRange: {\n          ...defaultCustomRange,\n          sinceDatetime: since,\n          untilDatetime: until,\n          sinceMode,\n          untilMode },\n\n        matchedFlag: true };\n\n    }\n    // relative : specific\n    const sinceCapturedGroup = since.match(CUSTOM_RANGE_EXPRESSION);\n    if (sinceCapturedGroup &&\n    ISO8601_AND_CONSTANT.test(until) &&\n    since.includes(until)) {\n      const [dttm, grainValue, grain] = sinceCapturedGroup.slice(1);\n      const untilMode = DATETIME_CONSTANT.includes(until) ?\n      until :\n      'specific';\n      return {\n        customRange: {\n          ...defaultCustomRange,\n          sinceGrain: grain,\n          sinceGrainValue: parseInt(grainValue, 10),\n          sinceDatetime: dttm,\n          untilDatetime: dttm,\n          sinceMode: 'relative',\n          untilMode },\n\n        matchedFlag: true };\n\n    }\n    // specific : relative\n    const untilCapturedGroup = until.match(CUSTOM_RANGE_EXPRESSION);\n    if (ISO8601_AND_CONSTANT.test(since) &&\n    untilCapturedGroup &&\n    until.includes(since)) {\n      const [dttm, grainValue, grain] = [...untilCapturedGroup.slice(1)];\n      const sinceMode = DATETIME_CONSTANT.includes(since) ?\n      since :\n      'specific';\n      return {\n        customRange: {\n          ...defaultCustomRange,\n          untilGrain: grain,\n          untilGrainValue: parseInt(grainValue, 10),\n          sinceDatetime: dttm,\n          untilDatetime: dttm,\n          untilMode: 'relative',\n          sinceMode },\n\n        matchedFlag: true };\n\n    }\n    // relative : relative\n    if (sinceCapturedGroup && untilCapturedGroup) {\n      const [sinceDttm, sinceGrainValue, sinceGrain] = [\n      ...sinceCapturedGroup.slice(1)];\n\n      const [untileDttm, untilGrainValue, untilGrain] = [\n      ...untilCapturedGroup.slice(1)];\n\n      if (sinceDttm === untileDttm) {\n        return {\n          customRange: {\n            ...defaultCustomRange,\n            sinceGrain: sinceGrain,\n            sinceGrainValue: parseInt(sinceGrainValue, 10),\n            sinceDatetime: sinceDttm,\n            untilGrain: untilGrain,\n            untilGrainValue: parseInt(untilGrainValue, 10),\n            untilDatetime: untileDttm,\n            anchorValue: sinceDttm,\n            sinceMode: 'relative',\n            untilMode: 'relative',\n            anchorMode: sinceDttm === 'now' ? 'now' : 'specific' },\n\n          matchedFlag: true };\n\n      }\n    }\n  }\n  return {\n    customRange: defaultCustomRange,\n    matchedFlag: false };\n\n};\nexport const customTimeRangeEncode = (customRange) => {\n  const { sinceDatetime, sinceMode, sinceGrain, sinceGrainValue, untilDatetime, untilMode, untilGrain, untilGrainValue, anchorValue } = { ...customRange };\n  // specific : specific\n  if (SPECIFIC_MODE.includes(sinceMode) && SPECIFIC_MODE.includes(untilMode)) {\n    const since = sinceMode === 'specific' ? dttmToString(sinceDatetime) : sinceMode;\n    const until = untilMode === 'specific' ? dttmToString(untilDatetime) : untilMode;\n    return `${since} : ${until}`;\n  }\n  // specific : relative\n  if (SPECIFIC_MODE.includes(sinceMode) && untilMode === 'relative') {\n    const since = sinceMode === 'specific' ? dttmToString(sinceDatetime) : sinceMode;\n    const until = `DATEADD(DATETIME(\"${since}\"), ${untilGrainValue}, ${untilGrain})`;\n    return `${since} : ${until}`;\n  }\n  // relative : specific\n  if (sinceMode === 'relative' && SPECIFIC_MODE.includes(untilMode)) {\n    const until = untilMode === 'specific' ? dttmToString(untilDatetime) : untilMode;\n    const since = `DATEADD(DATETIME(\"${until}\"), ${-Math.abs(sinceGrainValue)}, ${sinceGrain})`;\n    return `${since} : ${until}`;\n  }\n  // relative : relative\n  const since = `DATEADD(DATETIME(\"${anchorValue}\"), ${-Math.abs(sinceGrainValue)}, ${sinceGrain})`;\n  const until = `DATEADD(DATETIME(\"${anchorValue}\"), ${untilGrainValue}, ${untilGrain})`;\n  return `${since} : ${until}`;\n};","map":null,"metadata":{},"sourceType":"module"}