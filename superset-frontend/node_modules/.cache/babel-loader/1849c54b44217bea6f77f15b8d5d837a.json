{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\nimport { SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL, setDataMaskForFilterConfigComplete } from 'src/dataMask/actions';\nimport { dashboardInfoChanged } from './dashboardInfo';\nexport const SET_FILTER_CONFIG_BEGIN = 'SET_FILTER_CONFIG_BEGIN';\nexport const SET_FILTER_CONFIG_COMPLETE = 'SET_FILTER_CONFIG_COMPLETE';\nexport const SET_FILTER_CONFIG_FAIL = 'SET_FILTER_CONFIG_FAIL';\nexport const SET_IN_SCOPE_STATUS_OF_FILTERS = 'SET_IN_SCOPE_STATUS_OF_FILTERS';\nexport const SET_FILTER_SETS_CONFIG_BEGIN = 'SET_FILTER_SETS_CONFIG_BEGIN';\nexport const SET_FILTER_SETS_CONFIG_COMPLETE = 'SET_FILTER_SETS_CONFIG_COMPLETE';\nexport const SET_FILTER_SETS_CONFIG_FAIL = 'SET_FILTER_SETS_CONFIG_FAIL';\nexport const setFilterConfiguration = (filterConfig) => async (dispatch, getState) => {var _getState$nativeFilte;\n  dispatch({\n    type: SET_FILTER_CONFIG_BEGIN,\n    filterConfig });\n\n  const { id, metadata } = getState().dashboardInfo;\n  const oldFilters = (_getState$nativeFilte = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte.filters;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  const mergedFilterConfig = filterConfig.map((filter) => {\n    const oldFilter = oldFilters[filter.id];\n    if (!oldFilter) {\n      return filter;\n    }\n    return { ...oldFilter, ...filter };\n  });\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        native_filter_configuration: mergedFilterConfig }) });\n\n\n    dispatch(dashboardInfoChanged({\n      metadata: JSON.parse(response.result.json_metadata) }));\n\n    dispatch({\n      type: SET_FILTER_CONFIG_COMPLETE,\n      filterConfig: mergedFilterConfig });\n\n    dispatch(setDataMaskForFilterConfigComplete(mergedFilterConfig, oldFilters));\n  }\n  catch (err) {\n    dispatch({\n      type: SET_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig });\n\n    dispatch({\n      type: SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig });\n\n  }\n};\nexport const setInScopeStatusOfFilters = (filterScopes) => async (dispatch, getState) => {var _getState$nativeFilte2;\n  const filters = (_getState$nativeFilte2 = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte2.filters;\n  const filtersWithScopes = filterScopes.map((scope) => ({\n    ...filters[scope.filterId],\n    chartsInScope: scope.chartsInScope,\n    tabsInScope: scope.tabsInScope }));\n\n  dispatch({\n    type: SET_IN_SCOPE_STATUS_OF_FILTERS,\n    filterConfig: filtersWithScopes });\n\n};\nexport const setFilterSetsConfiguration = (filterSetsConfig) => async (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER_SETS_CONFIG_BEGIN,\n    filterSetsConfig });\n\n  const { id, metadata } = getState().dashboardInfo;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        filter_sets_configuration: filterSetsConfig }) });\n\n\n    const newMetadata = JSON.parse(response.result.json_metadata);\n    dispatch(dashboardInfoChanged({\n      metadata: newMetadata }));\n\n    dispatch({\n      type: SET_FILTER_SETS_CONFIG_COMPLETE,\n      filterSetsConfig: newMetadata == null ? void 0 : newMetadata.filter_sets_configuration });\n\n  }\n  catch (err) {\n    dispatch({ type: SET_FILTER_SETS_CONFIG_FAIL, filterSetsConfig });\n  }\n};\nexport const SAVE_FILTER_SETS = 'SAVE_FILTER_SETS';\nexport function saveFilterSets(name, filtersSetId, dataMask) {\n  return {\n    type: SAVE_FILTER_SETS,\n    name,\n    filtersSetId,\n    dataMask };\n\n}\nexport const SET_FOCUSED_NATIVE_FILTER = 'SET_FOCUSED_NATIVE_FILTER';\nexport const UNSET_FOCUSED_NATIVE_FILTER = 'UNSET_FOCUSED_NATIVE_FILTER';\nexport function setFocusedNativeFilter(id) {\n  return {\n    type: SET_FOCUSED_NATIVE_FILTER,\n    id };\n\n}\nexport function unsetFocusedNativeFilter() {\n  return {\n    type: UNSET_FOCUSED_NATIVE_FILTER };\n\n}","map":null,"metadata":{},"sourceType":"module"}