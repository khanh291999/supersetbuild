{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport Loading from 'src/components/Loading';\nimport { CopyButton } from 'src/explore/components/DataTableControl';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport markdownSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/markdown';\nimport htmlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/htmlbars';\nimport sqlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport jsonSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/json';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CopyButtonViewQuery = styled(CopyButton)`\n  && {\n    margin: 0 0 ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nSyntaxHighlighter.registerLanguage('markdown', markdownSyntax);\nSyntaxHighlighter.registerLanguage('html', htmlSyntax);\nSyntaxHighlighter.registerLanguage('sql', sqlSyntax);\nSyntaxHighlighter.registerLanguage('json', jsonSyntax);\nconst StyledSyntaxContainer = styled.div`\n  height: 100%;\n`;\nconst StyledSyntaxHighlighter = styled(SyntaxHighlighter)`\n  height: calc(100% - 26px); // 100% - clipboard height\n`;\nconst ViewQueryModal = (props) => {\n  const [result, setResult] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const loadChartData = (resultType) => {\n    setIsLoading(true);\n    getChartDataRequest({\n      formData: props.latestQueryFormData,\n      resultFormat: 'json',\n      resultType }).\n\n    then(({ json }) => {\n      setResult(ensureIsArray(json.result));\n      setIsLoading(false);\n      setError(null);\n    }).\n    catch((response) => {\n      getClientErrorObject(response).then(({ error, message }) => {\n        setError(error ||\n        message ||\n        response.statusText ||\n        t('Sorry, An error occurred'));\n        setIsLoading(false);\n      });\n    });\n  };\n  useEffect(() => {\n    loadChartData('query');\n  }, [JSON.stringify(props.latestQueryFormData)]);\n  if (isLoading) {\n    return ___EmotionJSX(Loading, null);\n  }\n  if (error) {\n    return ___EmotionJSX(\"pre\", null, error);\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  result.map((item) => item.query ? ___EmotionJSX(StyledSyntaxContainer, { key: item.query },\n  ___EmotionJSX(CopyToClipboard, { text: item.query, shouldShowText: false, copyNode: ___EmotionJSX(CopyButtonViewQuery, { buttonSize: \"xsmall\" },\n    ___EmotionJSX(\"i\", { className: \"fa fa-clipboard\" })) }),\n\n  ___EmotionJSX(StyledSyntaxHighlighter, { language: item.language || undefined, style: github },\n  item.query)) :\n\n  null));\n\n};\nexport default ViewQueryModal;","map":null,"metadata":{},"sourceType":"module"}