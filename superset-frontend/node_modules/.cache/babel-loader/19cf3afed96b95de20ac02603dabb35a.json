{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport Icons from 'src/components/Icons';\nimport Button from 'src/components/Button';\nimport { useSelector } from 'react-redux';\nimport FilterConfigurationLink from 'src/dashboard/components/nativeFilters/FilterBar/FilterConfigurationLink';\nimport { useFilters } from 'src/dashboard/components/nativeFilters/FilterBar/state';\nimport { getFilterBarTestId } from '..';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TitleArea = styled.h4`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin: 0;\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > span {\n    flex-grow: 1;\n  }\n`;\nconst ActionButtons = styled.div`\n  display: grid;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 10px;\n  grid-template-columns: 1fr 1fr;\n  ${({ theme }) => `padding: 0 ${theme.gridUnit * 2}px`};\n\n  .btn {\n    flex: 1;\n  }\n`;\nconst HeaderButton = styled(Button)`\n  padding: 0;\n`;\nconst Wrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit}px\n    ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst Header = ({ onApply, onClearAll, isApplyDisabled, dataMaskSelected, dataMaskApplied, toggleFiltersBar }) => {\n  const theme = useTheme();\n  const filters = useFilters();\n  const filterValues = Object.values(filters);\n  const canEdit = useSelector(({ dashboardInfo }) => dashboardInfo.dash_edit_perm);\n  const isClearAllDisabled = Object.values(dataMaskApplied).every((filter) => {var _dataMaskSelected$fil, _dataMaskSelected$fil2, _filter$filterState;return ((_dataMaskSelected$fil = dataMaskSelected[filter.id]) == null ? void 0 : (_dataMaskSelected$fil2 = _dataMaskSelected$fil.filterState) == null ? void 0 : _dataMaskSelected$fil2.value) === null ||\n    !dataMaskSelected[filter.id] && ((_filter$filterState = filter.filterState) == null ? void 0 : _filter$filterState.value) === null;});\n  return ___EmotionJSX(Wrapper, null,\n  ___EmotionJSX(TitleArea, null,\n  ___EmotionJSX(\"span\", null, t('Filters')),\n  canEdit && ___EmotionJSX(FilterConfigurationLink, { createNewOnOpen: filterValues.length === 0 },\n  ___EmotionJSX(Icons.Edit, { iconColor: theme.colors.grayscale.base })),\n\n  ___EmotionJSX(HeaderButton, _extends({}, getFilterBarTestId('collapse-button'), { buttonStyle: \"link\", buttonSize: \"xsmall\", onClick: () => toggleFiltersBar(false) }),\n  ___EmotionJSX(Icons.Expand, { iconColor: theme.colors.grayscale.base }))),\n\n\n  ___EmotionJSX(ActionButtons, null,\n  ___EmotionJSX(Button, _extends({ disabled: isClearAllDisabled, buttonStyle: \"tertiary\", buttonSize: \"small\", onClick: onClearAll }, getFilterBarTestId('clear-button')),\n  t('Clear all')),\n\n  ___EmotionJSX(Button, _extends({ disabled: isApplyDisabled, buttonStyle: \"primary\", htmlType: \"submit\", buttonSize: \"small\", onClick: onApply }, getFilterBarTestId('apply-button')),\n  t('Apply'))));\n\n\n\n};\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}