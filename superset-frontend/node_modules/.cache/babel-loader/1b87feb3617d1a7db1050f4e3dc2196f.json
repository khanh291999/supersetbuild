{"ast":null,"code":"import { getExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport { areObjectsEqual } from 'src/reduxUtils';\nimport getEffectiveExtraFilters from './getEffectiveExtraFilters';\nimport { getAllActiveFilters } from '../activeAllDashboardFilters';\n// We cache formData objects so that our connected container components don't always trigger\n// render cascades. we cannot leverage the reselect library because our cache size is >1\nconst cachedFiltersByChart = {};\nconst cachedFormdataByChart = {};\n// this function merge chart's formData with dashboard filters value,\n// and generate a new formData which will be used in the new query.\n// filters param only contains those applicable to this chart.\nexport default function getFormDataWithExtraFilters({ chart, charts, filters, nativeFilters, chartConfiguration, colorScheme, colorNamespace, sliceId, layout, dataMask, labelColors }) {\n  // if dashboard metadata + filters have not changed, use cache if possible\n  const cachedFormData = cachedFormdataByChart[sliceId];\n  if (cachedFiltersByChart[sliceId] === filters &&\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.color_scheme, colorScheme, {\n    ignoreUndefined: true }) &&\n\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.color_namespace, colorNamespace, {\n    ignoreUndefined: true }) &&\n\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.label_colors, labelColors, {\n    ignoreUndefined: true }) &&\n\n  !!cachedFormData &&\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.dataMask, dataMask, {\n    ignoreUndefined: true }))\n  {\n    return cachedFormData;\n  }\n  let extraData = {};\n  const activeFilters = getAllActiveFilters({\n    chartConfiguration,\n    dataMask,\n    layout,\n    nativeFilters: nativeFilters.filters });\n\n  const filterIdsAppliedOnChart = Object.entries(activeFilters).\n  filter(([, { scope }]) => scope.includes(chart.id)).\n  map(([filterId]) => filterId);\n  if (filterIdsAppliedOnChart.length) {\n    extraData = {\n      extra_form_data: getExtraFormData(dataMask, charts, filterIdsAppliedOnChart) };\n\n  }\n  const formData = {\n    ...chart.formData,\n    label_colors: labelColors,\n    ...(colorScheme && { color_scheme: colorScheme }),\n    extra_filters: getEffectiveExtraFilters(filters),\n    ...extraData };\n\n  cachedFiltersByChart[sliceId] = filters;\n  cachedFormdataByChart[sliceId] = { ...formData, dataMask };\n  return formData;\n}","map":null,"metadata":{},"sourceType":"module"}