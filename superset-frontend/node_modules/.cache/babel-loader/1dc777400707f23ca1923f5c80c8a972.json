{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useCallback, useReducer } from 'react';\nimport { t } from '@superset-ui/core';\nimport { bindActionCreators } from 'redux';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { addReport, editReport } from 'src/reports/actions/reports';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport LabeledErrorBoundInput from 'src/components/Form/LabeledErrorBoundInput';\nimport Icons from 'src/components/Icons';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { StyledModal, StyledTopSection, StyledBottomSection, StyledIconWrapper, StyledScheduleTitle, StyledCronPicker, StyledCronError, noBottomMargin, StyledFooterButton, TimezoneHeaderStyle, SectionHeaderStyle, StyledMessageContentTitle, StyledRadio, StyledRadioGroup } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar ActionType;\n(function (ActionType) {\n  ActionType[ActionType[\"inputChange\"] = 0] = \"inputChange\";\n  ActionType[ActionType[\"fetched\"] = 1] = \"fetched\";\n  ActionType[ActionType[\"reset\"] = 2] = \"reset\";\n})(ActionType || (ActionType = {}));\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n'pivot_table',\n'pivot_table_v2',\n'table',\n'paired_ttest'];\n\nconst NOTIFICATION_FORMATS = {\n  TEXT: 'TEXT',\n  PNG: 'PNG',\n  CSV: 'CSV' };\n\nconst reportReducer = (state, action) => {\n  const initialState = {\n    name: 'Weekly Report' };\n\n  switch (action.type) {\n    case ActionType.inputChange:\n      return {\n        ...initialState,\n        ...state,\n        [action.payload.name]: action.payload.value };\n\n    case ActionType.fetched:\n      return {\n        ...initialState,\n        ...action.payload };\n\n    case ActionType.reset:\n      return { ...initialState };\n    default:\n      return state;}\n\n};\nconst ReportModal = ({ onReportAdd, onHide, show = false, ...props }) => {var _props$props$chart, _props$props$chart$sl;\n  const vizType = (_props$props$chart = props.props.chart) == null ? void 0 : (_props$props$chart$sl = _props$props$chart.sliceFormData) == null ? void 0 : _props$props$chart$sl.viz_type;\n  const isChart = !!props.props.chart;\n  const defaultNotificationFormat = isChart && TEXT_BASED_VISUALIZATION_TYPES.includes(vizType) ?\n  NOTIFICATION_FORMATS.TEXT :\n  NOTIFICATION_FORMATS.PNG;\n  const [currentReport, setCurrentReport] = useReducer(reportReducer, null);\n  const onChange = useCallback((type, payload) => {\n    setCurrentReport({ type, payload });\n  }, []);\n  const [error, setError] = useState();\n  // const [isLoading, setLoading] = useState<boolean>(false);\n  const dispatch = useDispatch();\n  // Report fetch logic\n  const reports = useSelector((state) => state.reports);\n  const isEditMode = reports && Object.keys(reports).length;\n  useEffect(() => {\n    if (isEditMode) {\n      const reportsIds = Object.keys(reports);\n      const report = reports[reportsIds[0]];\n      setCurrentReport({\n        type: ActionType.fetched,\n        payload: report });\n\n    } else\n    {\n      setCurrentReport({\n        type: ActionType.reset });\n\n    }\n  }, [reports]);\n  const onClose = () => {\n    onHide();\n  };\n  const onSave = async () => {var _props$props$chart2;\n    // Create new Report\n    const newReportValues = {\n      crontab: currentReport == null ? void 0 : currentReport.crontab,\n      dashboard: props.props.dashboardId,\n      chart: (_props$props$chart2 = props.props.chart) == null ? void 0 : _props$props$chart2.id,\n      description: currentReport == null ? void 0 : currentReport.description,\n      name: currentReport == null ? void 0 : currentReport.name,\n      owners: [props.props.userId],\n      recipients: [\n      {\n        recipient_config_json: { target: props.props.userEmail },\n        type: 'Email' }],\n\n\n      type: 'Report',\n      creation_method: props.props.creationMethod,\n      active: true,\n      report_format: (currentReport == null ? void 0 : currentReport.report_format) || defaultNotificationFormat,\n      timezone: currentReport == null ? void 0 : currentReport.timezone };\n\n    if (isEditMode) {\n      await dispatch(editReport(currentReport == null ? void 0 : currentReport.id, newReportValues));\n    } else\n    {\n      await dispatch(addReport(newReportValues));\n    }\n    if (onReportAdd) {\n      onReportAdd();\n    }\n    onClose();\n  };\n  const wrappedTitle = ___EmotionJSX(StyledIconWrapper, null,\n  ___EmotionJSX(Icons.Calendar, null),\n  ___EmotionJSX(\"span\", { className: \"text\" },\n  isEditMode ? t('Edit Email Report') : t('New Email Report')));\n\n\n  const renderModalFooter = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: onClose },\n  t('Cancel')),\n\n  ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, disabled: !(currentReport != null && currentReport.name) },\n  isEditMode ? t('Save') : t('Add')));\n\n\n  const renderMessageContentSection = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledMessageContentTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Message Content'))),\n\n  ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledRadioGroup, { onChange: (event) => {\n      onChange(ActionType.inputChange, {\n        name: 'report_format',\n        value: event.target.value });\n\n    }, value: (currentReport == null ? void 0 : currentReport.report_format) || defaultNotificationFormat },\n  TEXT_BASED_VISUALIZATION_TYPES.includes(vizType) && ___EmotionJSX(StyledRadio, { value: NOTIFICATION_FORMATS.TEXT },\n  t('Text embedded in email')),\n\n  ___EmotionJSX(StyledRadio, { value: NOTIFICATION_FORMATS.PNG },\n  t('Image (PNG) embedded in email')),\n\n  ___EmotionJSX(StyledRadio, { value: NOTIFICATION_FORMATS.CSV },\n  t('Formatted CSV attached in email')))));\n\n\n\n\n  return ___EmotionJSX(StyledModal, { show: show, onHide: onClose, title: wrappedTitle, footer: renderModalFooter, width: \"432\", centered: true },\n  ___EmotionJSX(StyledTopSection, null,\n  ___EmotionJSX(LabeledErrorBoundInput, { id: \"name\", name: \"name\", value: (currentReport == null ? void 0 : currentReport.name) || '', placeholder: \"Weekly Report\", required: true, validationMethods: {\n      onChange: ({ target }) => onChange(ActionType.inputChange, {\n        name: target.name,\n        value: target.value }) },\n\n    errorMessage: (currentReport == null ? void 0 : currentReport.name) === 'error' ? t('REPORT NAME ERROR') : '', label: \"Report Name\" }),\n\n  ___EmotionJSX(LabeledErrorBoundInput, { id: \"description\", name: \"description\", value: (currentReport == null ? void 0 : currentReport.description) || '', validationMethods: {\n      onChange: ({ target }) => onChange(ActionType.inputChange, {\n        name: target.name,\n        value: target.value }) },\n\n    errorMessage: (currentReport == null ? void 0 : currentReport.description) === 'error' ? t('DESCRIPTION ERROR') : '', label: \"Description\", placeholder: \"Include a description that will be sent with your report\", css: noBottomMargin })),\n\n\n  ___EmotionJSX(StyledBottomSection, null,\n  ___EmotionJSX(StyledScheduleTitle, null,\n  ___EmotionJSX(\"h4\", { css: (theme) => SectionHeaderStyle(theme) },\n  t('Schedule')),\n\n  ___EmotionJSX(\"p\", null, t('Scheduled reports will be sent to your email as a PNG'))),\n\n\n  ___EmotionJSX(StyledCronPicker, { clearButton: false, value: (currentReport == null ? void 0 : currentReport.crontab) || '0 12 * * 1', setValue: (newValue) => {\n      onChange(ActionType.inputChange, {\n        name: 'crontab',\n        value: newValue });\n\n    }, onError: setError }),\n  ___EmotionJSX(StyledCronError, null, error),\n  ___EmotionJSX(\"div\", { className: \"control-label\", css: (theme) => TimezoneHeaderStyle(theme) },\n  t('Timezone')),\n\n  ___EmotionJSX(TimezoneSelector, { onTimezoneChange: (value) => {\n      setCurrentReport({\n        type: ActionType.inputChange,\n        payload: { name: 'timezone', value } });\n\n    }, timezone: currentReport == null ? void 0 : currentReport.timezone }),\n  isChart && renderMessageContentSection));\n\n\n};\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ addReport, editReport }, dispatch);\nexport default connect(null, mapDispatchToProps)(withToasts(ReportModal));","map":null,"metadata":{},"sourceType":"module"}