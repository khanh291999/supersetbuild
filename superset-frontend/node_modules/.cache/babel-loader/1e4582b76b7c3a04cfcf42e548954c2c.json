{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from 'src/components/Alert';\nimport { t } from '@superset-ui/core';\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { EmptyWrapperType } from 'src/components/TableView/TableView';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dbId: PropTypes.number.isRequired,\n  schema: PropTypes.string.isRequired,\n  sql: PropTypes.string.isRequired,\n  getEstimate: PropTypes.func.isRequired,\n  queryCostEstimate: PropTypes.Object,\n  selectedText: PropTypes.string,\n  tooltip: PropTypes.string,\n  disabled: PropTypes.bool };\n\nconst defaultProps = {\n  queryCostEstimate: [],\n  tooltip: '',\n  disabled: false };\n\n\nconst EstimateQueryCostButton = (props) => {\n  const { cost } = props.queryCostEstimate;\n  const tableData = useMemo(() => Array.isArray(cost) ? cost : [], [cost]);\n  const columns = useMemo(\n  () =>\n  Array.isArray(cost) && cost.length ?\n  Object.keys(cost[0]).map((key) => ({ accessor: key, Header: key })) :\n  [],\n  [cost]);\n\n\n  const onClick = () => {\n    props.getEstimate();\n  };\n\n  const renderModalBody = () => {\n    if (props.queryCostEstimate.error !== null) {\n      return (\n        ___EmotionJSX(Alert, {\n          key: \"query-estimate-error\",\n          type: \"error\",\n          message: props.queryCostEstimate.error }));\n\n\n    }\n    if (props.queryCostEstimate.completed) {\n      return (\n        ___EmotionJSX(TableView, {\n          columns: columns,\n          data: tableData,\n          withPagination: false,\n          emptyWrapperType: EmptyWrapperType.Small,\n          className: \"cost-estimate\" }));\n\n\n    }\n    return ___EmotionJSX(Loading, { position: \"normal\" });\n  };\n\n  const { disabled, selectedText, tooltip } = props;\n  const btnText = selectedText ?\n  t('Estimate selected query cost') :\n  t('Estimate cost');\n  return (\n    ___EmotionJSX(\"span\", { className: \"EstimateQueryCostButton\" },\n    ___EmotionJSX(ModalTrigger, {\n      modalTitle: t('Cost estimate'),\n      modalBody: renderModalBody(),\n      triggerNode:\n      ___EmotionJSX(Button, {\n        style: { height: 32, padding: '4px 15px' },\n        onClick: onClick,\n        key: \"query-estimate-btn\",\n        tooltip: tooltip,\n        disabled: disabled },\n\n      btnText) })));\n\n\n\n\n\n};\n\nEstimateQueryCostButton.propTypes = propTypes;\nEstimateQueryCostButton.defaultProps = defaultProps;\n\nexport default EstimateQueryCostButton;","map":null,"metadata":{},"sourceType":"module"}