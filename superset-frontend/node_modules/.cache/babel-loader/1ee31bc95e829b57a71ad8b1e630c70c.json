{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react';\nimport { ensureIsArray, SupersetClient, t } from '@superset-ui/core';\nimport { useChangeEffect } from 'src/common/hooks/useChangeEffect';\nimport { Select } from 'src/components';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { cacheWrapper } from 'src/utils/cacheWrapper';\nimport { doesColumnMatchFilterType } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst localCache = new Map();\nconst cachedSupersetGet = cacheWrapper(SupersetClient.get, localCache, ({ endpoint }) => endpoint || '');\n/** Special purpose AsyncSelect that selects a column from a dataset */\n// eslint-disable-next-line import/prefer-default-export\nexport function ColumnSelect({ allowClear = false, filterValues = () => true, form, formField = 'column', filterId, datasetId, value, onChange, mode }) {var _form$getFieldValue;\n  const [columns, setColumns] = useState();\n  const { addDangerToast } = useToasts();\n  const resetColumnField = useCallback(() => {\n    form.setFields([\n    { name: ['filters', filterId, formField], touched: false, value: null }]);\n\n  }, [form, filterId, formField]);\n  const options = useMemo(() => ensureIsArray(columns).\n  filter(filterValues).\n  map((col) => col.column_name).\n  sort((a, b) => a.localeCompare(b)).\n  map((column) => ({ label: column, value: column })), [columns, filterValues]);\n  const currentFilterType = (_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId].\n  filterType;\n  const currentColumn = useMemo(() => columns == null ? void 0 : columns.find((column) => column.column_name === value), [columns, value]);\n  useEffect(() => {\n    if (currentColumn &&\n    !doesColumnMatchFilterType(currentFilterType, currentColumn)) {\n      resetColumnField();\n    }\n  }, [currentColumn, currentFilterType, resetColumnField]);\n  useChangeEffect(datasetId, (previous) => {\n    if (previous != null) {\n      resetColumnField();\n    }\n    if (datasetId != null) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}` }).\n      then(({ json: { result } }) => {\n        const lookupValue = Array.isArray(value) ? value : [value];\n        const valueExists = result.columns.some((column) => lookupValue == null ? void 0 : lookupValue.includes(column.column_name));\n        if (!valueExists) {\n          resetColumnField();\n        }\n        setColumns(result.columns);\n      }, async (badResponse) => {\n        const { error, message } = await getClientErrorObject(badResponse);\n        let errorText = message || error || t('An error has occurred');\n        if (message === 'Forbidden') {\n          errorText = t('You do not have permission to edit this dashboard');\n        }\n        addDangerToast(errorText);\n      });\n    }\n  });\n  return ___EmotionJSX(Select, { mode: mode, value: mode === 'multiple' ? value || [] : value, ariaLabel: t('Column select'), onChange: onChange, options: options, placeholder: t('Select a column'), notFoundContent: t('No compatible columns found'), showSearch: true, allowClear: allowClear });\n}","map":null,"metadata":{},"sourceType":"module"}