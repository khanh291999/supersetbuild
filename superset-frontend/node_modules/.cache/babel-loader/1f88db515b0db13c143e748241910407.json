{"ast":null,"code":"import _flatMapDeep from \"lodash/flatMapDeep\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React from 'react';\nimport { ensureIsArray, GenericDataType } from '@superset-ui/core';\nconst FILTERS_FIELD_NAME = 'filters';\nexport const FILTER_SUPPORTED_TYPES = {\n  filter_time: [GenericDataType.TEMPORAL],\n  filter_timegrain: [GenericDataType.TEMPORAL],\n  filter_timecolumn: [GenericDataType.TEMPORAL],\n  filter_select: [\n  GenericDataType.BOOLEAN,\n  GenericDataType.STRING,\n  GenericDataType.NUMERIC,\n  GenericDataType.TEMPORAL],\n\n  filter_range: [GenericDataType.NUMERIC] };\n\nexport const useForceUpdate = () => {\n  const [, updateState] = React.useState({});\n  return React.useCallback(() => updateState({}), []);\n};\nexport const setNativeFilterFieldValues = (form, filterId, values) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n  {\n    name: FILTERS_FIELD_NAME,\n    value: {\n      ...formFilters,\n      [filterId]: {\n        ...formFilters[filterId],\n        ...values } } }]);\n\n\n\n\n};\nexport const getControlItems = (controlConfig = {}) => {var _flatMapDeep$reduce, _flatMapDeep2;return (_flatMapDeep$reduce = (_flatMapDeep2 = _flatMapDeep(controlConfig.controlPanelSections)) == null ? void 0 : _flatMapDeep2.reduce((acc, { controlSetRows = [] }) => [\n  ...acc,\n  ..._flatMapDeep(controlSetRows)],\n  [])) != null ? _flatMapDeep$reduce : [];};\nexport const datasetToSelectOption = (item) => ({\n  value: item.id,\n  label: item.table_name });\n\n// TODO: add column_types field to DatasourceMeta\n// We return true if column_types is undefined or empty as a precaution against backend failing to return column_types\nexport const hasTemporalColumns = (dataset) => {\n  const columnTypes = ensureIsArray(dataset == null ? void 0 : dataset.column_types);\n  return columnTypes.length === 0 || columnTypes.includes(GenericDataType.TEMPORAL);\n};\nexport const doesColumnMatchFilterType = (filterType, column) => {var _FILTER_SUPPORTED_TYP;return !column.type_generic ||\n  !(filterType in FILTER_SUPPORTED_TYPES) || ((_FILTER_SUPPORTED_TYP =\n  FILTER_SUPPORTED_TYPES[filterType]) == null ? void 0 : _FILTER_SUPPORTED_TYP.includes(column.type_generic));};\nexport const mostUsedDataset = (datasets, charts) => {var _datasets$mostUsedDat;\n  const map = new Map();\n  let mostUsedDataset = '';\n  let maxCount = 0;\n  Object.values(charts).forEach((chart) => {\n    const { formData } = chart;\n    if (formData) {\n      const { datasource } = formData;\n      const count = (map.get(datasource) || 0) + 1;\n      map.set(datasource, count);\n      if (count > maxCount) {\n        maxCount = count;\n        mostUsedDataset = datasource;\n      }\n    }\n  });\n  return (_datasets$mostUsedDat = datasets[mostUsedDataset]) == null ? void 0 : _datasets$mostUsedDat.id;\n};","map":null,"metadata":{},"sourceType":"module"}