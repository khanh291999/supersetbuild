{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import { format as d3Format } from 'd3-format';\nimport NumberFormats from '../NumberFormats';\nimport createNumberFormatter from '../createNumberFormatter';\nconst siFormatter = d3Format(\".3~s\");\nconst float2PointFormatter = d3Format(\".2~f\");\nconst float4PointFormatter = d3Format(\".4~f\");\n\nfunction formatValue(value) {\n  if (value === 0) {\n    return '0';\n  }\n\n  const absoluteValue = Math.abs(value);\n\n  if (absoluteValue >= 1000) {\n    // Normal human being are more familiar\n    // with billion (B) that giga (G)\n    return siFormatter(value).replace('G', 'B');\n  }\n\n  if (absoluteValue >= 1) {\n    return float2PointFormatter(value);\n  }\n\n  if (absoluteValue >= 0.001) {\n    return float4PointFormatter(value);\n  }\n\n  if (absoluteValue > 0.000001) {\n    return siFormatter(value * 1000000) + \"\\xB5\";\n  }\n\n  return siFormatter(value);\n}\n\nconst BLANK = () => '';\n\nconst ADD_PLUS = (value) => value > 0 ? '+' : '';\n\nexport default function createSmartNumberFormatter({\n  signed = false,\n  id,\n  label,\n  description } =\n{}) {\n  const getSign = signed ? ADD_PLUS : BLANK;\n  return createNumberFormatter((value) => \"\" + getSign(value) + formatValue(value), {\n    id: (id != null ? id : signed) ? NumberFormats.signed.SMART_NUMBER : NumberFormats.SMART_NUMBER,\n    label: label != null ? label : 'Adaptive formatter',\n    description });\n\n}","map":null,"metadata":{},"sourceType":"module"}