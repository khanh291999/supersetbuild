{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { areArraysShallowEqual } from 'src/reduxUtils';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { SCHEMA_AUTOCOMPLETE_SCORE, TABLE_AUTOCOMPLETE_SCORE, COLUMN_AUTOCOMPLETE_SCORE, SQL_FUNCTIONS_AUTOCOMPLETE_SCORE } from 'src/SqlLab/constants';\nimport { FullSQLEditor as AceEditor } from 'src/components/AsyncAceEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nclass AceEditorWrapper extends React.PureComponent {\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sql: props.sql,\n      selectedText: '',\n      words: [] };\n\n    this.onChange = this.onChange.bind(this);\n  }\n  componentDidMount() {\n    // Making sure no text is selected from previous mount\n    this.props.actions.queryEditorSetSelectedText(this.props.queryEditor, null);\n    if (this.props.queryEditor.dbId) {\n      this.props.actions.queryEditorSetFunctionNames(this.props.queryEditor, this.props.queryEditor.dbId);\n    }\n    this.setAutoCompleter(this.props);\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!areArraysShallowEqual(this.props.tables, nextProps.tables) ||\n    !areArraysShallowEqual(this.props.schemas, nextProps.schemas) ||\n    !areArraysShallowEqual(this.props.extendedTables, nextProps.extendedTables)) {\n      this.setAutoCompleter(nextProps);\n    }\n    if (nextProps.sql !== this.props.sql) {\n      this.setState({ sql: nextProps.sql });\n    }\n  }\n  onBlur() {\n    this.props.onBlur(this.state.sql);\n  }\n  onAltEnter() {\n    this.props.onBlur(this.state.sql);\n  }\n  onEditorLoad(editor) {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        this.onAltEnter();\n      } });\n\n    this.props.hotkeys.forEach((keyConfig) => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func });\n\n    });\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n      // Backspace trigger 1 character selection, ignoring\n      if (selectedText !== this.state.selectedText &&\n      selectedText.length !== 1) {\n        this.setState({ selectedText });\n        this.props.actions.queryEditorSetSelectedText(this.props.queryEditor, selectedText);\n      }\n    });\n  }\n  onChange(text) {\n    this.setState({ sql: text });\n    this.props.onChange(text);\n  }\n  setAutoCompleter(props) {\n    // Loading schema, table and column names as auto-completable words\n    const schemas = props.schemas || [];\n    const schemaWords = schemas.map((s) => ({\n      name: s.label,\n      value: s.value,\n      score: SCHEMA_AUTOCOMPLETE_SCORE,\n      meta: 'schema' }));\n\n    const columns = {};\n    const tables = props.tables || [];\n    const extendedTables = props.extendedTables || [];\n    const tableWords = tables.map((t) => {\n      const tableName = t.value;\n      const extendedTable = extendedTables.find((et) => et.name === tableName);\n      const cols = extendedTable && extendedTable.columns || [];\n      cols.forEach((col) => {\n        columns[col.name] = null; // using an object as a unique set\n      });\n      return {\n        name: t.label,\n        value: tableName,\n        score: TABLE_AUTOCOMPLETE_SCORE,\n        meta: 'table' };\n\n    });\n    const columnWords = Object.keys(columns).map((col) => ({\n      name: col,\n      value: col,\n      score: COLUMN_AUTOCOMPLETE_SCORE,\n      meta: 'column' }));\n\n    const functionWords = props.functionNames.map((func) => ({\n      name: func,\n      value: func,\n      score: SQL_FUNCTIONS_AUTOCOMPLETE_SCORE,\n      meta: 'function' }));\n\n    const completer = {\n      insertMatch: (editor, data) => {\n        if (data.meta === 'table') {\n          this.props.actions.addTable(this.props.queryEditor, data.value, this.props.queryEditor.schema);\n        }\n        // executing https://github.com/thlorenz/brace/blob/3a00c5d59777f9d826841178e1eb36694177f5e6/ext/language_tools.js#L1448\n        editor.completer.insertMatch(`${data.caption}${['function', 'schema'].includes(data.meta) ? '' : ' '}`);\n      } };\n\n    const words = schemaWords.\n    concat(tableWords).\n    concat(columnWords).\n    concat(functionWords).\n    concat(sqlKeywords).\n    map((word) => ({\n      ...word,\n      completer }));\n\n    this.setState({ words });\n  }\n  getAceAnnotations() {var _validationResult$err;\n    const { validationResult } = this.props.queryEditor;\n    const resultIsReady = validationResult == null ? void 0 : validationResult.completed;\n    if (resultIsReady && validationResult != null && (_validationResult$err = validationResult.errors) != null && _validationResult$err.length) {\n      const errors = validationResult.errors.map((err) => ({\n        type: 'error',\n        row: err.line_number - 1,\n        column: err.start_column - 1,\n        text: err.message }));\n\n      return errors;\n    }\n    return [];\n  }\n  render() {\n    return ___EmotionJSX(AceEditor, { keywords: this.state.words, onLoad: this.onEditorLoad.bind(this), onBlur: this.onBlur.bind(this), height: this.props.height, onChange: this.onChange, width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: this.props.autocomplete, value: this.state.sql, annotations: this.getAceAnnotations() });\n  }}AceEditorWrapper.defaultProps = { onBlur: () => {}, onChange: () => {}, schemas: [], tables: [], functionNames: [], extendedTables: [] };\n\nexport default AceEditorWrapper;","map":null,"metadata":{},"sourceType":"module"}