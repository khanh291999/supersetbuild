{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useRef } from 'react';\nimport { t } from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport { useDashboard, useDashboardCharts, useDashboardDatasets } from 'src/common/hooks/apiResources';\nimport { hydrateDashboard } from 'src/dashboard/actions/hydrate';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport setupPlugins from 'src/setup/setupPlugins';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nsetupPlugins();\nconst DashboardContainer = /*#__PURE__*/React.lazy(() => import(\n/* webpackChunkName: \"DashboardContainer\" */\n/* webpackPreload: true */\n'src/dashboard/containers/Dashboard'));\nconst originalDocumentTitle = document.title;\nconst DashboardPage = () => {\n  const dispatch = useDispatch();\n  const { addDangerToast } = useToasts();\n  const { idOrSlug } = useParams();\n  const { result: dashboard, error: dashboardApiError } = useDashboard(idOrSlug);\n  const { result: charts, error: chartsApiError } = useDashboardCharts(idOrSlug);\n  const { result: datasets, error: datasetsApiError } = useDashboardDatasets(idOrSlug);\n  const isDashboardHydrated = useRef(false);\n  const error = dashboardApiError || chartsApiError;\n  const readyToRender = Boolean(dashboard && charts);\n  const { dashboard_title, css } = dashboard || {};\n  if (readyToRender && !isDashboardHydrated.current) {\n    isDashboardHydrated.current = true;\n    dispatch(hydrateDashboard(dashboard, charts));\n  }\n  useEffect(() => {\n    if (dashboard_title) {\n      document.title = dashboard_title;\n    }\n    return () => {\n      document.title = originalDocumentTitle;\n    };\n  }, [dashboard_title]);\n  useEffect(() => {\n    if (css) {\n      // returning will clean up custom css\n      // when dashboard unmounts or changes\n      return injectCustomCss(css);\n    }\n    return () => {};\n  }, [css]);\n  useEffect(() => {\n    if (datasetsApiError) {\n      addDangerToast(t('Error loading chart datasources. Filters may not work correctly.'));\n    } else\n    {\n      dispatch(setDatasources(datasets));\n    }\n  }, [addDangerToast, datasets, datasetsApiError, dispatch]);\n  if (error)\n  throw error; // caught in error boundary\n  if (!readyToRender)\n  return ___EmotionJSX(Loading, null);\n  return ___EmotionJSX(DashboardContainer, null);\n};\nexport default DashboardPage;","map":null,"metadata":{},"sourceType":"module"}