{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState } from 'react';\nimport { Tree } from 'src/common/components';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { useFilterScopeTree } from './state';\nimport { findFilterScope, getTreeCheckedItems } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst buildTreeLeafTitle = (label, hasTooltip, tooltipTitle) => {\n  let title = ___EmotionJSX(\"span\", null, label);\n  if (hasTooltip) {\n    title = ___EmotionJSX(React.Fragment, null,\n    title, \"\\xA0\",\n    ___EmotionJSX(Tooltip, { title: tooltipTitle },\n    ___EmotionJSX(Icons.Info, { iconSize: \"m\" })));\n\n\n  }\n  return title;\n};\nconst ScopingTree = ({ formScope, initialScope, forceUpdate, updateFormValues, chartId, initiallyExcludedCharts = [] }) => {\n  const [expandedKeys, setExpandedKeys] = useState([\n  DASHBOARD_ROOT_ID]);\n\n  const { treeData, layout } = useFilterScopeTree(chartId, initiallyExcludedCharts, buildTreeLeafTitle);\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n  const handleExpand = (expandedKeys) => {\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n  const handleCheck = (checkedKeys) => {\n    forceUpdate();\n    const scope = findFilterScope(checkedKeys, layout);\n    if (chartId !== undefined) {\n      scope.excluded = [...new Set([...scope.excluded, chartId])];\n    }\n    updateFormValues({\n      scope });\n\n  };\n  const checkedKeys = useMemo(() => getTreeCheckedItems({ ...(formScope || initialScope) }, layout), [formScope, initialScope, layout]);\n  return ___EmotionJSX(Tree, { checkable: true, selectable: false, onExpand: handleExpand, expandedKeys: expandedKeys, autoExpandParent: autoExpandParent, onCheck: handleCheck, checkedKeys: checkedKeys, treeData: treeData });\n};\nexport default ScopingTree;","map":null,"metadata":{},"sourceType":"module"}