{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\nimport { Dropdown, Menu } from 'src/common/components';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport ViewQueryModal from '../controls/ViewQueryModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  onOpenPropertiesModal: PropTypes.func,\n  onOpenInEditor: PropTypes.func,\n  chartStatus: PropTypes.string,\n  latestQueryFormData: PropTypes.object.isRequired,\n  slice: PropTypes.object };\n\n\nconst MENU_KEYS = {\n  EDIT_PROPERTIES: 'edit_properties',\n  RUN_IN_SQL_LAB: 'run_in_sql_lab',\n  DOWNLOAD_AS_IMAGE: 'download_as_image',\n  VIEW_QUERY: 'view_query' };\n\n\nconst ExploreAdditionalActionsMenu = (props) => {\n  const { datasource } = props.latestQueryFormData;\n  const sqlSupported = datasource && datasource.split('__')[1] === 'table';\n  const handleMenuClick = ({ key, domEvent }) => {var _slice$slice_name;\n    const { slice, onOpenInEditor, latestQueryFormData } = props;\n    switch (key) {\n      case MENU_KEYS.EDIT_PROPERTIES:\n        props.onOpenPropertiesModal();\n        break;\n      case MENU_KEYS.RUN_IN_SQL_LAB:\n        onOpenInEditor(latestQueryFormData);\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:\n        downloadAsImage(\n        '.panel-body > .chart-container',\n        // eslint-disable-next-line camelcase\n        (_slice$slice_name = slice == null ? void 0 : slice.slice_name) != null ? _slice$slice_name : t('New chart'),\n        {},\n        true)(\n        domEvent);\n        break;\n      default:\n        break;}\n\n  };\n\n  const { slice } = props;\n  return (\n    ___EmotionJSX(Dropdown, {\n      trigger: \"click\",\n\n      overlay:\n      ___EmotionJSX(Menu, { onClick: handleMenuClick, selectable: false },\n      slice &&\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_PROPERTIES },\n      t('Edit properties')),\n\n\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.VIEW_QUERY },\n      ___EmotionJSX(ModalTrigger, {\n        triggerNode:\n        ___EmotionJSX(\"span\", null, t('View query')),\n\n        modalTitle: t('View query'),\n        modalBody:\n        ___EmotionJSX(ViewQueryModal, {\n          latestQueryFormData: props.latestQueryFormData }),\n\n\n        draggable: true,\n        resizable: true,\n        responsive: true })),\n\n\n      sqlSupported &&\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.RUN_IN_SQL_LAB },\n      t('Run in SQL Lab')),\n\n\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.DOWNLOAD_AS_IMAGE },\n      t('Download as image'))) },\n\n\n\n\n    ___EmotionJSX(\"div\", {\n      role: \"button\",\n      id: \"query\",\n      tabIndex: 0,\n      className: \"btn btn-default btn-sm\" },\n\n    ___EmotionJSX(\"i\", { role: \"img\", className: \"fa fa-bars\" }))));\n\n\n\n};\n\nExploreAdditionalActionsMenu.propTypes = propTypes;\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ sliceUpdated }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(ExploreAdditionalActionsMenu);","map":null,"metadata":{},"sourceType":"module"}