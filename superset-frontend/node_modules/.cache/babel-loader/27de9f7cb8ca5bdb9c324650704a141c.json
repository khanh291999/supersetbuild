{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Form, FormItem } from 'src/components/Form';\nimport { Select } from 'src/components';\nimport { Col, InputNumber, Row } from 'src/common/components';\nimport Button from 'src/components/Button';\nimport { COMPARATOR, MULTIPLE_VALUE_COMPARATORS } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FullWidthInputNumber = styled(InputNumber)`\n  width: 100%;\n`;\nconst JustifyEnd = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\nconst colorSchemeOptions = [\n{ value: 'rgb(0,255,0)', label: t('green') },\n{ value: 'rgb(255,255,0)', label: t('yellow') },\n{ value: 'rgb(255,0,0)', label: t('red') }];\n\nconst operatorOptions = [\n{ value: COMPARATOR.NONE, label: 'None' },\n{ value: COMPARATOR.GREATER_THAN, label: '>' },\n{ value: COMPARATOR.LESS_THAN, label: '<' },\n{ value: COMPARATOR.GREATER_OR_EQUAL, label: '≥' },\n{ value: COMPARATOR.LESS_OR_EQUAL, label: '≤' },\n{ value: COMPARATOR.EQUAL, label: '=' },\n{ value: COMPARATOR.NOT_EQUAL, label: '≠' },\n{ value: COMPARATOR.BETWEEN, label: '< x <' },\n{ value: COMPARATOR.BETWEEN_OR_EQUAL, label: '≤ x ≤' },\n{ value: COMPARATOR.BETWEEN_OR_LEFT_EQUAL, label: '≤ x <' },\n{ value: COMPARATOR.BETWEEN_OR_RIGHT_EQUAL, label: '< x ≤' }];\n\nconst targetValueValidator = (compare, rejectMessage) => (targetValue) => (_, compareValue) => {\n  if (!targetValue ||\n  !compareValue ||\n  compare(Number(targetValue), Number(compareValue))) {\n    return Promise.resolve();\n  }\n  return Promise.reject(new Error(rejectMessage));\n};\nconst targetValueLeftValidator = targetValueValidator((target, val) => target > val, t('This value should be smaller than the right target value'));\nconst targetValueRightValidator = targetValueValidator((target, val) => target < val, t('This value should be greater than the left target value'));\nconst isOperatorMultiValue = (operator) => operator && MULTIPLE_VALUE_COMPARATORS.includes(operator);\nconst isOperatorNone = (operator) => !operator || operator === COMPARATOR.NONE;\nconst rulesRequired = [{ required: true, message: t('Required') }];\nconst rulesTargetValueLeft = [\n{ required: true, message: t('Required') },\n({ getFieldValue }) => ({\n  validator: targetValueLeftValidator(getFieldValue('targetValueRight')) })];\n\n\nconst rulesTargetValueRight = [\n{ required: true, message: t('Required') },\n({ getFieldValue }) => ({\n  validator: targetValueRightValidator(getFieldValue('targetValueLeft')) })];\n\n\nconst targetValueLeftDeps = ['targetValueRight'];\nconst targetValueRightDeps = ['targetValueLeft'];\nconst shouldFormItemUpdate = (prevValues, currentValues) => isOperatorNone(prevValues.operator) !==\nisOperatorNone(currentValues.operator) ||\nisOperatorMultiValue(prevValues.operator) !==\nisOperatorMultiValue(currentValues.operator);\nconst operatorField = ___EmotionJSX(FormItem, { name: \"operator\", label: t('Operator'), rules: rulesRequired, initialValue: operatorOptions[0].value },\n___EmotionJSX(Select, { ariaLabel: t('Operator'), options: operatorOptions }));\n\nconst renderOperatorFields = ({ getFieldValue }) => isOperatorNone(getFieldValue('operator')) ? ___EmotionJSX(Row, { gutter: 12 },\n___EmotionJSX(Col, { span: 6 }, operatorField)) :\nisOperatorMultiValue(getFieldValue('operator')) ? ___EmotionJSX(Row, { gutter: 12 },\n___EmotionJSX(Col, { span: 9 },\n___EmotionJSX(FormItem, { name: \"targetValueLeft\", label: t('Left value'), rules: rulesTargetValueLeft, dependencies: targetValueLeftDeps, validateTrigger: \"onBlur\", trigger: \"onBlur\" },\n___EmotionJSX(FullWidthInputNumber, null))),\n\n\n___EmotionJSX(Col, { span: 6 }, operatorField),\n___EmotionJSX(Col, { span: 9 },\n___EmotionJSX(FormItem, { name: \"targetValueRight\", label: t('Right value'), rules: rulesTargetValueRight, dependencies: targetValueRightDeps, validateTrigger: \"onBlur\", trigger: \"onBlur\" },\n___EmotionJSX(FullWidthInputNumber, null)))) :\n\n\n___EmotionJSX(Row, { gutter: 12 },\n___EmotionJSX(Col, { span: 6 }, operatorField),\n___EmotionJSX(Col, { span: 18 },\n___EmotionJSX(FormItem, { name: \"targetValue\", label: t('Target value'), rules: rulesRequired },\n___EmotionJSX(FullWidthInputNumber, null))));\n\n\n\nexport const FormattingPopoverContent = ({ config, onChange, columns = [] }) => {var _columns$;return ___EmotionJSX(Form, { onFinish: onChange, initialValues: config, requiredMark: \"optional\", layout: \"vertical\" },\n  ___EmotionJSX(Row, { gutter: 12 },\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(FormItem, { name: \"column\", label: t('Column'), rules: rulesRequired, initialValue: (_columns$ = columns[0]) == null ? void 0 : _columns$.value },\n  ___EmotionJSX(Select, { ariaLabel: t('Select column'), options: columns }))),\n\n\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(FormItem, { name: \"colorScheme\", label: t('Color scheme'), rules: rulesRequired, initialValue: colorSchemeOptions[0].value },\n  ___EmotionJSX(Select, { ariaLabel: t('Color scheme'), options: colorSchemeOptions })))),\n\n\n\n  ___EmotionJSX(FormItem, { noStyle: true, shouldUpdate: shouldFormItemUpdate },\n  renderOperatorFields),\n\n  ___EmotionJSX(FormItem, null,\n  ___EmotionJSX(JustifyEnd, null,\n  ___EmotionJSX(Button, { htmlType: \"submit\", buttonStyle: \"primary\" },\n  t('Apply')))));};","map":null,"metadata":{},"sourceType":"module"}