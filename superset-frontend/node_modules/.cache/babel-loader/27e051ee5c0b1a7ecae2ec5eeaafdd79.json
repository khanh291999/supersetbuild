{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport Popover from 'src/components/Popover';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport ColumnSelectPopover from './ColumnSelectPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ColumnSelectPopoverTrigger = ({ columns, editedColumn, onColumnEdit, isControlledComponent, children, ...props }) => {\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const togglePopover = useCallback((visible) => {\n    setPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n  const { visible, handleTogglePopover, handleClosePopover } = isControlledComponent ?\n  {\n    visible: props.visible,\n    handleTogglePopover: props.togglePopover,\n    handleClosePopover: props.closePopover } :\n\n  {\n    visible: popoverVisible,\n    handleTogglePopover: togglePopover,\n    handleClosePopover: closePopover };\n\n  const overlayContent = useMemo(() => ___EmotionJSX(ExplorePopoverContent, null,\n  ___EmotionJSX(ColumnSelectPopover, { editedColumn: editedColumn, columns: columns, onClose: handleClosePopover, onChange: onColumnEdit })),\n  [columns, editedColumn, handleClosePopover, onColumnEdit]);\n  return ___EmotionJSX(Popover, { placement: \"right\", trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: handleTogglePopover, destroyTooltipOnHide: true },\n  children);\n\n};\nexport default ColumnSelectPopoverTrigger;","map":null,"metadata":{},"sourceType":"module"}