{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport {\naddDangerToast,\naddSuccessToast } from\n'src/components/MessageToasts/actions';\n\nexport const SET_REPORT = 'SET_REPORT';\nexport function setReport(report) {\n  return { type: SET_REPORT, report };\n}\n\nexport function fetchUISpecificReport(\nuserId,\nfilter_field,\ncreation_method,\ndashboardId)\n{\n  const queryParams = rison.encode({\n    filters: [\n    {\n      col: filter_field,\n      opr: 'eq',\n      value: dashboardId },\n\n    {\n      col: 'creation_method',\n      opr: 'eq',\n      value: creation_method },\n\n    {\n      col: 'created_by',\n      opr: 'rel_o_m',\n      value: userId }] });\n\n\n\n  return function fetchUISpecificReportThunk(dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/?q=${queryParams}` }).\n\n    then(({ json }) => {\n      dispatch(setReport(json));\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'There was an issue fetching reports attached to this dashboard.'))));\n\n\n\n\n  };\n}\n\nconst structureFetchAction = (dispatch, getState) => {\n  const state = getState();\n  const { user, dashboardInfo, charts, explore } = state;\n  if (dashboardInfo) {\n    dispatch(\n    fetchUISpecificReport(\n    user.userId,\n    'dashboard_id',\n    'dashboards',\n    dashboardInfo.id));\n\n\n  } else {\n    const [chartArr] = Object.keys(charts);\n    dispatch(\n    fetchUISpecificReport(\n    explore.user.userId,\n    'chart_id',\n    'charts',\n    charts[chartArr].id));\n\n\n  }\n};\n\nexport const ADD_REPORT = 'ADD_REPORT';\n\nexport const addReport = (report) => (dispatch) =>\nSupersetClient.post({\n  endpoint: `/api/v1/report/`,\n  jsonPayload: report }).\n\nthen(({ json }) => {\n  dispatch({ type: ADD_REPORT, json });\n  dispatch(addSuccessToast(t('The report has been created')));\n}).\ncatch(async (e) => {\n  const parsedError = await getClientErrorObject(e);\n  const errorMessage = parsedError.message;\n  const errorArr = Object.keys(errorMessage);\n  const error = errorMessage[errorArr[0]];\n  dispatch(\n  addDangerToast(\n  t('An error occurred while editing this report: %s', error)));\n\n\n});\n\nexport const EDIT_REPORT = 'EDIT_REPORT';\n\nexport function editReport(id, report) {\n  return function (dispatch) {\n    SupersetClient.put({\n      endpoint: `/api/v1/report/${id}`,\n      jsonPayload: report }).\n\n    then(({ json }) => {\n      dispatch({ type: EDIT_REPORT, json });\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(t('An error occurred while editing this report.'))));\n\n\n  };\n}\n\nexport function toggleActive(report, isActive) {\n  return function toggleActiveThunk(dispatch) {\n    return SupersetClient.put({\n      endpoint: encodeURI(`/api/v1/report/${report.id}`),\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        active: isActive }) }).\n\n\n    catch(() => {\n      dispatch(\n      addDangerToast(\n      t('We were unable to active or deactivate this report.')));\n\n\n    }).\n    finally(() => {\n      dispatch(structureFetchAction);\n    });\n  };\n}\n\nexport function deleteActiveReport(report) {\n  return function deleteActiveReportThunk(dispatch) {\n    return SupersetClient.delete({\n      endpoint: encodeURI(`/api/v1/report/${report.id}`) }).\n\n    catch(() => {\n      dispatch(addDangerToast(t('Your report could not be deleted')));\n    }).\n    finally(() => {\n      dispatch(structureFetchAction);\n      dispatch(addSuccessToast(t('Deleted: %s', report.name)));\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}