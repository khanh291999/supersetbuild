{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _URL from \"@babel/runtime-corejs3/core-js-stable/url\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect } from 'react';\nimport { styled, logging } from '@superset-ui/core';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ImageContainer = styled.div`\n  background-image: url(${({ src }) => src});\n  background-size: cover;\n  background-position: center ${({ position }) => position};\n  display: inline-block;\n  height: calc(100% - 1px);\n  width: calc(100% - 2px);\n  margin: 1px 1px 0 1px;\n`;\nexport default function ImageLoader({ src, fallback, isLoading, position, ...rest }) {\n  const [imgSrc, setImgSrc] = React.useState(fallback);\n  useEffect(() => {\n    if (src) {\n      fetch(src).\n      then((response) => response.blob()).\n      then((blob) => {\n        if (/image/.test(blob.type)) {\n          const imgURL = _URL.createObjectURL(blob);\n          setImgSrc(imgURL);\n        }\n      }).\n      catch((errMsg) => {\n        logging.error(errMsg);\n        setImgSrc(fallback);\n      });\n    }\n    return () => {\n      // theres a very brief period where isLoading is false and this component is about to unmount\n      // where the stale imgSrc is briefly rendered. Setting imgSrc to fallback smoothes the transition.\n      setImgSrc(fallback);\n    };\n  }, [src, fallback]);\n  return ___EmotionJSX(ImageContainer, _extends({ src: isLoading ? fallback : imgSrc }, rest, { position: position }));\n}","map":null,"metadata":{},"sourceType":"module"}