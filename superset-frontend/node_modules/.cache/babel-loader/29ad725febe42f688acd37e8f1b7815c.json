{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\n// <- When we work with Immer, we need reassign, so disabling lint\nimport produce from 'immer';\nimport { FeatureFlag } from '@superset-ui/core';\nimport { NATIVE_FILTER_PREFIX } from 'src/dashboard/components/nativeFilters/FiltersConfigModal/utils';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { CLEAR_DATA_MASK_STATE, SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE, UPDATE_DATA_MASK } from './actions';\nimport { areObjectsEqual } from '../reduxUtils';\nexport function getInitialDataMask(id, moreProps = {}) {\n  let otherProps = {};\n  if (id) {\n    otherProps = {\n      id };\n\n  }\n  return {\n    ...otherProps,\n    extraFormData: {},\n    filterState: {},\n    ownState: {},\n    ...moreProps };\n\n}\nfunction fillNativeFilters(filterConfig, mergedDataMask, draftDataMask, currentFilters) {\n  const dataMaskFromUrl = getUrlParam(URL_PARAMS.nativeFilters) || {};\n  filterConfig.forEach((filter) => {var _currentFilters$filte;\n    mergedDataMask[filter.id] = {\n      ...getInitialDataMask(filter.id),\n      ...filter.defaultDataMask,\n      ...dataMaskFromUrl[filter.id] };\n\n    if (currentFilters &&\n    !areObjectsEqual(filter.defaultDataMask, (_currentFilters$filte = currentFilters[filter.id]) == null ? void 0 : _currentFilters$filte.defaultDataMask, { ignoreUndefined: true })) {\n      mergedDataMask[filter.id] = {\n        ...mergedDataMask[filter.id],\n        ...filter.defaultDataMask };\n\n    }\n  });\n  // Get back all other non-native filters\n  Object.values(draftDataMask).forEach((filter) => {\n    if (!String(filter == null ? void 0 : filter.id).startsWith(NATIVE_FILTER_PREFIX)) {\n      mergedDataMask[filter == null ? void 0 : filter.id] = filter;\n    }\n  });\n}\nconst dataMaskReducer = produce((draft, action) => {var _action$data$dashboar3, _action$data$dashboar4, _action$data$dashboar5, _action$filterConfig;\n  const cleanState = {};\n  switch (action.type) {\n    case CLEAR_DATA_MASK_STATE:\n      return cleanState;\n    case UPDATE_DATA_MASK:\n      draft[action.filterId] = {\n        ...getInitialDataMask(action.filterId),\n        ...draft[action.filterId],\n        ...action.dataMask };\n\n      return draft;\n    // TODO: update hydrate to .ts\n    // @ts-ignore\n    case HYDRATE_DASHBOARD:\n      if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {var _action$data$dashboar, _action$data$dashboar2;\n        Object.keys(\n        // @ts-ignore\n        (_action$data$dashboar = action.data.dashboardInfo) == null ? void 0 : (_action$data$dashboar2 = _action$data$dashboar.metadata) == null ? void 0 : _action$data$dashboar2.chart_configuration).forEach((id) => {\n          cleanState[id] = {\n            ...getInitialDataMask(id) // take initial data\n          };\n        });\n      }\n      fillNativeFilters(\n      // @ts-ignore\n      (_action$data$dashboar3 = (_action$data$dashboar4 = action.data.dashboardInfo) == null ? void 0 : (_action$data$dashboar5 = _action$data$dashboar4.metadata) == null ? void 0 : _action$data$dashboar5.native_filter_configuration) != null ? _action$data$dashboar3 :\n      [], cleanState, draft);\n      return cleanState;\n    case SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE:\n      fillNativeFilters((_action$filterConfig = action.filterConfig) != null ? _action$filterConfig : [], cleanState, draft, action.filters);\n      return cleanState;\n    default:\n      return draft;}\n\n}, {});\nexport default dataMaskReducer;","map":null,"metadata":{},"sourceType":"module"}