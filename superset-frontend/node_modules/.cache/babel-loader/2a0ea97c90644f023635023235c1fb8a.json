{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Alert from 'src/components/Alert';\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport StyledModal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { useDebouncedEffect } from 'src/explore/exploreUtils';\nimport { SLOW_DEBOUNCE } from 'src/constants';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport Loading from 'src/components/Loading';\nimport { Input } from 'src/common/components';\nimport { PAGE_SIZE as DATASET_PAGE_SIZE, SORT_BY as DATASET_SORT_BY } from 'src/views/CRUD/data/dataset/constants';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from '../components/FacePile';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CONFIRM_WARNING_MESSAGE = t('Warning! Changing the dataset may break the chart if the metadata does not exist.');\nconst CHANGE_WARNING_MSG = t('Changing the dataset may break the chart if the chart relies ' +\n'on columns or metadata that does not exist in the target dataset');\nconst Modal = styled(StyledModal)`\n  .ant-modal-body {\n    display: flex;\n    flex-direction: column;\n  }\n`;\nconst ConfirmModalStyled = styled.div`\n  .btn-container {\n    display: flex;\n    justify-content: flex-end;\n    padding: 0px 15px;\n    margin: 10px 0 0 0;\n  }\n\n  .confirm-modal-container {\n    margin: 9px;\n  }\n`;\nconst StyledSpan = styled.span`\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  &: hover {\n    color: ${({ theme }) => theme.colors.primary.dark2};\n  }\n`;\nconst ChangeDatasourceModal = ({ addDangerToast, addSuccessToast, onChange, onDatasourceSave, onHide, show }) => {\n  const [filter, setFilter] = useState(undefined);\n  const [pageIndex, setPageIndex] = useState(0);\n  const [sortBy, setSortBy] = useState(DATASET_SORT_BY);\n  const [confirmChange, setConfirmChange] = useState(false);\n  const [confirmedDataset, setConfirmedDataset] = useState();\n  const searchRef = useRef(null);\n  const { state: { loading, resourceCollection, resourceCount }, fetchData } = useListViewResource('dataset', t('dataset'), addDangerToast);\n  const selectDatasource = useCallback((datasource) => {\n    setConfirmChange(true);\n    setConfirmedDataset(datasource);\n  }, []);\n  const fetchDatasetPayload = {\n    pageIndex,\n    pageSize: DATASET_PAGE_SIZE,\n    filters: [],\n    sortBy };\n\n  useDebouncedEffect(() => {\n    fetchData({\n      ...fetchDatasetPayload,\n      ...(filter && {\n        filters: [\n        {\n          id: 'table_name',\n          operator: 'ct',\n          value: filter }] }) });\n\n\n\n\n  }, SLOW_DEBOUNCE, [filter, pageIndex, sortBy]);\n  useEffect(() => {\n    const onEnterModal = async () => {\n      setTimeout(() => {var _searchRef$current;return searchRef == null ? void 0 : (_searchRef$current = searchRef.current) == null ? void 0 : _searchRef$current.focus();}, 200);\n    };\n    if (show) {\n      onEnterModal();\n    }\n  }, [\n  addDangerToast,\n  fetchData,\n  onChange,\n  onDatasourceSave,\n  onHide,\n  selectDatasource,\n  show]);\n\n  const changeSearch = (event) => {var _event$target$value;\n    const searchValue = (_event$target$value = event.target.value) != null ? _event$target$value : '';\n    setFilter(searchValue);\n    setPageIndex(0);\n  };\n  const handleChangeConfirm = () => {\n    SupersetClient.get({\n      endpoint: `/datasource/get/${confirmedDataset == null ? void 0 : confirmedDataset.type}/${confirmedDataset == null ? void 0 : confirmedDataset.id}/` }).\n\n    then(({ json }) => {\n      onDatasourceSave(json);\n      onChange(`${confirmedDataset == null ? void 0 : confirmedDataset.id}__table`);\n    }).\n    catch((response) => {\n      getClientErrorObject(response).then(({ error, message }) => {\n        const errorMessage = error ?\n        error.error || error.statusText || error :\n        message;\n        addDangerToast(errorMessage);\n      });\n    });\n    onHide();\n    addSuccessToast('Successfully changed dataset!');\n  };\n  const handlerCancelConfirm = () => {\n    setConfirmChange(false);\n  };\n  const columns = [\n  {\n    Cell: ({ row: { original } }) => ___EmotionJSX(StyledSpan, { role: \"button\", tabIndex: 0, onClick: () => selectDatasource({ type: 'table', ...original }) },\n    original == null ? void 0 : original.table_name),\n\n    Header: t('Name'),\n    accessor: 'table_name' },\n\n  {\n    Header: t('Type'),\n    accessor: 'kind',\n    disableSortBy: true },\n\n  {\n    Header: t('Schema'),\n    accessor: 'schema' },\n\n  {\n    Header: t('Connection'),\n    accessor: 'database.database_name',\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => ___EmotionJSX(FacePile, { users: owners }),\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true }];\n\n\n  const onServerPagination = (args) => {\n    setPageIndex(args.pageIndex);\n    if (args.sortBy) {\n      // ensure default sort by\n      setSortBy(args.sortBy.length > 0 ? args.sortBy : DATASET_SORT_BY);\n    }\n  };\n  return ___EmotionJSX(Modal, { show: show, onHide: onHide, responsive: true, title: t('Change dataset'), width: confirmChange ? '432px' : '', height: confirmChange ? 'auto' : '540px', hideFooter: !confirmChange, footer: ___EmotionJSX(React.Fragment, null,\n    confirmChange && ___EmotionJSX(ConfirmModalStyled, null,\n    ___EmotionJSX(\"div\", { className: \"btn-container\" },\n    ___EmotionJSX(Button, { onClick: handlerCancelConfirm }, \"Cancel\"),\n    ___EmotionJSX(Button, { className: \"proceed-btn\", buttonStyle: \"primary\", onClick: handleChangeConfirm }, \"Proceed\")))) },\n\n\n\n\n\n  ___EmotionJSX(React.Fragment, null,\n  !confirmChange && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Alert, { roomBelow: true, type: \"warning\", css: (theme) => ({ marginBottom: theme.gridUnit * 4 }), message: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"strong\", null, t('Warning!')), \" \", CHANGE_WARNING_MSG) }),\n\n  ___EmotionJSX(Input, { ref: searchRef, type: \"text\", value: filter, placeholder: t('Search / Filter'), onChange: changeSearch }),\n  loading && ___EmotionJSX(Loading, null),\n  !loading && ___EmotionJSX(TableView, { columns: columns, data: resourceCollection, pageSize: DATASET_PAGE_SIZE, initialPageIndex: pageIndex, initialSortBy: sortBy, totalCount: resourceCount, onServerPagination: onServerPagination, className: \"table-condensed\", emptyWrapperType: EmptyWrapperType.Small, serverPagination: true, isPaginationSticky: true, scrollTable: true })),\n\n  confirmChange && ___EmotionJSX(React.Fragment, null, CONFIRM_WARNING_MESSAGE)));\n\n\n};\nexport default withToasts(ChangeDatasourceModal);","map":null,"metadata":{},"sourceType":"module"}