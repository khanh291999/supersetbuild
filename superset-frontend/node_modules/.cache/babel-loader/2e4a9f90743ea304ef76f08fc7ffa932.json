{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nexport const AGGREGATES = {\n  AVG: 'AVG',\n  COUNT: 'COUNT',\n  COUNT_DISTINCT: 'COUNT_DISTINCT',\n  MAX: 'MAX',\n  MIN: 'MIN',\n  SUM: 'SUM' };\n\nexport const AGGREGATES_OPTIONS = Object.values(AGGREGATES);\nexport var Operators;\n(function (Operators) {\n  Operators[\"EQUALS\"] = \"EQUALS\";\n  Operators[\"NOT_EQUALS\"] = \"NOT_EQUALS\";\n  Operators[\"LESS_THAN\"] = \"LESS_THAN\";\n  Operators[\"GREATER_THAN\"] = \"GREATER_THAN\";\n  Operators[\"LESS_THAN_OR_EQUAL\"] = \"LESS_THAN_OR_EQUAL\";\n  Operators[\"GREATER_THAN_OR_EQUAL\"] = \"GREATER_THAN_OR_EQUAL\";\n  Operators[\"IN\"] = \"IN\";\n  Operators[\"NOT_IN\"] = \"NOT_IN\";\n  Operators[\"ILIKE\"] = \"ILIKE\";\n  Operators[\"LIKE\"] = \"LIKE\";\n  Operators[\"REGEX\"] = \"REGEX\";\n  Operators[\"IS_NOT_NULL\"] = \"IS_NOT_NULL\";\n  Operators[\"IS_NULL\"] = \"IS_NULL\";\n  Operators[\"LATEST_PARTITION\"] = \"LATEST_PARTITION\";\n  Operators[\"IS_TRUE\"] = \"IS_TRUE\";\n  Operators[\"IS_FALSE\"] = \"IS_FALSE\";\n})(Operators || (Operators = {}));\nexport const OPERATOR_ENUM_TO_OPERATOR_TYPE = {\n  [Operators.EQUALS]: { display: 'equals', operation: '==' },\n  [Operators.NOT_EQUALS]: { display: 'not equals', operation: '!=' },\n  [Operators.GREATER_THAN]: { display: '>', operation: '>' },\n  [Operators.LESS_THAN]: { display: '<', operation: '<' },\n  [Operators.GREATER_THAN_OR_EQUAL]: { display: '>=', operation: '>=' },\n  [Operators.LESS_THAN_OR_EQUAL]: { display: '<=', operation: '<=' },\n  [Operators.IN]: { display: 'IN', operation: 'IN' },\n  [Operators.NOT_IN]: { display: 'NOT IN', operation: 'NOT IN' },\n  [Operators.LIKE]: { display: 'LIKE', operation: 'LIKE' },\n  [Operators.ILIKE]: { display: 'LIKE (case insensitive)', operation: 'ILIKE' },\n  [Operators.REGEX]: { display: 'REGEX', operation: 'REGEX' },\n  [Operators.IS_NOT_NULL]: { display: 'IS NOT NULL', operation: 'IS NOT NULL' },\n  [Operators.IS_NULL]: { display: 'IS NULL', operation: 'IS NULL' },\n  [Operators.LATEST_PARTITION]: {\n    display: 'use latest_partition template',\n    operation: 'LATEST PARTITION' },\n\n  [Operators.IS_TRUE]: { display: 'IS TRUE', operation: '==' },\n  [Operators.IS_FALSE]: { display: 'IS FALSE', operation: '==' } };\n\nexport const OPERATORS_OPTIONS = Object.values(Operators);\nexport const TABLE_ONLY_OPERATORS = [Operators.LIKE, Operators.ILIKE];\nexport const DRUID_ONLY_OPERATORS = [Operators.REGEX];\nexport const HAVING_OPERATORS = [\nOperators.EQUALS,\nOperators.NOT_EQUALS,\nOperators.GREATER_THAN,\nOperators.LESS_THAN,\nOperators.GREATER_THAN_OR_EQUAL,\nOperators.LESS_THAN_OR_EQUAL];\n\nexport const MULTI_OPERATORS = new Set([Operators.IN, Operators.NOT_IN]);\n// CUSTOM_OPERATORS will show operator in simple mode,\n// but will generate customized sqlExpression\nexport const CUSTOM_OPERATORS = new Set([Operators.LATEST_PARTITION]);\n// DISABLE_INPUT_OPERATORS will disable filter value input\n// in adhocFilter control\nexport const DISABLE_INPUT_OPERATORS = [\nOperators.IS_NOT_NULL,\nOperators.IS_NULL,\nOperators.LATEST_PARTITION,\nOperators.IS_TRUE,\nOperators.IS_FALSE];\n\nexport const sqlaAutoGeneratedMetricNameRegex = /^(sum|min|max|avg|count|count_distinct)__.*$/i;\nexport const sqlaAutoGeneratedMetricRegex = /^(LONG|DOUBLE|FLOAT)?(SUM|AVG|MAX|MIN|COUNT)\\([A-Z0-9_.\"]*\\)$/i;\nexport const druidAutoGeneratedMetricRegex = /^(LONG|DOUBLE|FLOAT)?(SUM|MAX|MIN|COUNT)\\([A-Z0-9_.\"]*\\)$/i;\nexport const TIME_FILTER_LABELS = {\n  time_range: t('Time range'),\n  granularity_sqla: t('Time column'),\n  time_grain_sqla: t('Time grain'),\n  druid_time_origin: t('Origin'),\n  granularity: t('Time granularity') };\n\nexport const FILTER_CONFIG_ATTRIBUTES = {\n  DEFAULT_VALUE: 'defaultValue',\n  MULTIPLE: 'multiple',\n  SEARCH_ALL_OPTIONS: 'searchAllOptions',\n  CLEARABLE: 'clearable' };\n\nexport const FILTER_OPTIONS_LIMIT = 1000;\n/**\n * Map control names to their key in extra_filters\n */\nexport const TIME_FILTER_MAP = {\n  time_range: '__time_range',\n  granularity_sqla: '__time_col',\n  time_grain_sqla: '__time_grain',\n  druid_time_origin: '__time_origin',\n  granularity: '__granularity' };\n\n// TODO: make this configurable per Superset installation\nexport const DEFAULT_TIME_RANGE = 'No filter';\nexport const NO_TIME_RANGE = 'No filter';","map":null,"metadata":{},"sourceType":"module"}