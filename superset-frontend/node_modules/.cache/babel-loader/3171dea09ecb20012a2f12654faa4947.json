{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\n\nimport Popover from 'src/components/Popover';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport { Tooltip } from 'src/components/Tooltip';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { getShortUrl } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { getExploreLongUrl, getURIDirectory } from '../exploreUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  latestQueryFormData: PropTypes.object.isRequired };\n\n\nexport default class EmbedCodeButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: '400',\n      width: '600',\n      shortUrlId: 0 };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.getCopyUrl = this.getCopyUrl.bind(this);\n    this.onShortUrlSuccess = this.onShortUrlSuccess.bind(this);\n  }\n\n  onShortUrlSuccess(shortUrl) {\n    const shortUrlId = shortUrl.substring(shortUrl.indexOf('/r/') + 3);\n    this.setState(() => ({\n      shortUrlId }));\n\n  }\n\n  getCopyUrl() {\n    return getShortUrl(getExploreLongUrl(this.props.latestQueryFormData)).\n    then(this.onShortUrlSuccess).\n    catch(this.props.addDangerToast);\n  }\n\n  handleInputChange(e) {\n    const { value, name } = e.currentTarget;\n    const data = {};\n    data[name] = value;\n    this.setState(data);\n  }\n\n  generateEmbedHTML() {\n    const srcLink = `${window.location.origin + getURIDirectory()}?r=${\n    this.state.shortUrlId\n    }&${URL_PARAMS.standalone.name}=1&height=${this.state.height}`;\n    return (\n      '<iframe\\n' +\n      `  width=\"${this.state.width}\"\\n` +\n      `  height=\"${this.state.height}\"\\n` +\n      '  seamless\\n' +\n      '  frameBorder=\"0\"\\n' +\n      '  scrolling=\"no\"\\n' +\n      `  src=\"${srcLink}\"\\n` +\n      '>\\n' +\n      '</iframe>');\n\n  }\n\n  renderPopoverContent() {\n    const html = this.generateEmbedHTML();\n    return (\n      ___EmotionJSX(\"div\", { id: \"embed-code-popover\" },\n      ___EmotionJSX(\"div\", { className: \"row\" },\n      ___EmotionJSX(\"div\", { className: \"col-sm-10\" },\n      ___EmotionJSX(\"textarea\", {\n\n        name: \"embedCode\",\n        value: html,\n        rows: \"4\",\n        readOnly: true,\n        className: \"form-control input-sm\" })),\n\n\n      ___EmotionJSX(\"div\", { className: \"col-sm-2\" },\n      ___EmotionJSX(CopyToClipboard, {\n        shouldShowText: false,\n        text: html,\n        copyNode:\n        ___EmotionJSX(\"i\", { className: \"fa fa-clipboard\", title: t('Copy to clipboard') }) }))),\n\n\n\n\n      ___EmotionJSX(\"br\", null),\n      ___EmotionJSX(\"div\", { className: \"row\" },\n      ___EmotionJSX(\"div\", { className: \"col-md-6 col-sm-12\" },\n      ___EmotionJSX(\"div\", { className: \"form-group\" },\n      ___EmotionJSX(\"small\", null,\n      ___EmotionJSX(FormLabel, { htmlFor: \"embed-height\" }, t('Height'))),\n\n      ___EmotionJSX(\"input\", {\n        className: \"form-control input-sm\",\n        type: \"text\",\n        defaultValue: this.state.height,\n        name: \"height\",\n        onChange: this.handleInputChange }))),\n\n\n\n      ___EmotionJSX(\"div\", { className: \"col-md-6 col-sm-12\" },\n      ___EmotionJSX(\"div\", { className: \"form-group\" },\n      ___EmotionJSX(\"small\", null,\n      ___EmotionJSX(FormLabel, { htmlFor: \"embed-width\" }, t('Width'))),\n\n      ___EmotionJSX(\"input\", {\n        className: \"form-control input-sm\",\n        type: \"text\",\n        defaultValue: this.state.width,\n        name: \"width\",\n        onChange: this.handleInputChange,\n        id: \"embed-width\" }))))));\n\n\n\n\n\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(Popover, {\n        trigger: \"click\",\n        placement: \"left\",\n        onClick: this.getCopyUrl,\n        content: this.renderPopoverContent() },\n\n      ___EmotionJSX(Tooltip, {\n        id: \"embed-code-tooltip\",\n        placement: \"top\",\n        title: \"Embed code\",\n        trigger: ['hover'] },\n\n      ___EmotionJSX(\"div\", {\n        className: \"btn btn-default btn-sm\",\n\n        style: { display: 'flex', alignItems: 'center', height: 30 } },\n\n      ___EmotionJSX(Icons.Code, { iconSize: \"l\" })))));\n\n\n\n\n  }}\n\n\nEmbedCodeButton.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}