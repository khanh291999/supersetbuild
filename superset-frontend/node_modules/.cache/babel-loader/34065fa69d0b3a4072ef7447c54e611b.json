{"ast":null,"code":"import { t, SupersetClient } from '@superset-ui/core';\nimport { addDangerToast, toastActions } from 'src/components/MessageToasts/actions';\nconst FAVESTAR_BASE_URL = '/superset/favstar/slice';\nexport const SET_DATASOURCE_TYPE = 'SET_DATASOURCE_TYPE';\nexport function setDatasourceType(datasourceType) {\n  return { type: SET_DATASOURCE_TYPE, datasourceType };\n}\nexport const SET_DATASOURCE = 'SET_DATASOURCE';\nexport function setDatasource(datasource) {\n  return { type: SET_DATASOURCE, datasource };\n}\nexport const SET_DATASOURCES = 'SET_DATASOURCES';\nexport function setDatasources(datasources) {\n  return { type: SET_DATASOURCES, datasources };\n}\nexport const POST_DATASOURCE_STARTED = 'POST_DATASOURCE_STARTED';\nexport const FETCH_DATASOURCE_SUCCEEDED = 'FETCH_DATASOURCE_SUCCEEDED';\nexport function fetchDatasourceSucceeded() {\n  return { type: FETCH_DATASOURCE_SUCCEEDED };\n}\nexport const FETCH_DATASOURCES_STARTED = 'FETCH_DATASOURCES_STARTED';\nexport function fetchDatasourcesStarted() {\n  return { type: FETCH_DATASOURCES_STARTED };\n}\nexport const FETCH_DATASOURCES_SUCCEEDED = 'FETCH_DATASOURCES_SUCCEEDED';\nexport function fetchDatasourcesSucceeded() {\n  return { type: FETCH_DATASOURCES_SUCCEEDED };\n}\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\nexport const FETCH_FAVE_STAR = 'FETCH_FAVE_STAR';\nexport function fetchFaveStar(sliceId) {\n  return function (dispatch) {\n    SupersetClient.get({\n      endpoint: `${FAVESTAR_BASE_URL}/${sliceId}/count/` }).\n    then(({ json }) => {\n      if (json.count > 0) {\n        dispatch(toggleFaveStar(true));\n      }\n    });\n  };\n}\nexport const SAVE_FAVE_STAR = 'SAVE_FAVE_STAR';\nexport function saveFaveStar(sliceId, isStarred) {\n  return function (dispatch) {\n    const urlSuffix = isStarred ? 'unselect' : 'select';\n    SupersetClient.get({\n      endpoint: `${FAVESTAR_BASE_URL}/${sliceId}/${urlSuffix}/` }).\n\n    then(() => dispatch(toggleFaveStar(!isStarred))).\n    catch(() => {\n      dispatch(addDangerToast(t('An error occurred while starring this chart')));\n    });\n  };\n}\nexport const SET_FIELD_VALUE = 'SET_FIELD_VALUE';\nexport function setControlValue(controlName, value, validationErrors) {\n  return { type: SET_FIELD_VALUE, controlName, value, validationErrors };\n}\nexport const SET_EXPLORE_CONTROLS = 'UPDATE_EXPLORE_CONTROLS';\nexport function setExploreControls(formData) {\n  return { type: SET_EXPLORE_CONTROLS, formData };\n}\nexport const UPDATE_CHART_TITLE = 'UPDATE_CHART_TITLE';\nexport function updateChartTitle(sliceName) {\n  return { type: UPDATE_CHART_TITLE, sliceName };\n}\nexport const CREATE_NEW_SLICE = 'CREATE_NEW_SLICE';\nexport function createNewSlice(can_add, can_download, can_overwrite, slice, form_data) {\n  return {\n    type: CREATE_NEW_SLICE,\n    can_add,\n    can_download,\n    can_overwrite,\n    slice,\n    form_data };\n\n}\nexport const SLICE_UPDATED = 'SLICE_UPDATED';\nexport function sliceUpdated(slice) {\n  return { type: SLICE_UPDATED, slice };\n}\nexport const exploreActions = {\n  ...toastActions,\n  setDatasourceType,\n  setDatasource,\n  setDatasources,\n  fetchDatasourcesStarted,\n  fetchDatasourcesSucceeded,\n  toggleFaveStar,\n  fetchFaveStar,\n  saveFaveStar,\n  setControlValue,\n  setExploreControls,\n  updateChartTitle,\n  createNewSlice,\n  sliceUpdated };","map":null,"metadata":{},"sourceType":"module"}