{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, tn } from '@superset-ui/core';\nimport levenshtein from 'js-levenshtein';\nimport IssueCode from './IssueCode';\nimport ErrorAlert from './ErrorAlert';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst maxDistanceForSuggestion = 2;\nconst findMatches = (undefinedParameters, templateKeys) => {\n  const matches = {};\n  undefinedParameters.forEach((undefinedParameter) => {\n    templateKeys.forEach((templateKey) => {\n      if (levenshtein(undefinedParameter, templateKey) <= maxDistanceForSuggestion) {\n        if (!matches[undefinedParameter]) {\n          matches[undefinedParameter] = [];\n        }\n        matches[undefinedParameter].push(`\"${templateKey}\"`);\n      }\n    });\n  });\n  return matches;\n};\nfunction ParameterErrorMessage({ error, source = 'sqllab', subtitle }) {\n  const { extra = { issue_codes: [] }, level, message } = error;\n  const triggerMessage = tn('This was triggered by:', 'This may be triggered by:', extra.issue_codes.length);\n  const matches = findMatches(extra.undefined_parameters || [], Object.keys(extra.template_parameters || {}));\n  const body = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"p\", null,\n  Object.keys(matches).length > 0 && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"p\", null, t('Did you mean:')),\n  ___EmotionJSX(\"ul\", null,\n  Object.entries(matches).map(([undefinedParameter, templateKeys]) => ___EmotionJSX(\"li\", null,\n  tn('%(suggestion)s instead of \"%(undefinedParameter)s?\"', '%(firstSuggestions)s or %(lastSuggestion)s instead of \"%(undefinedParameter)s\"?', templateKeys.length, {\n    suggestion: templateKeys.join(', '),\n    firstSuggestions: templateKeys.slice(0, -1).join(', '),\n    lastSuggestion: templateKeys[templateKeys.length - 1],\n    undefinedParameter })))),\n\n\n\n  ___EmotionJSX(\"br\", null)),\n\n  triggerMessage,\n  ___EmotionJSX(\"br\", null),\n  extra.issue_codes.length > 0 &&\n  extra.issue_codes.\n  map((issueCode) => ___EmotionJSX(IssueCode, issueCode)).\n  reduce((prev, curr) => [prev, ___EmotionJSX(\"br\", null), curr])));\n\n\n  const copyText = `${message}\n${triggerMessage}\n${extra.issue_codes.map((issueCode) => issueCode.message).join('\\n')}`;\n  return ___EmotionJSX(ErrorAlert, { title: t('Parameter error'), subtitle: subtitle, level: level, source: source, copyText: copyText, body: body });\n}\nexport default ParameterErrorMessage;","map":null,"metadata":{},"sourceType":"module"}