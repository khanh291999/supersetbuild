{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { t, getChartMetadataRegistry, styled } from '@superset-ui/core';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport Modal from 'src/components/Modal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Label from 'src/components/Label';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport VizTypeGallery, { MAX_ADVISABLE_VIZ_GALLERY_WIDTH } from './VizTypeGallery';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst propTypes = {\n  description: PropTypes.string,\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.string.isRequired,\n  labelType: PropTypes.string };\n\nconst defaultProps = {\n  onChange: () => {},\n  labelType: 'default' };\n\nconst metadataRegistry = getChartMetadataRegistry();\nexport const VIZ_TYPE_CONTROL_TEST_ID = 'viz-type-control';\nfunction VizSupportValidation({ vizType }) {\n  const state = usePluginContext();\n  if (state.loading || metadataRegistry.has(vizType)) {\n    return null;\n  }\n  return ___EmotionJSX(\"div\", { className: \"text-danger\" },\n  ___EmotionJSX(\"i\", { className: \"fa fa-exclamation-circle text-danger\" }), ' ',\n  ___EmotionJSX(\"small\", null, t('This visualization type is not supported.')));\n\n}\nconst UnpaddedModal = styled(Modal)`\n  .ant-modal-body {\n    padding: 0;\n  }\n`;\n/** Manages the viz type and the viz picker modal */\nconst VizTypeControl = (props) => {var _mountedPluginMetadat;\n  const { value: initialValue, onChange, isModalOpenInit, labelType } = props;\n  const { mountedPluginMetadata } = usePluginContext();\n  const [showModal, setShowModal] = useState(!!isModalOpenInit);\n  // a trick to force re-initialization of the gallery each time the modal opens,\n  // ensuring that the modal always opens to the correct category.\n  const [modalKey, setModalKey] = useState(0);\n  const [selectedViz, setSelectedViz] = useState(initialValue);\n  const openModal = useCallback(() => {\n    setShowModal(true);\n  }, []);\n  const onSubmit = useCallback(() => {\n    onChange(selectedViz);\n    setShowModal(false);\n  }, [selectedViz, onChange]);\n  const onCancel = useCallback(() => {\n    setShowModal(false);\n    setModalKey((key) => key + 1);\n    // make sure the modal re-opens to the last submitted viz\n    setSelectedViz(initialValue);\n  }, [initialValue]);\n  const labelContent = initialValue ?\n  ((_mountedPluginMetadat = mountedPluginMetadata[initialValue]) == null ? void 0 : _mountedPluginMetadat.name) || `${initialValue}` :\n  t('Select Viz Type');\n  return ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(ControlHeader, props),\n  ___EmotionJSX(Tooltip, { id: \"error-tooltip\", placement: \"right\", title: t('Click to change visualization type') },\n  ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Label, { onClick: openModal, type: labelType },\n  labelContent),\n\n  initialValue && ___EmotionJSX(VizSupportValidation, { vizType: initialValue }))),\n\n\n\n  ___EmotionJSX(UnpaddedModal, { show: showModal, onHide: onCancel, title: t('Select a visualization type'), primaryButtonName: t('Select'), disablePrimaryButton: !selectedViz, onHandledPrimaryAction: onSubmit, maxWidth: `${MAX_ADVISABLE_VIZ_GALLERY_WIDTH}px`, responsive: true },\n\n  ___EmotionJSX(VizTypeGallery, { key: modalKey, selectedViz: selectedViz, onChange: setSelectedViz })));\n\n\n};\nVizTypeControl.propTypes = propTypes;\nVizTypeControl.defaultProps = defaultProps;\nexport default VizTypeControl;","map":null,"metadata":{},"sourceType":"module"}