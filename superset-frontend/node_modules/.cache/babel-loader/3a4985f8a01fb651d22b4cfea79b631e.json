{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ErrorTypeEnum } from 'src/components/ErrorMessage/types';\nimport COMMON_ERR_MESSAGES from './errorMessages';\nexport function parseErrorJson(responseObject) {\n  let error = { ...responseObject };\n  // Backwards compatibility for old error renderers with the new error object\n  if (error.errors && error.errors.length > 0) {var _error$errors$, _error$errors$$extra;\n    error.error = error.description = error.errors[0].message;\n    error.link = (_error$errors$ = error.errors[0]) == null ? void 0 : (_error$errors$$extra = _error$errors$.extra) == null ? void 0 : _error$errors$$extra.link;\n  }\n  if (error.stack) {\n    error = {\n      ...error,\n      error: t('Unexpected error: ') + (\n      error.description || t('(no description, click to see stack trace)')),\n      stacktrace: error.stack };\n\n  } else\n  if (error.responseText && error.responseText.indexOf('CSRF') >= 0) {\n    error = {\n      ...error,\n      error: t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT) };\n\n  }\n  return { ...error, error: error.error }; // explicit ClientErrorObject\n}\nexport function getClientErrorObject(response) {\n  // takes a SupersetClientResponse as input, attempts to read response as Json if possible,\n  // and returns a Promise that resolves to a plain object with error key and text value.\n  return new Promise((resolve) => {\n    if (typeof response === 'string') {\n      resolve({ error: response });\n    } else\n    {\n      const responseObject = response instanceof Response ? response : response.response;\n      if (responseObject && !responseObject.bodyUsed) {\n        // attempt to read the body as json, and fallback to text. we must clone the\n        // response in order to fallback to .text() because Response is single-read\n        responseObject.\n        clone().\n        json().\n        then((errorJson) => {\n          const error = { ...responseObject, ...errorJson };\n          resolve(parseErrorJson(error));\n        }).\n        catch(() => {\n          // fall back to reading as text\n          responseObject.text().then((errorText) => {\n            resolve({ ...responseObject, error: errorText });\n          });\n        });\n      } else\n      if ('statusText' in response &&\n      response.statusText === 'timeout' &&\n      'timeout' in response) {\n        resolve({\n          ...responseObject,\n          error: 'Request timed out',\n          errors: [\n          {\n            error_type: ErrorTypeEnum.FRONTEND_TIMEOUT_ERROR,\n            extra: {\n              timeout: response.timeout / 1000,\n              issue_codes: [\n              {\n                code: 1000,\n                message: t('Issue 1000 - The dataset is too large to query.') },\n\n              {\n                code: 1001,\n                message: t('Issue 1001 - The database is under an unusual load.') }] },\n\n\n\n            level: 'error',\n            message: 'Request timed out' }] });\n\n\n\n      } else\n      {\n        // fall back to Response.statusText or generic error of we cannot read the response\n        let error = response.statusText || response.message;\n        if (!error) {\n          // eslint-disable-next-line no-console\n          console.error('non-standard error:', response);\n          error = t('An error occurred');\n        }\n        resolve({\n          ...responseObject,\n          error });\n\n      }\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}