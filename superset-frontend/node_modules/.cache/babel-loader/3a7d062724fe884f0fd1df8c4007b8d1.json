{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, styled, supersetTheme } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport { DropdownButton } from 'src/components/DropdownButton';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst buildText = (shouldShowStopButton, selectedText) => {\n  if (shouldShowStopButton) {\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"i\", { className: \"fa fa-stop\" }), \" \", t('Stop'));\n\n  }\n  if (selectedText) {\n    return t('Run selection');\n  }\n  return t('Run');\n};\nconst onClick = (shouldShowStopButton, allowAsync, runQuery = () => undefined, stopQuery = () => {}) => {\n  if (shouldShowStopButton)\n  return stopQuery();\n  if (allowAsync) {\n    return runQuery(true);\n  }\n  return runQuery(false);\n};\nconst StyledButton = styled.span`\n  button {\n    line-height: 13px;\n    // this is to over ride a previous transition built into the component\n    transition: background-color 0ms;\n    &:last-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n    span[name='caret-down'] {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * -2}px;\n    }\n  }\n`;\nconst RunQueryActionButton = ({ allowAsync = false, queryState, selectedText, sql = '', overlayCreateAsMenu, runQuery, stopQuery }) => {\n  const shouldShowStopBtn = !!queryState && ['running', 'pending'].indexOf(queryState) > -1;\n  const ButtonComponent = overlayCreateAsMenu ?\n  DropdownButton :\n  Button;\n  const isDisabled = !sql.trim();\n  return ___EmotionJSX(StyledButton, null,\n  ___EmotionJSX(ButtonComponent, _extends({ onClick: () => onClick(shouldShowStopBtn, allowAsync, runQuery, stopQuery), disabled: isDisabled, tooltip: !isDisabled && (\n    shouldShowStopBtn ?\n    t('Stop running (Ctrl + x)') :\n    t('Run query (Ctrl + Return)')), cta: true }, overlayCreateAsMenu ?\n  {\n    overlay: overlayCreateAsMenu,\n    icon: ___EmotionJSX(Icons.CaretDown, { iconColor: isDisabled ?\n      supersetTheme.colors.grayscale.base :\n      supersetTheme.colors.grayscale.light5, name: \"caret-down\" }),\n    trigger: 'click' } :\n\n  { buttonStyle: 'primary' }),\n  buildText(shouldShowStopBtn, selectedText)));\n\n\n};\nexport default RunQueryActionButton;","map":null,"metadata":{},"sourceType":"module"}