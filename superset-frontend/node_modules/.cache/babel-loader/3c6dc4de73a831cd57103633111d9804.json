{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport columnType from './columnType';\nimport adhocMetricType from './adhocMetricType';\nimport { StyledColumnOption } from '../../optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  option: PropTypes.oneOfType([\n  columnType,\n  PropTypes.shape({ saved_metric_name: PropTypes.string.isRequired }),\n  adhocMetricType]).\n  isRequired };\n\n\nexport default function FilterDefinitionOption({ option }) {\n  if (option.saved_metric_name) {\n    return (\n      ___EmotionJSX(StyledColumnOption, {\n        column: { column_name: option.saved_metric_name, type: 'expression' },\n        showType: true }));\n\n\n  }\n  if (option.column_name) {\n    return ___EmotionJSX(StyledColumnOption, { column: option, showType: true });\n  }\n  if (option.label) {\n    return (\n      ___EmotionJSX(StyledColumnOption, {\n        column: { column_name: option.label, type: 'expression' },\n        showType: true }));\n\n\n  }\n  return null;\n}\nFilterDefinitionOption.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}