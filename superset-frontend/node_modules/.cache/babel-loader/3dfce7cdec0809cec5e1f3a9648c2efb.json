{"ast":null,"code":"import _URLSearchParams from \"@babel/runtime-corejs3/core-js-stable/url-search-params\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * 'License'); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\nimport { getClientErrorObject } from './getClientErrorObject';\nexport function getUrlParam({ name, type }) {\n  const urlParam = new _URLSearchParams(window.location.search).get(name);\n  switch (type) {\n    case 'number':\n      if (!urlParam) {\n        return null;\n      }\n      if (urlParam === 'true') {\n        return 1;\n      }\n      if (urlParam === 'false') {\n        return 0;\n      }\n      if (!Number.isNaN(Number(urlParam))) {\n        return Number(urlParam);\n      }\n      return null;\n    case 'object':\n      if (!urlParam) {\n        return null;\n      }\n      return JSON.parse(urlParam);\n    case 'boolean':\n      if (!urlParam) {\n        return null;\n      }\n      return urlParam !== 'false' && urlParam !== '0';\n    case 'rison':\n      if (!urlParam) {\n        return null;\n      }\n      try {\n        return rison.decode(urlParam);\n      }\n      catch {\n        return null;\n      }\n    default:\n      return urlParam;}\n\n}\nexport function getShortUrl(longUrl) {\n  return SupersetClient.post({\n    endpoint: '/r/shortner/',\n    postPayload: { data: `/${longUrl}` },\n    parseMethod: 'text',\n    stringify: false // the url saves with an extra set of string quotes without this\n  }).\n  then(({ text }) => text).\n  catch((response) =>\n  // @ts-ignore\n  getClientErrorObject(response).then(({ error, statusText }) => Promise.reject(error || statusText)));\n}","map":null,"metadata":{},"sourceType":"module"}