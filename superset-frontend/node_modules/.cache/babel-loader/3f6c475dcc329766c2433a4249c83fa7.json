{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, t } from '@superset-ui/core';\nimport { connect } from 'react-redux';\nimport { LineEditableTabs } from 'src/components/Tabs';\nimport { LOG_ACTIONS_SELECT_DASHBOARD_TAB } from 'src/logger/LogUtils';\nimport { Modal } from 'src/common/components';\nimport DragDroppable from '../dnd/DragDroppable';\nimport DragHandle from '../dnd/DragHandle';\nimport DashboardComponent from '../../containers/DashboardComponent';\nimport DeleteComponentButton from '../DeleteComponentButton';\nimport HoverMenu from '../menu/HoverMenu';\nimport findTabIndexByComponentId from '../../util/findTabIndexByComponentId';\nimport getDirectPathToTabIndex from '../../util/getDirectPathToTabIndex';\nimport getLeafComponentIdFromPath from '../../util/getLeafComponentIdFromPath';\nimport { componentShape } from '../../util/propShapes';\nimport { NEW_TAB_ID, DASHBOARD_ROOT_ID } from '../../util/constants';\nimport { RENDER_TAB, RENDER_TAB_CONTENT } from './Tab';\nimport { TABS_TYPE, TAB_TYPE } from '../../util/componentTypes';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  depth: PropTypes.number.isRequired,\n  renderTabContent: PropTypes.bool, // whether to render tabs + content or just tabs\n  editMode: PropTypes.bool.isRequired,\n  renderHoverMenu: PropTypes.bool,\n  directPathToChild: PropTypes.arrayOf(PropTypes.string),\n\n  // actions (from DashboardComponent.jsx)\n  logEvent: PropTypes.func.isRequired,\n  setActiveTabs: PropTypes.func,\n\n  // grid related\n  availableColumnCount: PropTypes.number,\n  columnWidth: PropTypes.number,\n  onResizeStart: PropTypes.func,\n  onResize: PropTypes.func,\n  onResizeStop: PropTypes.func,\n\n  // dnd\n  createComponent: PropTypes.func.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  onChangeTab: PropTypes.func.isRequired,\n  deleteComponent: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  renderTabContent: true,\n  renderHoverMenu: true,\n  availableColumnCount: 0,\n  columnWidth: 0,\n  directPathToChild: [],\n  setActiveTabs() {},\n  onResizeStart() {},\n  onResize() {},\n  onResizeStop() {} };\n\n\nconst StyledTabsContainer = styled.div`\n  width: 100%;\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n\n  .dashboard-component-tabs-content {\n    min-height: ${({ theme }) => theme.gridUnit * 12}px;\n    margin-top: ${({ theme }) => theme.gridUnit / 4}px;\n    position: relative;\n  }\n\n  .ant-tabs {\n    overflow: visible;\n\n    .ant-tabs-nav-wrap {\n      min-height: ${({ theme }) => theme.gridUnit * 12.5}px;\n    }\n\n    .ant-tabs-content-holder {\n      overflow: visible;\n    }\n  }\n\n  div .ant-tabs-tab-btn {\n    text-transform: none;\n  }\n`;\n\nexport class Tabs extends React.PureComponent {\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    showDeleteConfirmModal = (key) => {\n      const { component, deleteComponent } = this.props;\n      Modal.confirm({\n        title: t('Delete dashboard tab?'),\n        content:\n        ___EmotionJSX(\"span\", null, \"Deleting a tab will remove all content within it. You may still reverse this action with the \",\n\n        ___EmotionJSX(\"b\", null, \"undo\"), \" button (cmd + z) until you save your changes.\"),\n\n\n\n        onOk: () => {\n          deleteComponent(key, component.id);\n          const tabIndex = component.children.indexOf(key);\n          this.handleDeleteTab(tabIndex);\n        },\n        okType: 'danger',\n        okText: 'DELETE',\n        cancelText: 'CANCEL',\n        icon: null });\n\n    };this.\n\n    handleEdit = (key, action) => {\n      const { component, createComponent } = this.props;\n      if (action === 'add') {\n        createComponent({\n          destination: {\n            id: component.id,\n            type: component.type,\n            index: component.children.length },\n\n          dragging: {\n            id: NEW_TAB_ID,\n            type: TAB_TYPE } });\n\n\n      } else if (action === 'remove') {\n        this.showDeleteConfirmModal(key);\n      }\n    };const _tabIndex = Math.max(0, findTabIndexByComponentId({ currentComponent: props.component, directPathToChild: props.directPathToChild }));const { children: tabIds } = props.component;const activeKey = tabIds[_tabIndex];this.state = { tabIndex: _tabIndex, activeKey };this.handleClickTab = this.handleClickTab.bind(this);this.handleDeleteComponent = this.handleDeleteComponent.bind(this);this.handleDeleteTab = this.handleDeleteTab.bind(this);this.handleDropOnTab = this.handleDropOnTab.bind(this);this.handleDrop = this.handleDrop.bind(this);}componentDidMount() {this.props.setActiveTabs(this.state.activeKey);}componentDidUpdate(prevProps, prevState) {if (prevState.activeKey !== this.state.activeKey) {this.props.setActiveTabs(this.state.activeKey, prevState.activeKey);}}UNSAFE_componentWillReceiveProps(nextProps) {const maxIndex = Math.max(0, nextProps.component.children.length - 1);const currTabsIds = this.props.component.children;const nextTabsIds = nextProps.component.children;if (this.state.tabIndex > maxIndex) {this.setState(() => ({ tabIndex: maxIndex }));}if (nextTabsIds.length) {const lastTabId = nextTabsIds[nextTabsIds.length - 1]; // if a new tab is added focus on it immediately\n      if (nextTabsIds.length > currTabsIds.length) {// a new tab's path may be empty, here also need to set tabIndex\n        this.setState(() => ({ activeKey: lastTabId, tabIndex: maxIndex }));} // if a tab is removed focus on the first\n      if (nextTabsIds.length < currTabsIds.length) {this.setState(() => ({ activeKey: nextTabsIds[0] }));}}if (nextProps.isComponentVisible) {const nextFocusComponent = getLeafComponentIdFromPath(nextProps.directPathToChild);const currentFocusComponent = getLeafComponentIdFromPath(this.props.directPathToChild);if (nextFocusComponent !== currentFocusComponent) {const nextTabIndex = findTabIndexByComponentId({ currentComponent: nextProps.component, directPathToChild: nextProps.directPathToChild }); // make sure nextFocusComponent is under this tabs component\n        if (nextTabIndex > -1 && nextTabIndex !== this.state.tabIndex) {this.setState(() => ({ tabIndex: nextTabIndex, activeKey: nextTabsIds[nextTabIndex] }));}}}}handleClickTab(tabIndex) {const { component } = this.props;const { children: tabIds } = component;\n\n    if (tabIndex !== this.state.tabIndex) {\n      const pathToTabIndex = getDirectPathToTabIndex(component, tabIndex);\n      const targetTabId = pathToTabIndex[pathToTabIndex.length - 1];\n      this.props.logEvent(LOG_ACTIONS_SELECT_DASHBOARD_TAB, {\n        target_id: targetTabId,\n        index: tabIndex });\n\n\n      this.props.onChangeTab({ pathToTabIndex });\n    }\n    this.setState(() => ({ activeKey: tabIds[tabIndex] }));\n  }\n\n  handleDeleteComponent() {\n    const { deleteComponent, id, parentId } = this.props;\n    deleteComponent(id, parentId);\n  }\n\n  handleDeleteTab(tabIndex) {\n    this.handleClickTab(Math.max(0, tabIndex - 1));\n  }\n\n  handleDropOnTab(dropResult) {\n    const { component } = this.props;\n\n    // Ensure dropped tab is visible\n    const { destination } = dropResult;\n    if (destination) {\n      const dropTabIndex =\n      destination.id === component.id ?\n      destination.index // dropped ON tabs\n      : component.children.indexOf(destination.id); // dropped IN tab\n\n      if (dropTabIndex > -1) {\n        setTimeout(() => {\n          this.handleClickTab(dropTabIndex);\n        }, 30);\n      }\n    }\n  }\n\n  handleDrop(dropResult) {\n    if (dropResult.dragging.type !== TABS_TYPE) {\n      this.props.handleComponentDrop(dropResult);\n    }\n  }\n\n  render() {\n    const {\n      depth,\n      component: tabsComponent,\n      parentComponent,\n      index,\n      availableColumnCount,\n      columnWidth,\n      onResizeStart,\n      onResize,\n      onResizeStop,\n      renderTabContent,\n      renderHoverMenu,\n      isComponentVisible: isCurrentTabVisible,\n      editMode,\n      nativeFilters } =\n    this.props;\n\n    const { children: tabIds } = tabsComponent;\n    const { tabIndex: selectedTabIndex, activeKey } = this.state;\n\n    let tabsToHighlight;\n    if (nativeFilters != null && nativeFilters.focusedFilterId) {\n      tabsToHighlight =\n      nativeFilters.filters[nativeFilters.focusedFilterId].tabsInScope;\n    }\n    return (\n      ___EmotionJSX(DragDroppable, {\n        component: tabsComponent,\n        parentComponent: parentComponent,\n        orientation: \"row\",\n        index: index,\n        depth: depth,\n        onDrop: this.handleDrop,\n        editMode: editMode },\n\n      ({\n        dropIndicatorProps: tabsDropIndicatorProps,\n        dragSourceRef: tabsDragSourceRef }) =>\n\n      ___EmotionJSX(StyledTabsContainer, {\n        className: \"dashboard-component dashboard-component-tabs\" },\n\n\n      editMode && renderHoverMenu &&\n      ___EmotionJSX(HoverMenu, { innerRef: tabsDragSourceRef, position: \"left\" },\n      ___EmotionJSX(DragHandle, { position: \"left\" }),\n      ___EmotionJSX(DeleteComponentButton, { onDelete: this.handleDeleteComponent })),\n\n\n\n      ___EmotionJSX(LineEditableTabs, {\n        id: tabsComponent.id,\n        activeKey: activeKey,\n        onChange: (key) => {\n          this.handleClickTab(tabIds.indexOf(key));\n        },\n        onEdit: this.handleEdit,\n\n        type: editMode ? 'editable-card' : 'card' },\n\n      tabIds.map((tabId, tabIndex) => {var _tabsToHighlight;return (\n          ___EmotionJSX(LineEditableTabs.TabPane, {\n            key: tabId,\n            tab:\n            ___EmotionJSX(DashboardComponent, {\n              id: tabId,\n              parentId: tabsComponent.id,\n              depth: depth,\n              index: tabIndex,\n              renderType: RENDER_TAB,\n              availableColumnCount: availableColumnCount,\n              columnWidth: columnWidth,\n              onDropOnTab: this.handleDropOnTab,\n              isFocused: activeKey === tabId,\n              isHighlighted:\n              activeKey !== tabId && ((_tabsToHighlight = tabsToHighlight) == null ? void 0 : _tabsToHighlight.includes(tabId)) }) },\n\n\n\n\n          renderTabContent &&\n          ___EmotionJSX(DashboardComponent, {\n            id: tabId,\n            parentId: tabsComponent.id,\n            depth: depth // see isValidChild.js for why tabs don't increment child depth\n            , index: tabIndex,\n            renderType: RENDER_TAB_CONTENT,\n            availableColumnCount: availableColumnCount,\n            columnWidth: columnWidth,\n            onResizeStart: onResizeStart,\n            onResize: onResize,\n            onResizeStop: onResizeStop,\n            onDropOnTab: this.handleDropOnTab,\n            isComponentVisible:\n            selectedTabIndex === tabIndex && isCurrentTabVisible })));})),\n\n\n\n\n\n\n\n\n      tabsDropIndicatorProps &&\n      parentComponent.id !== DASHBOARD_ROOT_ID &&\n      ___EmotionJSX(\"div\", tabsDropIndicatorProps))));\n\n\n\n\n\n  }}\n\n\nTabs.propTypes = propTypes;\nTabs.defaultProps = defaultProps;\n\nfunction mapStateToProps(state) {\n  return {\n    nativeFilters: state.nativeFilters,\n    directPathToChild: state.dashboardState.directPathToChild };\n\n}\nexport default connect(mapStateToProps)(Tabs);","map":null,"metadata":{},"sourceType":"module"}