{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n    }\n  `}\n`;\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst TableOption = ({ table }) => {\n  const { label, type, extra } = table;\n  return ___EmotionJSX(TableLabel, { title: label },\n  type === 'view' ? ___EmotionJSX(Icons.Eye, { iconSize: \"m\" }) : ___EmotionJSX(Icons.Table, { iconSize: \"m\" }),\n  (extra == null ? void 0 : extra.certification) && ___EmotionJSX(CertifiedIcon, { certifiedBy: extra.certification.certified_by, details: extra.certification.details, size: \"l\" }),\n  (extra == null ? void 0 : extra.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown, size: \"l\" }),\n  label);\n\n};\nconst TableSelector = ({ database, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onSchemaChange, onSchemasLoad, onTableChange, onTablesLoad, readOnly = false, schema, sqlLabMode = true, tableName }) => {\n  const [currentDatabase, setCurrentDatabase] = useState(database);\n  const [currentSchema, setCurrentSchema] = useState(schema);\n  const [currentTable, setCurrentTable] = useState();\n  const [refresh, setRefresh] = useState(0);\n  const [previousRefresh, setPreviousRefresh] = useState(0);\n  const [loadingTables, setLoadingTables] = useState(false);\n  const [tableOptions, setTableOptions] = useState([]);\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentDatabase(undefined);\n      setCurrentSchema(undefined);\n      setCurrentTable(undefined);\n    }\n  }, [database]);\n  useEffect(() => {\n    if (currentDatabase && currentSchema) {\n      setLoadingTables(true);\n      const encodedSchema = encodeURIComponent(currentSchema);\n      const forceRefresh = refresh !== previousRefresh;\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      const endpoint = encodeURI(`/superset/tables/${currentDatabase.id}/${encodedSchema}/undefined/${forceRefresh}/`);\n      if (previousRefresh !== refresh) {\n        setPreviousRefresh(refresh);\n      }\n      SupersetClient.get({ endpoint }).\n      then(({ json }) => {\n        const options = [];\n        let currentTable;\n        json.options.forEach((table) => {\n          const option = {\n            value: table.value,\n            label: ___EmotionJSX(TableOption, { table: table }),\n            text: table.label };\n\n          options.push(option);\n          if (table.label === tableName) {\n            currentTable = option;\n          }\n        });\n        if (onTablesLoad) {\n          onTablesLoad(json.options);\n        }\n        setTableOptions(options.sort((a, b) => a.text.localeCompare(b.text)));\n        setCurrentTable(currentTable);\n        setLoadingTables(false);\n      }).\n      catch((e) => {\n        setLoadingTables(false);\n        handleError(t('There was an error loading the tables'));\n      });\n    }\n    // We are using the refresh state to re-trigger the query\n    // previousRefresh should be out of dependencies array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDatabase, currentSchema, onTablesLoad, refresh]);\n  function renderSelectRow(select, refreshBtn) {\n    return ___EmotionJSX(\"div\", { className: \"section\" },\n    ___EmotionJSX(\"span\", { className: \"select\" }, select),\n    ___EmotionJSX(\"span\", { className: \"refresh\" }, refreshBtn));\n\n  }\n  const internalTableChange = (table) => {\n    setCurrentTable(table);\n    if (onTableChange && currentSchema) {\n      onTableChange(table == null ? void 0 : table.value, currentSchema);\n    }\n  };\n  const internalDbChange = (db) => {\n    setCurrentDatabase(db);\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n  const internalSchemaChange = (schema) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    internalTableChange(undefined);\n  };\n  function renderDatabaseSelector() {\n    return ___EmotionJSX(DatabaseSelector, { key: currentDatabase == null ? void 0 : currentDatabase.id, db: currentDatabase, formMode: formMode, getDbList: getDbList, handleError: handleError, onDbChange: readOnly ? undefined : internalDbChange, onSchemaChange: readOnly ? undefined : internalSchemaChange, onSchemasLoad: onSchemasLoad, schema: currentSchema, sqlLabMode: sqlLabMode, isDatabaseSelectEnabled: isDatabaseSelectEnabled && !readOnly, readOnly: readOnly });\n  }\n  const handleFilterOption = useMemo(() => (search, option) => {\n    const searchValue = search.trim().toLowerCase();\n    const { text } = option;\n    return text.toLowerCase().includes(searchValue);\n  }, []);\n  function renderTableSelect() {\n    const disabled = currentSchema && !formMode && readOnly ||\n    !currentSchema && !(database != null && database.allow_multi_schema_metadata_fetch);\n    const header = sqlLabMode ? ___EmotionJSX(FormLabel, null, t('See table schema')) : ___EmotionJSX(FormLabel, null, t('Table'));\n    const select = ___EmotionJSX(Select, { ariaLabel: t('Select table or type table name'), disabled: disabled, filterOption: handleFilterOption, header: header, labelInValue: true, lazyLoading: false, loading: loadingTables, name: \"select-table\", onChange: (table) => internalTableChange(table), options: tableOptions, placeholder: t('Select table or type table name'), showSearch: true, value: currentTable });\n    const refreshLabel = !formMode && !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => setRefresh(refresh + 1), tooltipContent: t('Force refresh table list') });\n    return renderSelectRow(select, refreshLabel);\n  }\n  return ___EmotionJSX(TableSelectorWrapper, null,\n  renderDatabaseSelector(),\n  sqlLabMode && !formMode && ___EmotionJSX(\"div\", { className: \"divider\" }),\n  renderTableSelect());\n\n};\nexport default TableSelector;","map":null,"metadata":{},"sourceType":"module"}