{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, GenericDataType } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA } from './types';\nconst buildQuery = (formData, options) => {\n  const { search, coltypeMap } = (options == null ? void 0 : options.ownState) || {};\n  const { sortAscending, sortMetric } = { ...DEFAULT_FORM_DATA, ...formData };\n  return buildQueryContext(formData, (baseQueryObject) => {\n    const { columns = [], filters = [] } = baseQueryObject;\n    const extraFilters = [];\n    if (search) {\n      columns.forEach((column) => {\n        if (coltypeMap[column] === GenericDataType.STRING) {\n          extraFilters.push({\n            col: column,\n            op: 'ILIKE',\n            val: `%${search}%` });\n\n        } else\n        if (coltypeMap[column] === GenericDataType.NUMERIC &&\n        !Number.isNaN(Number(search))) {\n          // for numeric columns we apply a >= where clause\n          extraFilters.push({\n            col: column,\n            op: '>=',\n            val: Number(search) });\n\n        }\n      });\n    }\n    const sortColumns = sortMetric ? [sortMetric] : columns;\n    const query = [\n    {\n      ...baseQueryObject,\n      groupby: columns,\n      metrics: sortMetric ? [sortMetric] : [],\n      filters: filters.concat(extraFilters),\n      orderby: sortMetric || sortAscending !== undefined ?\n      sortColumns.map((column) => [column, !!sortAscending]) :\n      [] }];\n\n\n    return query;\n  });\n};\nexport default buildQuery;","map":null,"metadata":{},"sourceType":"module"}