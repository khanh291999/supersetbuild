{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from 'src/components/Popover';\nimport { decimal2sexagesimal } from 'geolib';\n\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport TextControl from './TextControl';\nimport ControlHeader from '../ControlHeader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nexport const DEFAULT_VIEWPORT = {\n  longitude: 6.85236157047845,\n  latitude: 31.222656842808707,\n  zoom: 1,\n  bearing: 0,\n  pitch: 0 };\n\n\nconst PARAMS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.shape({\n    longitude: PropTypes.number,\n    latitude: PropTypes.number,\n    zoom: PropTypes.number,\n    bearing: PropTypes.number,\n    pitch: PropTypes.number }),\n\n  default: PropTypes.object,\n  name: PropTypes.string.isRequired };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  default: { type: 'fix', value: 5 },\n  value: DEFAULT_VIEWPORT };\n\n\nexport default class ViewportControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(ctrl, value) {\n    this.props.onChange({\n      ...this.props.value,\n      [ctrl]: value });\n\n  }\n\n  renderTextControl(ctrl) {\n    return (\n      ___EmotionJSX(\"div\", { key: ctrl },\n      ___EmotionJSX(FormLabel, null, ctrl),\n      ___EmotionJSX(TextControl, {\n        value: this.props.value[ctrl],\n        onChange: this.onChange.bind(this, ctrl),\n        isFloat: true })));\n\n\n\n  }\n\n  renderPopover() {\n    return (\n      ___EmotionJSX(\"div\", { id: `filter-popover-${this.props.name}` },\n      PARAMS.map((ctrl) => this.renderTextControl(ctrl))));\n\n\n  }\n\n  renderLabel() {\n    if (this.props.value.longitude && this.props.value.latitude) {\n      return `${decimal2sexagesimal(\n      this.props.value.longitude)\n      } | ${decimal2sexagesimal(this.props.value.latitude)}`;\n    }\n    return 'N/A';\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, this.props),\n      ___EmotionJSX(Popover, {\n        container: document.body,\n        trigger: \"click\",\n        placement: \"right\",\n        content: this.renderPopover(),\n        title: \"Viewport\" },\n\n      ___EmotionJSX(Label, { className: \"pointer\" }, this.renderLabel()))));\n\n\n\n  }}\n\n\nViewportControl.propTypes = propTypes;\nViewportControl.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}