{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _debounce from \"lodash/debounce\";import \"core-js/modules/es.string.replace.js\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { matchSorter, rankings } from 'match-sorter';\nimport { css, styled, t } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport { Input } from 'src/common/components';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport Control from 'src/explore/components/Control';\nimport DatasourcePanelDragOption from './DatasourcePanelDragOption';\nimport { DndItemType } from '../DndItemType';\nimport { StyledColumnOption, StyledMetricOption } from '../optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Button = styled.button`\n  background: none;\n  border: none;\n  text-decoration: underline;\n  color: ${({ theme }) => theme.colors.primary.dark1};\n`;\nconst ButtonContainer = styled.div`\n  text-align: center;\n  padding-top: 2px;\n`;\nconst DatasourceContainer = styled.div`\n  ${({ theme }) => css`\n    background-color: ${theme.colors.grayscale.light4};\n    position: relative;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    .ant-collapse {\n      height: auto;\n    }\n    .field-selections {\n      padding: 0 0 ${4 * theme.gridUnit}px;\n      overflow: auto;\n    }\n    .field-length {\n      margin-bottom: ${theme.gridUnit * 2}px;\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.light1};\n    }\n    .form-control.input-md {\n      width: calc(100% - ${theme.gridUnit * 4}px);\n      height: ${theme.gridUnit * 8}px;\n      margin: ${theme.gridUnit * 2}px auto;\n    }\n    .type-label {\n      font-weight: ${theme.typography.weights.light};\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.base};\n    }\n    .Control {\n      padding-bottom: 0;\n    }\n  `};\n`;\nconst LabelWrapper = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  & > span {\n    white-space: nowrap;\n  }\n\n  .option-label {\n    display: inline;\n  }\n\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\nconst LabelContainer = (props) => {\n  const labelRef = useRef(null);\n  const [showTooltip, setShowTooltip] = useState(true);\n  const isLabelTruncated = () => !!(labelRef &&\n  labelRef.current &&\n  labelRef.current.scrollWidth > labelRef.current.clientWidth);\n  const handleShowTooltip = () => {\n    const shouldShowTooltip = isLabelTruncated();\n    if (shouldShowTooltip !== showTooltip) {\n      setShowTooltip(shouldShowTooltip);\n    }\n  };\n  const handleResetTooltip = () => {\n    setShowTooltip(true);\n  };\n  const extendedProps = {\n    labelRef,\n    showTooltip };\n\n  return ___EmotionJSX(LabelWrapper, { onMouseEnter: handleShowTooltip, onMouseLeave: handleResetTooltip, className: props.className }, /*#__PURE__*/\n  React.cloneElement(props.children, extendedProps));\n\n};\nconst enableExploreDnd = isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP);\nexport default function DataSourcePanel({ datasource, controls: { datasource: datasourceControl }, actions }) {\n  const { columns: _columns, metrics } = datasource;\n  // display temporal column first\n  const columns = useMemo(() => [..._columns].sort((col1, col2) => {\n    if (col1.is_dttm && !col2.is_dttm) {\n      return -1;\n    }\n    if (col2.is_dttm && !col1.is_dttm) {\n      return 1;\n    }\n    return 0;\n  }), [_columns]);\n  const [inputValue, setInputValue] = useState('');\n  const [lists, setList] = useState({\n    columns,\n    metrics });\n\n  const [showAllMetrics, setShowAllMetrics] = useState(false);\n  const [showAllColumns, setShowAllColumns] = useState(false);\n  const DEFAULT_MAX_COLUMNS_LENGTH = 50;\n  const DEFAULT_MAX_METRICS_LENGTH = 50;\n  const search = useMemo(() => _debounce((value) => {\n    if (value === '') {\n      setList({ columns, metrics });\n      return;\n    }\n    setList({\n      columns: matchSorter(columns, value, {\n        keys: [\n        {\n          key: 'verbose_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: 'column_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: (item) => [item.description, item.expression].map((x) => (x == null ? void 0 : x.replace(/[_\\n\\s]+/g, ' ')) || ''),\n          threshold: rankings.CONTAINS,\n          maxRanking: rankings.CONTAINS }],\n\n\n        keepDiacritics: true }),\n\n      metrics: matchSorter(metrics, value, {\n        keys: [\n        {\n          key: 'verbose_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: 'metric_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: (item) => [item.description, item.expression].map((x) => (x == null ? void 0 : x.replace(/[_\\n\\s]+/g, ' ')) || ''),\n          threshold: rankings.CONTAINS,\n          maxRanking: rankings.CONTAINS }],\n\n\n        keepDiacritics: true,\n        baseSort: (a, b) => Number(b.item.is_certified) - Number(a.item.is_certified) ||\n        String(a.rankedValue).localeCompare(b.rankedValue) }) });\n\n\n  }, FAST_DEBOUNCE), [columns, metrics]);\n  useEffect(() => {\n    setList({\n      columns,\n      metrics });\n\n    setInputValue('');\n  }, [columns, datasource, metrics]);\n  const sortCertifiedFirst = (slice) => slice.sort((a, b) => b.is_certified - a.is_certified);\n  const metricSlice = useMemo(() => showAllMetrics ?\n  lists.metrics :\n  lists.metrics.slice(0, DEFAULT_MAX_METRICS_LENGTH), [lists.metrics, showAllMetrics]);\n  const columnSlice = useMemo(() => showAllColumns ?\n  sortCertifiedFirst(lists.columns) :\n  sortCertifiedFirst(lists.columns.slice(0, DEFAULT_MAX_COLUMNS_LENGTH)), [lists.columns, showAllColumns]);\n  const mainBody = useMemo(() => ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Input, { allowClear: true, onChange: (evt) => {\n      setInputValue(evt.target.value);\n      search(evt.target.value);\n    }, value: inputValue, className: \"form-control input-md\", placeholder: t('Search Metrics & Columns') }),\n  ___EmotionJSX(\"div\", { className: \"field-selections\" },\n  ___EmotionJSX(Collapse, { bordered: true, defaultActiveKey: ['metrics', 'column'], expandIconPosition: \"right\", ghost: true },\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"span\", { className: \"header\" }, t('Metrics')), key: \"metrics\" },\n  ___EmotionJSX(\"div\", { className: \"field-length\" },\n  t(`Showing %s of %s`, metricSlice.length, lists.metrics.length)),\n\n  metricSlice.map((m) => ___EmotionJSX(LabelContainer, { key: m.metric_name, className: \"column\" },\n  enableExploreDnd ? ___EmotionJSX(DatasourcePanelDragOption, { value: m, type: DndItemType.Metric }) : ___EmotionJSX(StyledMetricOption, { metric: m, showType: true }))),\n\n  lists.metrics.length > DEFAULT_MAX_METRICS_LENGTH ? ___EmotionJSX(ButtonContainer, null,\n  ___EmotionJSX(Button, { onClick: () => setShowAllMetrics(!showAllMetrics) },\n  showAllMetrics ? t('Show less...') : t('Show all...'))) :\n\n  ___EmotionJSX(React.Fragment, null)),\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"span\", { className: \"header\" }, t('Columns')), key: \"column\" },\n  ___EmotionJSX(\"div\", { className: \"field-length\" },\n  t(`Showing %s of %s`, columnSlice.length, lists.columns.length)),\n\n  columnSlice.map((col) => ___EmotionJSX(LabelContainer, { key: col.column_name, className: \"column\" },\n  enableExploreDnd ? ___EmotionJSX(DatasourcePanelDragOption, { value: col, type: DndItemType.Column }) : ___EmotionJSX(StyledColumnOption, { column: col, showType: true }))),\n\n  lists.columns.length > DEFAULT_MAX_COLUMNS_LENGTH ? ___EmotionJSX(ButtonContainer, null,\n  ___EmotionJSX(Button, { onClick: () => setShowAllColumns(!showAllColumns) },\n  showAllColumns ? t('Show Less...') : t('Show all...'))) :\n\n  ___EmotionJSX(React.Fragment, null))))),\n\n\n\n  [\n  columnSlice,\n  inputValue,\n  lists.columns.length,\n  lists.metrics.length,\n  metricSlice,\n  search,\n  showAllColumns,\n  showAllMetrics]);\n\n  return ___EmotionJSX(DatasourceContainer, null,\n  ___EmotionJSX(Control, _extends({}, datasourceControl, { name: \"datasource\", actions: actions })),\n  datasource.id != null && mainBody);\n\n}","map":null,"metadata":{},"sourceType":"module"}