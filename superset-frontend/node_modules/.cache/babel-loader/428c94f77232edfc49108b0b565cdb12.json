{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { hot } from 'react-hot-loader/root';\nimport { ThemeProvider } from '@superset-ui/core';\nimport {\ninitFeatureFlags,\nisFeatureEnabled,\nFeatureFlag } from\n'src/featureFlags';\nimport getInitialState from './reducers/getInitialState';\nimport rootReducer from './reducers/index';\nimport { initEnhancer } from '../reduxUtils';\nimport App from './components/App';\nimport {\nemptyQueryResults,\nclearQueryEditors } from\n'./utils/reduxStateToLocalStorageHelper';\nimport { BYTES_PER_CHAR, KB_STORAGE } from './constants';\nimport setupApp from '../setup/setupApp';\n\nimport './main.less';\nimport '../assets/stylesheets/reactable-pagination.less';\nimport '../components/FilterableTable/FilterableTableStyles.less';\nimport { theme } from '../preamble';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nsetupApp();\n\nconst appContainer = document.getElementById('app');\nconst bootstrapData = JSON.parse(appContainer.getAttribute('data-bootstrap'));\n\ninitFeatureFlags(bootstrapData.common.feature_flags);\n\nconst initialState = getInitialState(bootstrapData);\nconst sqlLabPersistStateConfig = {\n  paths: ['sqlLab'],\n  config: {\n    slicer: (paths) => (state) => {var _subset$sqlLab;\n      const subset = {};\n      paths.forEach((path) => {\n        // this line is used to remove old data from browser localStorage.\n        // we used to persist all redux state into localStorage, but\n        // it caused configurations passed from server-side got override.\n        // see PR 6257 for details\n        delete state[path].common; // eslint-disable-line no-param-reassign\n        if (path === 'sqlLab') {\n          subset[path] = {\n            ...state[path],\n            queries: emptyQueryResults(state[path].queries),\n            queryEditors: clearQueryEditors(state[path].queryEditors) };\n\n        }\n      });\n\n      if ((_subset$sqlLab = subset.sqlLab) != null && _subset$sqlLab.user) {\n        // Don't persist the user.\n        // User should really not be stored under the \"sqlLab\" field. Oh well.\n        delete subset.sqlLab.user;\n      }\n\n      const data = JSON.stringify(subset);\n      // 2 digit precision\n      const currentSize =\n      Math.round(data.length * BYTES_PER_CHAR / KB_STORAGE * 100) / 100;\n      if (state.localStorageUsageInKilobytes !== currentSize) {\n        state.localStorageUsageInKilobytes = currentSize; // eslint-disable-line no-param-reassign\n      }\n\n      return subset;\n    },\n    merge: (initialState, persistedState = {}) => {\n      const result = {\n        ...initialState,\n        ...persistedState };\n\n      // Filter out any user data that may have been persisted in an older version.\n      // Get user from bootstrap data instead, every time\n      result.sqlLab.user = initialState.sqlLab.user;\n      return result;\n    } } };\n\n\n\nconst store = createStore(\nrootReducer,\ninitialState,\ncompose(\napplyMiddleware(thunkMiddleware),\ninitEnhancer(\n!isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE),\nsqlLabPersistStateConfig)));\n\n\n\n\n// Highlight the navbar menu\nconst menus = document.querySelectorAll('.nav.navbar-nav li.dropdown');\nconst sqlLabMenu = Array.prototype.slice.\napply(menus).\nfind((element) => element.innerText.trim() === 'SQL Lab');\nif (sqlLabMenu) {\n  const classes = sqlLabMenu.getAttribute('class');\n  if (classes.indexOf('active') === -1) {\n    sqlLabMenu.setAttribute('class', `${classes} active`);\n  }\n}\n\nconst Application = () =>\n___EmotionJSX(Provider, { store: store },\n___EmotionJSX(ThemeProvider, { theme: theme },\n___EmotionJSX(App, null)));\n\n\n\n\nexport default Application;","map":null,"metadata":{},"sourceType":"module"}