{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEqual from \"lodash/isEqual\";import _isEmpty from \"lodash/isEmpty\";import \"core-js/modules/es.string.replace.js\";import _URLSearchParams from \"@babel/runtime-corejs3/core-js-stable/url-search-params\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\nimport { styled, t } from '@superset-ui/core';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport cx from 'classnames';\nimport Icons from 'src/components/Icons';\nimport { Tabs } from 'src/common/components';\nimport { useHistory } from 'react-router-dom';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport rison from 'rison';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { updateDataMask, clearDataMask } from 'src/dataMask/actions';\nimport { useImmer } from 'use-immer';\n\nimport { testWithId } from 'src/utils/testUtils';\nimport Loading from 'src/components/Loading';\nimport { getInitialDataMask } from 'src/dataMask/reducer';\nimport { URL_PARAMS } from 'src/constants';\nimport replaceUndefinedByNull from 'src/dashboard/util/replaceUndefinedByNull';\nimport { checkIsApplyDisabled, TabIds } from './utils';\nimport FilterSets from './FilterSets';\nimport { useNativeFiltersDataMask, useFilters, useFilterSets, useFilterUpdates, useInitialization } from './state';\nimport EditSection from './FilterSets/EditSection';\nimport Header from './Header';\nimport FilterControls from './FilterControls/FilterControls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const FILTER_BAR_TEST_ID = 'filter-bar';\nexport const getFilterBarTestId = testWithId(FILTER_BAR_TEST_ID);\nconst BarWrapper = styled.div`\n  width: ${({ theme }) => theme.gridUnit * 8}px;\n\n  & .ant-tabs-top > .ant-tabs-nav {\n    margin: 0;\n  }\n  &.open {\n    width: ${({ width }) => width}px; // arbitrary...\n  }\n`;\nconst Bar = styled.div`\n  & .ant-typography-edit-content {\n    left: 0;\n    margin-top: 0;\n    width: 100%;\n  }\n  position: absolute;\n  top: 0;\n  left: 0;\n  flex-direction: column;\n  flex-grow: 1;\n  width: ${({ width }) => width}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  min-height: 100%;\n  display: none;\n\n  &.open {\n    display: flex;\n  }\n`;\nconst CollapsedBar = styled.div`\n  position: absolute;\n  top: ${({ offset }) => offset}px;\n  left: 0;\n  height: 100%;\n  width: ${({ theme }) => theme.gridUnit * 8}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n  display: none;\n  text-align: center;\n\n  &.open {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  svg {\n    cursor: pointer;\n  }\n`;\nconst StyledCollapseIcon = styled(Icons.Collapse)`\n  color: ${({ theme }) => theme.colors.primary.base};\n  margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n`;\nconst StyledFilterIcon = styled(Icons.Filter)`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nconst StyledTabs = styled(Tabs)`\n  & .ant-tabs-nav-list {\n    width: 100%;\n  }\n  & .ant-tabs-tab {\n    display: flex;\n    justify-content: center;\n    margin: 0;\n    flex: 1;\n  }\n`;\nconst FilterBar = ({ filtersOpen, toggleFiltersBar, directPathToChild, width, height, offset }) => {\n  const history = useHistory();\n  const dataMaskApplied = useNativeFiltersDataMask();\n  const [editFilterSetId, setEditFilterSetId] = useState(null);\n  const [dataMaskSelected, setDataMaskSelected] = useImmer(dataMaskApplied);\n  const dispatch = useDispatch();\n  const filterSets = useFilterSets();\n  const filterSetFilterValues = Object.values(filterSets);\n  const [tab, setTab] = useState(TabIds.AllFilters);\n  const filters = useFilters();\n  const previousFilters = usePrevious(filters);\n  const filterValues = Object.values(filters);\n  const [isFilterSetChanged, setIsFilterSetChanged] = useState(false);\n  const handleFilterSelectionChange = (filter, dataMask) => {\n    setIsFilterSetChanged(tab !== TabIds.AllFilters);\n    setDataMaskSelected((draft) => {var _dataMask$filterState, _dataMaskSelected$fil, _dataMaskSelected$fil2;\n      // force instant updating on initialization for filters with `requiredFirst` is true or instant filters\n      if (\n      // filterState.value === undefined - means that value not initialized\n      ((_dataMask$filterState = dataMask.filterState) == null ? void 0 : _dataMask$filterState.value) !== undefined &&\n      ((_dataMaskSelected$fil = dataMaskSelected[filter.id]) == null ? void 0 : (_dataMaskSelected$fil2 = _dataMaskSelected$fil.filterState) == null ? void 0 : _dataMaskSelected$fil2.value) === undefined &&\n      filter.requiredFirst) {\n        dispatch(updateDataMask(filter.id, dataMask));\n      }\n      draft[filter.id] = {\n        ...getInitialDataMask(filter.id),\n        ...dataMask };\n\n    });\n  };\n  const publishDataMask = useCallback((dataMaskSelected) => {\n    const { location } = history;\n    const { search } = location;\n    const previousParams = new _URLSearchParams(search);\n    const newParams = new _URLSearchParams();\n    previousParams.forEach((value, key) => {\n      if (key !== URL_PARAMS.nativeFilters.name) {\n        newParams.append(key, value);\n      }\n    });\n    newParams.set(URL_PARAMS.nativeFilters.name, rison.encode(replaceUndefinedByNull(dataMaskSelected)));\n    history.replace({\n      search: newParams.toString() });\n\n  }, [history]);\n  useEffect(() => {\n    if (previousFilters) {\n      const updates = {};\n      Object.values(filters).forEach((currentFilter) => {\n        const currentType = currentFilter.filterType;\n        const currentTargets = currentFilter.targets;\n        const currentDataMask = currentFilter.defaultDataMask;\n        const previousFilter = previousFilters == null ? void 0 : previousFilters[currentFilter.id];\n        const previousType = previousFilter == null ? void 0 : previousFilter.filterType;\n        const previousTargets = previousFilter == null ? void 0 : previousFilter.targets;\n        const previousDataMask = previousFilter == null ? void 0 : previousFilter.defaultDataMask;\n        const typeChanged = currentType !== previousType;\n        const targetsChanged = !_isEqual(currentTargets, previousTargets);\n        const dataMaskChanged = !_isEqual(currentDataMask, previousDataMask);\n        if (typeChanged || targetsChanged || dataMaskChanged) {\n          updates[currentFilter.id] = getInitialDataMask(currentFilter.id);\n        }\n      });\n      if (!_isEmpty(updates)) {\n        setDataMaskSelected((draft) => ({ ...draft, ...updates }));\n        Object.keys(updates).forEach((key) => dispatch(clearDataMask(key)));\n      }\n    }\n  }, [JSON.stringify(filters), JSON.stringify(previousFilters)]);\n  useEffect(() => {\n    setDataMaskSelected(() => dataMaskApplied);\n  }, [JSON.stringify(dataMaskApplied), setDataMaskSelected]);\n  const dataMaskAppliedText = JSON.stringify(dataMaskApplied);\n  useEffect(() => {\n    publishDataMask(dataMaskApplied);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataMaskAppliedText, publishDataMask]);\n  const handleApply = () => {\n    const filterIds = Object.keys(dataMaskSelected);\n    filterIds.forEach((filterId) => {\n      if (dataMaskSelected[filterId]) {\n        dispatch(updateDataMask(filterId, dataMaskSelected[filterId]));\n      }\n    });\n  };\n  const handleClearAll = () => {\n    const filterIds = Object.keys(dataMaskSelected);\n    filterIds.forEach((filterId) => {\n      if (dataMaskSelected[filterId]) {\n        dispatch(clearDataMask(filterId));\n      }\n    });\n  };\n  useFilterUpdates(dataMaskSelected, setDataMaskSelected);\n  const isApplyDisabled = checkIsApplyDisabled(dataMaskSelected, dataMaskApplied, filterValues);\n  const isInitialized = useInitialization();\n  return ___EmotionJSX(BarWrapper, _extends({}, getFilterBarTestId(), { className: cx({ open: filtersOpen }), width: width }),\n  ___EmotionJSX(CollapsedBar, _extends({}, getFilterBarTestId('collapsable'), { className: cx({ open: !filtersOpen }), onClick: () => toggleFiltersBar(true), offset: offset }),\n  ___EmotionJSX(StyledCollapseIcon, _extends({}, getFilterBarTestId('expand-button'), { iconSize: \"l\" })),\n  ___EmotionJSX(StyledFilterIcon, _extends({}, getFilterBarTestId('filter-icon'), { iconSize: \"l\" }))),\n\n  ___EmotionJSX(Bar, { className: cx({ open: filtersOpen }), width: width },\n  ___EmotionJSX(Header, { toggleFiltersBar: toggleFiltersBar, onApply: handleApply, onClearAll: handleClearAll, isApplyDisabled: isApplyDisabled, dataMaskSelected: dataMaskSelected, dataMaskApplied: dataMaskApplied }),\n  !isInitialized ? ___EmotionJSX(\"div\", { css: /*#__PURE__*/_css({ height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(Loading, null)) :\n  isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS_SET) ? ___EmotionJSX(StyledTabs, { centered: true, onChange: setTab, defaultActiveKey: TabIds.AllFilters, activeKey: editFilterSetId ? TabIds.AllFilters : undefined },\n  ___EmotionJSX(Tabs.TabPane, { tab: t(`All Filters (${filterValues.length})`), key: TabIds.AllFilters, css: /*#__PURE__*/_css({ overflow: 'auto', height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  editFilterSetId && ___EmotionJSX(EditSection, { dataMaskSelected: dataMaskSelected, disabled: !isApplyDisabled, onCancel: () => setEditFilterSetId(null), filterSetId: editFilterSetId }),\n  ___EmotionJSX(FilterControls, { dataMaskSelected: dataMaskSelected, directPathToChild: directPathToChild, onFilterSelectionChange: handleFilterSelectionChange })),\n\n  ___EmotionJSX(Tabs.TabPane, { disabled: !!editFilterSetId, tab: t(`Filter Sets (${filterSetFilterValues.length})`), key: TabIds.FilterSets, css: /*#__PURE__*/_css({ overflow: 'auto', height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(FilterSets, { onEditFilterSet: setEditFilterSetId, disabled: !isApplyDisabled, dataMaskSelected: dataMaskSelected, isFilterSetChanged: isFilterSetChanged, onFilterSelectionChange: handleFilterSelectionChange }))) :\n\n  ___EmotionJSX(\"div\", { css: /*#__PURE__*/_css({ overflow: 'auto', height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(FilterControls, { dataMaskSelected: dataMaskSelected, directPathToChild: directPathToChild, onFilterSelectionChange: handleFilterSelectionChange }))));\n\n\n\n};\nexport default FilterBar;","map":null,"metadata":{},"sourceType":"module"}