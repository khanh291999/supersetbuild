{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport PropTypes from 'prop-types';\nimport componentTypes from './componentTypes';\nimport backgroundStyleOptions from './backgroundStyleOptions';\nimport headerStyleOptions from './headerStyleOptions';\n\nexport const componentShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(Object.values(componentTypes)).isRequired,\n  parents: PropTypes.arrayOf(PropTypes.string),\n  children: PropTypes.arrayOf(PropTypes.string),\n  meta: PropTypes.shape({\n    // Dimensions\n    width: PropTypes.number,\n    height: PropTypes.number,\n\n    // Header\n    headerSize: PropTypes.oneOf(headerStyleOptions.map((opt) => opt.value)),\n\n    // Row\n    background: PropTypes.oneOf(backgroundStyleOptions.map((opt) => opt.value)),\n\n    // Chart\n    chartId: PropTypes.number }) });\n\n\n\nexport const chartPropShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  chartAlert: PropTypes.string,\n  chartStatus: PropTypes.string,\n  chartUpdateEndTime: PropTypes.number,\n  chartUpdateStartTime: PropTypes.number,\n  latestQueryFormData: PropTypes.object,\n  queryController: PropTypes.shape({ abort: PropTypes.func }),\n  queriesResponse: PropTypes.arrayOf(PropTypes.object),\n  triggerQuery: PropTypes.bool,\n  lastRendered: PropTypes.number });\n\n\nexport const slicePropShape = PropTypes.shape({\n  slice_id: PropTypes.number.isRequired,\n  slice_url: PropTypes.string.isRequired,\n  slice_name: PropTypes.string.isRequired,\n  datasource: PropTypes.string,\n  datasource_name: PropTypes.string,\n  datasource_link: PropTypes.string,\n  changed_on: PropTypes.number.isRequired,\n  modified: PropTypes.string.isRequired,\n  viz_type: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  description_markeddown: PropTypes.string,\n  owners: PropTypes.arrayOf(PropTypes.string) });\n\n\nexport const dashboardFilterPropShape = PropTypes.shape({\n  chartId: PropTypes.number.isRequired,\n  componentId: PropTypes.string.isRequired,\n  filterName: PropTypes.string.isRequired,\n  datasourceId: PropTypes.string.isRequired,\n  directPathToFilter: PropTypes.arrayOf(PropTypes.string).isRequired,\n  isDateFilter: PropTypes.bool.isRequired,\n  isInstantFilter: PropTypes.bool.isRequired,\n  columns: PropTypes.object,\n  labels: PropTypes.object,\n  scopes: PropTypes.object });\n\n\nexport const dashboardStatePropShape = PropTypes.shape({\n  sliceIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  expandedSlices: PropTypes.object,\n  editMode: PropTypes.bool,\n  isPublished: PropTypes.bool.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  updatedColorScheme: PropTypes.bool,\n  hasUnsavedChanges: PropTypes.bool });\n\n\nexport const dashboardInfoPropShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  metadata: PropTypes.object,\n  slug: PropTypes.string,\n  dash_edit_perm: PropTypes.bool.isRequired,\n  dash_save_perm: PropTypes.bool.isRequired,\n  common: PropTypes.object,\n  userId: PropTypes.string.isRequired });\n\n\n/* eslint-disable-next-line  no-undef */\nconst lazyFunction = (f) => () => f().apply(this, arguments);\n\nconst leafType = PropTypes.shape({\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  label: PropTypes.string.isRequired });\n\n\nconst parentShape = {\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  label: PropTypes.string.isRequired,\n  children: PropTypes.arrayOf(\n  PropTypes.oneOfType([\n  PropTypes.shape(lazyFunction(() => parentShape)),\n  leafType])) };\n\n\n\n\nexport const filterScopeSelectorTreeNodePropShape = PropTypes.oneOfType([\nPropTypes.shape(parentShape),\nleafType]);","map":null,"metadata":{},"sourceType":"module"}