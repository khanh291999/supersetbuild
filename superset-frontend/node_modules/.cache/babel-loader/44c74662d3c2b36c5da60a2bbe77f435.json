{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport Badge from 'src/components/Badge';\nimport { t, styled } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\n\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { ConfigEditor } from 'src/components/AsyncAceEditor';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledConfigEditor = styled(ConfigEditor)`\n  &.ace_editor {\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n`;\nfunction TemplateParamsEditor({ code = '{}', language, onChange = () => {} }) {\n  const [parsedJSON, setParsedJSON] = useState({});\n  const [isValid, setIsValid] = useState(true);\n  useEffect(() => {\n    try {\n      setParsedJSON(JSON.parse(code));\n      setIsValid(true);\n    }\n    catch {\n      setParsedJSON({});\n      setIsValid(false);\n    }\n  }, [code]);\n  const modalBody = ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(\"p\", null, \"Assign a set of parameters as\",\n\n  ___EmotionJSX(\"code\", null, \"JSON\"), \"below (example:\",\n\n  ___EmotionJSX(\"code\", null, '{\"my_table\": \"foo\"}'), \"), and they become available in your SQL (example:\",\n\n  ___EmotionJSX(\"code\", null, \"SELECT * FROM \", '{{ my_table }}', \" \"), \") by using\\xA0\",\n  ___EmotionJSX(\"a\", { href: \"https://superset.apache.org/sqllab.html#templating-with-jinja\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"Jinja templating\"),\n\n  ' ', \"syntax.\"),\n\n\n  ___EmotionJSX(StyledConfigEditor, { keywords: [], mode: language, minLines: 25, maxLines: 50, onChange: _debounce(onChange, FAST_DEBOUNCE), width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, value: code }));\n\n  const paramCount = parsedJSON ? Object.keys(parsedJSON).length : 0;\n  return ___EmotionJSX(ModalTrigger, { modalTitle: t('Template parameters'), triggerNode: ___EmotionJSX(Tooltip, { id: \"parameters-tooltip\", placement: \"top\", title: t('Edit template parameters'), trigger: ['hover'] },\n    ___EmotionJSX(\"div\", { role: \"button\" },\n    `${t('Parameters')} `,\n    ___EmotionJSX(Badge, { count: paramCount }),\n    !isValid && ___EmotionJSX(InfoTooltipWithTrigger, { icon: \"exclamation-triangle\", bsStyle: \"danger\", tooltip: t('Invalid JSON'), label: \"invalid-json\" }))),\n\n    modalBody: modalBody });\n}\nexport default TemplateParamsEditor;","map":null,"metadata":{},"sourceType":"module"}