{"ast":null,"code":"import _filter from \"lodash/filter\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { SupersetClient, t } from '@superset-ui/core';\n\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport { TableTabTypes } from 'src/views/CRUD/types';\nimport handleResourceExport from 'src/utils/export';\nimport { useHistory } from 'react-router-dom';\nimport { setInLocalStorage, getFromLocalStorage } from 'src/utils/localStorageHelpers';\nimport { LoadingCards } from 'src/views/CRUD/welcome/Welcome';\nimport { createErrorHandler, CardContainer, PAGE_SIZE } from 'src/views/CRUD/utils';\nimport { HOMEPAGE_DASHBOARD_FILTER } from 'src/views/CRUD/storageKeys';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport DashboardCard from 'src/views/CRUD/dashboard/DashboardCard';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport EmptyState from './EmptyState';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction DashboardTable({ user, addDangerToast, addSuccessToast, mine, showThumbnails, examples }) {\n  const history = useHistory();\n  const filterStore = getFromLocalStorage(HOMEPAGE_DASHBOARD_FILTER, null);\n  const defaultFilter = filterStore || TableTabTypes.EXAMPLES;\n  const filteredExamples = _filter(examples, (obj) => !('viz_type' in obj));\n  const { state: { loading, resourceCollection: dashboards }, setResourceCollection: setDashboards, hasPerm, refreshData, fetchData } = useListViewResource('dashboard', t('dashboard'), addDangerToast, true, defaultFilter === 'Mine' ? mine : filteredExamples, [], false);\n  const dashboardIds = useMemo(() => dashboards.map((c) => c.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('dashboard', dashboardIds, addDangerToast);\n  const [editModal, setEditModal] = useState();\n  const [dashboardFilter, setDashboardFilter] = useState(defaultFilter);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if (loaded || dashboardFilter === 'Favorite') {\n      getData(dashboardFilter);\n    }\n    setLoaded(true);\n  }, [dashboardFilter]);\n  const handleBulkDashboardExport = (dashboardsToExport) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const handleDashboardEdit = (edits) => SupersetClient.get({\n    endpoint: `/api/v1/dashboard/${edits.id}` }).\n  then(({ json = {} }) => {\n    setDashboards(dashboards.map((dashboard) => {\n      if (dashboard.id === json.id) {\n        return json.result;\n      }\n      return dashboard;\n    }));\n  }, createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboards: %s', errMsg))));\n  const getFilters = (filterName) => {\n    const filters = [];\n    if (filterName === 'Mine') {\n      filters.push({\n        id: 'created_by',\n        operator: 'rel_o_m',\n        value: `${user == null ? void 0 : user.userId}` });\n\n    } else\n    if (filterName === 'Favorite') {\n      filters.push({\n        id: 'id',\n        operator: 'dashboard_is_favorite',\n        value: true });\n\n    } else\n    if (filterName === 'Examples') {\n      filters.push({\n        id: 'created_by',\n        operator: 'rel_o_m',\n        value: 0 });\n\n    }\n    return filters;\n  };\n  const menuTabs = [\n  {\n    name: 'Favorite',\n    label: t('Favorite'),\n    onClick: () => {\n      setDashboardFilter(TableTabTypes.FAVORITE);\n      setInLocalStorage(HOMEPAGE_DASHBOARD_FILTER, TableTabTypes.FAVORITE);\n    } },\n\n  {\n    name: 'Mine',\n    label: t('Mine'),\n    onClick: () => {\n      setDashboardFilter(TableTabTypes.MINE);\n      setInLocalStorage(HOMEPAGE_DASHBOARD_FILTER, TableTabTypes.MINE);\n    } }];\n\n\n  if (examples) {\n    menuTabs.push({\n      name: 'Examples',\n      label: t('Examples'),\n      onClick: () => {\n        setDashboardFilter(TableTabTypes.EXAMPLES);\n        setInLocalStorage(HOMEPAGE_DASHBOARD_FILTER, TableTabTypes.EXAMPLES);\n      } });\n\n  }\n  const getData = (filter) => fetchData({\n    pageIndex: 0,\n    pageSize: PAGE_SIZE,\n    sortBy: [\n    {\n      id: 'changed_on_delta_humanized',\n      desc: true }],\n\n\n    filters: getFilters(filter) });\n\n  if (loading)\n  return ___EmotionJSX(LoadingCards, { cover: showThumbnails });\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { activeChild: dashboardFilter, tabs: menuTabs, buttons: [\n    {\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \"Dashboard\"),\n\n\n      buttonStyle: 'tertiary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      } },\n\n    {\n      name: 'View All Â»',\n      buttonStyle: 'link',\n      onClick: () => {\n        const target = dashboardFilter === 'Favorite' ?\n        `/dashboard/list/?filters=(favorite:(label:${t('Yes')},value:!t))` :\n        '/dashboard/list/';\n        history.push(target);\n      } }] }),\n\n\n  editModal && ___EmotionJSX(PropertiesModal, { dashboardId: editModal == null ? void 0 : editModal.id, show: true, onHide: () => setEditModal(undefined), onSubmit: handleDashboardEdit }),\n  dashboards.length > 0 && ___EmotionJSX(CardContainer, { showThumbnails: showThumbnails },\n  dashboards.map((e) => ___EmotionJSX(DashboardCard, { key: e.id, dashboard: e, hasPerm: hasPerm, bulkSelectEnabled: false, showThumbnails: showThumbnails, dashboardFilter: dashboardFilter, refreshData: refreshData, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, userId: user == null ? void 0 : user.userId, loading: loading, openDashboardEditModal: (dashboard) => setEditModal(dashboard), saveFavoriteStatus: saveFavoriteStatus, favoriteStatus: favoriteStatus[e.id], handleBulkDashboardExport: handleBulkDashboardExport }))),\n\n  dashboards.length === 0 && ___EmotionJSX(EmptyState, { tableName: \"DASHBOARDS\", tab: dashboardFilter }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(DashboardTable);","map":null,"metadata":{},"sourceType":"module"}