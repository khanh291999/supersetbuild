{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useCallback, useRef } from 'react';\nimport { t, useTheme } from '@superset-ui/core';\nimport { Input } from 'src/common/components';\nimport { Radio } from 'src/components/Radio';\nimport { CronPicker } from 'src/components/CronPicker';\nimport { StyledInputContainer } from 'src/views/CRUD/alert/AlertReportModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const AlertReportCronScheduler = ({ value, onChange }) => {\n  const theme = useTheme();\n  const inputRef = useRef(null);\n  const [scheduleFormat, setScheduleFormat] = useState('picker');\n  const customSetValue = useCallback((newValue) => {var _inputRef$current;\n    onChange(newValue);\n    (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.setValue(newValue);\n  }, [inputRef, onChange]);\n  const [error, onError] = useState();\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Radio.Group, { onChange: (e) => setScheduleFormat(e.target.value), value: scheduleFormat },\n  ___EmotionJSX(\"div\", { className: \"inline-container add-margin\" },\n  ___EmotionJSX(Radio, { value: \"picker\" }),\n  ___EmotionJSX(CronPicker, { clearButton: false, value: value, setValue: customSetValue, disabled: scheduleFormat !== 'picker', displayError: scheduleFormat === 'picker', onError: onError })),\n\n  ___EmotionJSX(\"div\", { className: \"inline-container add-margin\" },\n  ___EmotionJSX(Radio, { value: \"input\" }),\n  ___EmotionJSX(\"span\", { className: \"input-label\" }, \"CRON Schedule\"),\n  ___EmotionJSX(StyledInputContainer, { className: \"styled-input\" },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Input, { type: \"text\", name: \"crontab\", ref: inputRef, style: error ? { borderColor: theme.colors.error.base } : {}, placeholder: t('CRON expression'), disabled: scheduleFormat !== 'input', onBlur: (event) => {\n      onChange(event.target.value);\n    }, onPressEnter: () => {var _inputRef$current2;\n      onChange(((_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.input.value) || '');\n    } }))))));\n\n\n\n\n\n};","map":null,"metadata":{},"sourceType":"module"}