{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { legacyValidateNumber, legacyValidateInteger } from '@superset-ui/core';\nimport debounce from 'lodash/debounce';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Input } from 'src/common/components';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst safeStringify = (value) => value == null ? '' : String(value);\nexport default class TextControl extends React.Component {\n\n  constructor(props) {\n    super(props);this.initialValue = void 0;this.\n\n\n\n\n\n    onChange = (inputValue) => {var _this$props$onChange, _this$props;\n      let parsedValue = inputValue;\n      // Validation & casting\n      const errors = [];\n      if (inputValue !== '' && this.props.isFloat) {\n        const error = legacyValidateNumber(inputValue);\n        if (error) {\n          errors.push(error);\n        } else\n        {\n          parsedValue = inputValue.match(/.*([.0])$/g) ?\n          inputValue :\n          parseFloat(inputValue);\n        }\n      }\n      if (inputValue !== '' && this.props.isInt) {\n        const error = legacyValidateInteger(inputValue);\n        if (error) {\n          errors.push(error);\n        } else\n        {\n          parsedValue = parseInt(inputValue, 10);\n        }\n      }\n      (_this$props$onChange = (_this$props = this.props).onChange) == null ? void 0 : _this$props$onChange.call(_this$props, parsedValue, errors);\n    };this.\n    debouncedOnChange = debounce((inputValue) => {\n      this.onChange(inputValue);\n    }, FAST_DEBOUNCE);this.\n    onChangeWrapper = (event) => {\n      const { value } = event.target;\n      this.setState({ value }, () => {\n        this.debouncedOnChange(value);\n      });\n    };this.\n    render = () => {\n      let { value } = this.state;\n      if (this.initialValue !== this.props.value) {\n        this.initialValue = this.props.value;\n        value = safeStringify(this.props.value);\n      }\n      return ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, this.props),\n      ___EmotionJSX(Input, { type: \"text\", placeholder: this.props.placeholder, onChange: this.onChangeWrapper, onFocus: this.props.onFocus, value: value, disabled: this.props.disabled, \"aria-label\": this.props.label }));\n\n    };this.initialValue = props.value;this.state = { value: safeStringify(this.initialValue) };}}","map":null,"metadata":{},"sourceType":"module"}