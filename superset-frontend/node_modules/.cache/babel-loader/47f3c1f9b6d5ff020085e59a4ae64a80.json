{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport Modal from 'src/components/Modal';\nimport { useComponentDidMount } from 'src/common/hooks/useComponentDidMount';\nimport { logEvent } from 'src/logger/actions';\nimport { Omnibar } from './Omnibar';\nimport { LOG_ACTIONS_OMNIBAR_TRIGGERED } from '../../logger/LogUtils';\nimport { getDashboards } from './getDashboards';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst OmniModal = styled(Modal)`\n  margin-top: 20%;\n\n  .ant-modal-body {\n    padding: 0;\n    overflow: visible;\n  }\n`;\nexport default function OmniContainer() {\n  const showOmni = useRef();\n  const modalRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const handleLogEvent = (show) => logEvent(LOG_ACTIONS_OMNIBAR_TRIGGERED, {\n    show_omni: show });\n\n  const handleClose = () => {\n    showOmni.current = false;\n    setShowModal(false);\n    handleLogEvent(false);\n  };\n  useComponentDidMount(() => {\n    showOmni.current = false;\n    function handleKeydown(event) {\n      if (!isFeatureEnabled(FeatureFlag.OMNIBAR))\n      return;\n      const controlOrCommand = event.ctrlKey || event.metaKey;\n      const isOk = ['KeyK'].includes(event.code);\n      const isEsc = event.key === 'Escape';\n      if (isEsc && showOmni.current) {\n        handleClose();\n        return;\n      }\n      if (controlOrCommand && isOk) {\n        showOmni.current = !showOmni.current;\n        setShowModal(showOmni.current);\n        handleLogEvent(!!showOmni.current);\n      }\n    }\n    function handleClickOutside(event) {\n      if (modalRef.current &&\n      !modalRef.current.contains(event.target)) {\n        handleClose();\n      }\n    }\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('keydown', handleKeydown);\n    return () => {\n      document.removeEventListener('keydown', handleKeydown);\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  });\n  return ___EmotionJSX(OmniModal, { title: \"\", show: showModal, hideFooter: true, closable: false, onHide: () => {}, destroyOnClose: true },\n  ___EmotionJSX(\"div\", { ref: modalRef },\n  ___EmotionJSX(Omnibar, { id: \"InputOmnibar\", placeholder: t('Search all dashboards'), extensions: [getDashboards] })));\n\n\n}","map":null,"metadata":{},"sourceType":"module"}