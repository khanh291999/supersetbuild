{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport var ResourceStatus;\n(function (ResourceStatus) {\n  ResourceStatus[\"LOADING\"] = \"loading\";\n  ResourceStatus[\"COMPLETE\"] = \"complete\";\n  ResourceStatus[\"ERROR\"] = \"error\";\n})(ResourceStatus || (ResourceStatus = {}));\nconst initialState = {\n  status: ResourceStatus.LOADING,\n  result: null,\n  error: null };\n\n/**\n * A general-purpose hook to fetch the response from an endpoint.\n * Returns the full response body from the API, including metadata.\n *\n * Note: You likely want {useApiV1Resource} instead of this!\n *\n * TODO Store the state in redux or something, share state between hook instances.\n *\n * TODO Include a function in the returned resource object to refresh the data.\n *\n * A core design decision here is composition > configuration,\n * and every hook should only have one job.\n * Please address new needs with new hooks if possible,\n * rather than adding config options to this hook.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiResourceFullBody(endpoint) {\n  const [resource, setResource] = useState(initialState);\n  const cancelRef = useRef(() => {});\n  useEffect(() => {\n    // If refresh is implemented, this will need to change.\n    // The previous values should stay during refresh.\n    setResource(initialState);\n    // when this effect runs, the endpoint has changed.\n    // cancel any current calls so that state doesn't get messed up.\n    cancelRef.current();\n    let cancelled = false;\n    cancelRef.current = () => {\n      cancelled = true;\n    };\n    const fetchResource = makeApi({\n      method: 'GET',\n      endpoint });\n\n    fetchResource({}).\n    then((result) => {\n      if (!cancelled) {\n        setResource({\n          status: ResourceStatus.COMPLETE,\n          result,\n          error: null });\n\n      }\n    }).\n    catch((error) => {\n      if (!cancelled) {\n        setResource({\n          status: ResourceStatus.ERROR,\n          result: null,\n          error });\n\n      }\n    });\n    // Cancel the request when the component un-mounts\n    return () => {\n      cancelled = true;\n    };\n  }, [endpoint]);\n  return resource;\n}\n/**\n * For when you want to transform the result of an api resource hook before using it.\n *\n * @param resource the Resource object returned from useApiV1Resource\n * @param transformFn a callback that transforms the result object into the shape you want.\n * Make sure to use a persistent function for this so it doesn't constantly recalculate!\n */\nexport function useTransformedResource(resource, transformFn) {\n  return useMemo(() => {\n    if (resource.status !== ResourceStatus.COMPLETE) {\n      // While incomplete, there is no result - no need to transform.\n      return resource;\n    }\n    return {\n      ...resource,\n      result: transformFn(resource.result) };\n\n  }, [resource, transformFn]);\n}\n// returns the \"result\" field from a fetched API v1 endpoint\nconst extractInnerResult = (responseBody) => responseBody.result;\n/**\n * A general-purpose hook to fetch a Superset resource from a v1 API endpoint.\n * Handles request lifecycle and async logic so you don't have to.\n *\n * This returns the data under the \"result\" field in the API response body.\n * If you need the full response body, use {useFullApiResource} instead.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiV1Resource(endpoint) {\n  return useTransformedResource(useApiResourceFullBody(endpoint), extractInnerResult);\n}","map":null,"metadata":{},"sourceType":"module"}