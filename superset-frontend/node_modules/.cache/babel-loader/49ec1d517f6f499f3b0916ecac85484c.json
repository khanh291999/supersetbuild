{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { styled, t, css, useTheme } from '@superset-ui/core';\n\nimport { Resizable } from 're-resizable';\n\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport { Global } from '@emotion/react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport Icons from 'src/components/Icons';\nimport {\ngetFromLocalStorage,\nsetInLocalStorage } from\n'src/utils/localStorageHelpers';\nimport { URL_PARAMS } from 'src/constants';\nimport cx from 'classnames';\nimport * as chartActions from 'src/chart/chartAction';\nimport { fetchDatasourceMetadata } from 'src/dashboard/actions/datasources';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport { mergeExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport ExploreChartPanel from './ExploreChartPanel';\nimport ConnectedControlPanelsContainer from './ControlPanelsContainer';\nimport SaveModal from './SaveModal';\nimport QueryAndSaveBtns from './QueryAndSaveBtns';\nimport DataSourcePanel from './DatasourcePanel';\nimport { getExploreLongUrl } from '../exploreUtils';\nimport { areObjectsEqual } from '../../reduxUtils';\nimport { getFormDataFromControls } from '../controlUtils';\nimport * as exploreActions from '../actions/exploreActions';\nimport * as saveModalActions from '../actions/saveModalActions';\nimport * as logActions from '../../logger/actions';\nimport {\nLOG_ACTIONS_MOUNT_EXPLORER,\nLOG_ACTIONS_CHANGE_EXPLORE_CONTROLS } from\n'../../logger/LogUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  ...ExploreChartPanel.propTypes,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  actions: PropTypes.object.isRequired,\n  datasource_type: PropTypes.string.isRequired,\n  dashboardId: PropTypes.number,\n  isDatasourceMetaLoading: PropTypes.bool.isRequired,\n  chart: chartPropShape.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  controls: PropTypes.object.isRequired,\n  forcedHeight: PropTypes.string,\n  form_data: PropTypes.object.isRequired,\n  standalone: PropTypes.number.isRequired,\n  timeout: PropTypes.number,\n  impressionId: PropTypes.string,\n  vizType: PropTypes.string };\n\n\nconst Styles = styled.div`\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  text-align: left;\n  position: relative;\n  width: 100%;\n  max-height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  flex-basis: 100vh;\n  align-items: stretch;\n  border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  .explore-column {\n    display: flex;\n    flex-direction: column;\n    padding: ${({ theme }) => 2 * theme.gridUnit}px 0;\n    max-height: 100%;\n  }\n  .data-source-selection {\n    background-color: ${({ theme }) => theme.colors.grayscale.light4};\n    padding: ${({ theme }) => 2 * theme.gridUnit}px 0;\n    border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n  .main-explore-content {\n    flex: 1;\n    min-width: ${({ theme }) => theme.gridUnit * 128}px;\n    border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    .panel {\n      margin-bottom: 0;\n    }\n  }\n  .controls-column {\n    align-self: flex-start;\n    padding: 0;\n  }\n  .title-container {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    padding: 0 ${({ theme }) => 2 * theme.gridUnit}px;\n    justify-content: space-between;\n    .horizontal-text {\n      text-transform: uppercase;\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      font-size: ${({ theme }) => 4 * theme.typography.sizes.s};\n    }\n  }\n  .no-show {\n    display: none;\n  }\n  .vertical-text {\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n  }\n  .sidebar {\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.grayscale.light4};\n    padding: ${({ theme }) => 2 * theme.gridUnit}px;\n    width: ${({ theme }) => 8 * theme.gridUnit}px;\n  }\n  .callpase-icon > svg {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nconst getWindowSize = () => ({\n  height: window.innerHeight,\n  width: window.innerWidth });\n\n\nfunction useWindowSize({ delayMs = 250 } = {}) {\n  const [size, setSize] = useState(getWindowSize());\n\n  useEffect(() => {\n    const onWindowResize = _debounce(() => setSize(getWindowSize()), delayMs);\n    window.addEventListener('resize', onWindowResize);\n    return () => window.removeEventListener('resize', onWindowResize);\n  }, []);\n\n  return size;\n}\n\nfunction ExploreViewContainer(props) {\n  const dynamicPluginContext = usePluginContext();\n  const dynamicPlugin = dynamicPluginContext.dynamicPlugins[props.vizType];\n  const isDynamicPluginLoading = dynamicPlugin && dynamicPlugin.mounting;\n  const wasDynamicPluginLoading = usePrevious(isDynamicPluginLoading);\n\n  /** the state of controls in the previous render */\n  const previousControls = usePrevious(props.controls);\n  /** the state of controls last time a query was triggered */\n  const [lastQueriedControls, setLastQueriedControls] = useState(\n  props.controls);\n\n  const windowSize = useWindowSize();\n\n  const [showingModal, setShowingModal] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const theme = useTheme();\n  const width = `${windowSize.width}px`;\n  const navHeight = props.standalone ? 0 : 90;\n  const height = props.forcedHeight ?\n  `${props.forcedHeight}px` :\n  `${windowSize.height - navHeight}px`;\n\n  const storageKeys = {\n    controlsWidth: 'controls_width',\n    dataSourceWidth: 'datasource_width' };\n\n\n  const defaultSidebarsWidth = {\n    controls_width: 320,\n    datasource_width: 300 };\n\n\n  const addHistory = useCallback(\n  ({ isReplace = false, title } = {}) => {\n    const payload = { ...props.form_data };\n    const longUrl = getExploreLongUrl(\n    props.form_data,\n    props.standalone ? URL_PARAMS.standalone.name : null,\n    false);\n\n    try {\n      if (isReplace) {\n        window.history.replaceState(payload, title, longUrl);\n      } else {\n        window.history.pushState(payload, title, longUrl);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\n      'Failed at altering browser history',\n      payload,\n      title,\n      longUrl);\n\n    }\n  },\n  [props.form_data, props.standalone]);\n\n\n  function handlePopstate() {\n    const formData = window.history.state;\n    if (formData && Object.keys(formData).length) {\n      props.actions.setExploreControls(formData);\n      props.actions.postChartFormData(\n      formData,\n      false,\n      props.timeout,\n      props.chart.id);\n\n    }\n  }\n  const onQuery = useCallback(() => {\n    props.actions.triggerQuery(true, props.chart.id);\n    addHistory();\n    setLastQueriedControls(props.controls);\n  }, [props.controls, addHistory, props.actions, props.chart.id]);\n\n  function handleKeydown(event) {\n    const controlOrCommand = event.ctrlKey || event.metaKey;\n    if (controlOrCommand) {\n      const isEnter = event.key === 'Enter' || event.keyCode === 13;\n      const isS = event.key === 's' || event.keyCode === 83;\n      if (isEnter) {\n        onQuery();\n      } else if (isS) {\n        if (props.slice) {\n          props.actions.\n          saveSlice(props.form_data, {\n            action: 'overwrite',\n            slice_id: props.slice.slice_id,\n            slice_name: props.slice.slice_name,\n            add_to_dash: 'noSave',\n            goto_dash: false }).\n\n          then(({ data }) => {\n            window.location = data.slice.slice_url;\n          });\n        }\n      }\n    }\n  }\n\n  function onStop() {\n    if (props.chart && props.chart.queryController) {\n      props.chart.queryController.abort();\n    }\n  }\n\n  function toggleModal() {\n    setShowingModal(!showingModal);\n  }\n\n  function toggleCollapse() {\n    setIsCollapsed(!isCollapsed);\n  }\n\n  // effect to run on mount\n  useEffect(() => {\n    props.actions.logEvent(LOG_ACTIONS_MOUNT_EXPLORER);\n    addHistory({ isReplace: true });\n    window.addEventListener('popstate', handlePopstate);\n    document.addEventListener('keydown', handleKeydown);\n    return () => {\n      window.removeEventListener('popstate', handlePopstate);\n      document.removeEventListener('keydown', handleKeydown);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (wasDynamicPluginLoading && !isDynamicPluginLoading) {\n      // reload the controls now that we actually have the control config\n      props.actions.dynamicPluginControlsReady();\n    }\n  }, [isDynamicPluginLoading]);\n\n  useEffect(() => {\n    const hasError = Object.values(props.controls).some(\n    (control) =>\n    control.validationErrors && control.validationErrors.length > 0);\n\n    if (!hasError) {\n      props.actions.triggerQuery(true, props.chart.id);\n    }\n  }, []);\n\n  const reRenderChart = () => {\n    props.actions.updateQueryFormData(\n    getFormDataFromControls(props.controls),\n    props.chart.id);\n\n    props.actions.renderTriggered(new Date().getTime(), props.chart.id);\n    addHistory();\n  };\n\n  // effect to run when controls change\n  useEffect(() => {\n    if (previousControls) {\n      if (\n      props.controls.datasource && (\n      previousControls.datasource == null ||\n      props.controls.datasource.value !== previousControls.datasource.value))\n      {\n        // this should really be handled by actions\n        fetchDatasourceMetadata(props.form_data.datasource, true);\n      }\n\n      const changedControlKeys = Object.keys(props.controls).filter(\n      (key) =>\n      typeof previousControls[key] !== 'undefined' &&\n      !areObjectsEqual(\n      props.controls[key].value,\n      previousControls[key].value));\n\n\n\n      // this should also be handled by the actions that are actually changing the controls\n      const hasDisplayControlChanged = changedControlKeys.some(\n      (key) => props.controls[key].renderTrigger);\n\n      if (hasDisplayControlChanged) {\n        reRenderChart();\n      }\n    }\n  }, [props.controls, props.ownState]);\n\n  const chartIsStale = useMemo(() => {\n    if (lastQueriedControls) {\n      const changedControlKeys = Object.keys(props.controls).filter(\n      (key) =>\n      typeof lastQueriedControls[key] !== 'undefined' &&\n      !areObjectsEqual(\n      props.controls[key].value,\n      lastQueriedControls[key].value));\n\n\n\n      return changedControlKeys.some(\n      (key) =>\n      !props.controls[key].renderTrigger &&\n      !props.controls[key].dontRefreshOnChange);\n\n    }\n    return false;\n  }, [lastQueriedControls, props.controls]);\n\n  useEffect(() => {\n    if (props.ownState !== undefined) {\n      onQuery();\n      reRenderChart();\n    }\n  }, [props.ownState]);\n\n  if (chartIsStale) {\n    props.actions.logEvent(LOG_ACTIONS_CHANGE_EXPLORE_CONTROLS);\n  }\n\n  function renderErrorMessage() {\n    // Returns an error message as a node if any errors are in the store\n    const controlsWithErrors = Object.values(props.controls).filter(\n    (control) =>\n    control.validationErrors && control.validationErrors.length > 0);\n\n    if (controlsWithErrors.length === 0) {\n      return null;\n    }\n\n    const errorMessages = controlsWithErrors.map(\n    (control) => control.validationErrors);\n\n    const uniqueErrorMessages = [...new Set(errorMessages.flat())];\n\n    const errors = uniqueErrorMessages.\n    map((message) => {\n      const matchingLabels = controlsWithErrors.\n      filter((control) => {var _control$validationEr;return (_control$validationEr = control.validationErrors) == null ? void 0 : _control$validationEr.includes(message);}).\n      map((control) => control.label);\n      return [matchingLabels, message];\n    }).\n    map(([labels, message]) =>\n    ___EmotionJSX(\"div\", { key: message },\n    labels.length > 1 ? t('Controls labeled ') : t('Control labeled '),\n    ___EmotionJSX(\"strong\", null, ` ${labels.join(', ')}`),\n    ___EmotionJSX(\"span\", null, \": \", message)));\n\n\n\n    let errorMessage;\n    if (errors.length > 0) {\n      errorMessage = ___EmotionJSX(\"div\", { style: { textAlign: 'left' } }, errors);\n    }\n    return errorMessage;\n  }\n\n  function renderChartContainer() {\n    return (\n      ___EmotionJSX(ExploreChartPanel, _extends({\n        width: width,\n        height: height },\n      props, {\n        errorMessage: renderErrorMessage(),\n        refreshOverlayVisible: chartIsStale,\n        addHistory: addHistory,\n        onQuery: onQuery })));\n\n\n  }\n\n  function getSidebarWidths(key) {\n    return getFromLocalStorage(key, defaultSidebarsWidth[key]);\n  }\n\n  function setSidebarWidths(key, dimension) {\n    const newDimension = Number(getSidebarWidths(key)) + dimension.width;\n    setInLocalStorage(key, newDimension);\n  }\n\n  if (props.standalone) {\n    return renderChartContainer();\n  }\n\n  return (\n    ___EmotionJSX(Styles, { id: \"explore-container\", height: height },\n    ___EmotionJSX(Global, {\n      styles: css`\n          .navbar {\n            margin-bottom: 0;\n          }\n          body {\n            height: 100vh;\n            max-height: 100vh;\n            overflow: hidden;\n          }\n          #app-menu,\n          #app {\n            flex: 1 1 auto;\n          }\n          #app {\n            flex-basis: 100%;\n            overflow: hidden;\n            height: 100%;\n          }\n          #app-menu {\n            flex-shrink: 0;\n          }\n        ` }),\n\n    showingModal &&\n    ___EmotionJSX(SaveModal, {\n      onHide: toggleModal,\n      actions: props.actions,\n      form_data: props.form_data,\n      sliceName: props.sliceName,\n      dashboardId: props.dashboardId }),\n\n\n    ___EmotionJSX(Resizable, {\n      onResizeStop: (evt, direction, ref, d) =>\n      setSidebarWidths(storageKeys.dataSourceWidth, d),\n\n      defaultSize: {\n        width: getSidebarWidths(storageKeys.dataSourceWidth),\n        height: '100%' },\n\n      minWidth: defaultSidebarsWidth[storageKeys.dataSourceWidth],\n      maxWidth: \"33%\",\n      enable: { right: true },\n      className:\n      isCollapsed ? 'no-show' : 'explore-column data-source-selection' },\n\n\n    ___EmotionJSX(\"div\", { className: \"title-container\" },\n    ___EmotionJSX(\"span\", { className: \"horizont al-text\" }, t('Dataset')),\n    ___EmotionJSX(\"span\", {\n      role: \"button\",\n      tabIndex: 0,\n      className: \"action-button\",\n      onClick: toggleCollapse },\n\n    ___EmotionJSX(Icons.Expand, {\n      className: \"collapse-icon\",\n      iconColor: theme.colors.primary.base,\n      iconSize: \"l\" }))),\n\n\n\n    ___EmotionJSX(DataSourcePanel, {\n      datasource: props.datasource,\n      controls: props.controls,\n      actions: props.actions })),\n\n\n    isCollapsed ?\n    ___EmotionJSX(\"div\", {\n      className: \"sidebar\",\n      onClick: toggleCollapse,\n\n      role: \"button\",\n      tabIndex: 0 },\n\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\" },\n    ___EmotionJSX(Tooltip, { title: t('Open Datasource tab') },\n    ___EmotionJSX(Icons.Collapse, {\n      className: \"collapse-icon\",\n      iconColor: theme.colors.primary.base,\n      iconSize: \"l\" }))),\n\n\n\n    ___EmotionJSX(Icons.DatasetPhysical, {\n      css: /*#__PURE__*/_css({ marginTop: theme.gridUnit * 2 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExploreViewContainer;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zdXBlcnNldC1mcm9udGVuZC9zcmMvZXhwbG9yZS9jb21wb25lbnRzL0V4cGxvcmVWaWV3Q29udGFpbmVyLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtaEJZIiwiZmlsZSI6Ii9zdXBlcnNldC1mcm9udGVuZC9zcmMvZXhwbG9yZS9jb21wb25lbnRzL0V4cGxvcmVWaWV3Q29udGFpbmVyLmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludCBjYW1lbGNhc2U6IDAgKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgc3R5bGVkLCB0LCBjc3MsIHVzZVRoZW1lIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IHsgZGVib3VuY2UgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgUmVzaXphYmxlIH0gZnJvbSAncmUtcmVzaXphYmxlJztcblxuaW1wb3J0IHsgdXNlUGx1Z2luQ29udGV4dCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0R5bmFtaWNQbHVnaW5zJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Ub29sdGlwJztcbmltcG9ydCB7IHVzZVByZXZpb3VzIH0gZnJvbSAnc3JjL2NvbW1vbi9ob29rcy91c2VQcmV2aW91cyc7XG5pbXBvcnQgSWNvbnMgZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbnMnO1xuaW1wb3J0IHtcbiAgZ2V0RnJvbUxvY2FsU3RvcmFnZSxcbiAgc2V0SW5Mb2NhbFN0b3JhZ2UsXG59IGZyb20gJ3NyYy91dGlscy9sb2NhbFN0b3JhZ2VIZWxwZXJzJztcbmltcG9ydCB7IFVSTF9QQVJBTVMgfSBmcm9tICdzcmMvY29uc3RhbnRzJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIGNoYXJ0QWN0aW9ucyBmcm9tICdzcmMvY2hhcnQvY2hhcnRBY3Rpb24nO1xuaW1wb3J0IHsgZmV0Y2hEYXRhc291cmNlTWV0YWRhdGEgfSBmcm9tICdzcmMvZGFzaGJvYXJkL2FjdGlvbnMvZGF0YXNvdXJjZXMnO1xuaW1wb3J0IHsgY2hhcnRQcm9wU2hhcGUgfSBmcm9tICdzcmMvZGFzaGJvYXJkL3V0aWwvcHJvcFNoYXBlcyc7XG5pbXBvcnQgeyBtZXJnZUV4dHJhRm9ybURhdGEgfSBmcm9tICdzcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvbmF0aXZlRmlsdGVycy91dGlscyc7XG5pbXBvcnQgRXhwbG9yZUNoYXJ0UGFuZWwgZnJvbSAnLi9FeHBsb3JlQ2hhcnRQYW5lbCc7XG5pbXBvcnQgQ29ubmVjdGVkQ29udHJvbFBhbmVsc0NvbnRhaW5lciBmcm9tICcuL0NvbnRyb2xQYW5lbHNDb250YWluZXInO1xuaW1wb3J0IFNhdmVNb2RhbCBmcm9tICcuL1NhdmVNb2RhbCc7XG5pbXBvcnQgUXVlcnlBbmRTYXZlQnRucyBmcm9tICcuL1F1ZXJ5QW5kU2F2ZUJ0bnMnO1xuaW1wb3J0IERhdGFTb3VyY2VQYW5lbCBmcm9tICcuL0RhdGFzb3VyY2VQYW5lbCc7XG5pbXBvcnQgeyBnZXRFeHBsb3JlTG9uZ1VybCB9IGZyb20gJy4uL2V4cGxvcmVVdGlscyc7XG5pbXBvcnQgeyBhcmVPYmplY3RzRXF1YWwgfSBmcm9tICcuLi8uLi9yZWR1eFV0aWxzJztcbmltcG9ydCB7IGdldEZvcm1EYXRhRnJvbUNvbnRyb2xzIH0gZnJvbSAnLi4vY29udHJvbFV0aWxzJztcbmltcG9ydCAqIGFzIGV4cGxvcmVBY3Rpb25zIGZyb20gJy4uL2FjdGlvbnMvZXhwbG9yZUFjdGlvbnMnO1xuaW1wb3J0ICogYXMgc2F2ZU1vZGFsQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL3NhdmVNb2RhbEFjdGlvbnMnO1xuaW1wb3J0ICogYXMgbG9nQWN0aW9ucyBmcm9tICcuLi8uLi9sb2dnZXIvYWN0aW9ucyc7XG5pbXBvcnQge1xuICBMT0dfQUNUSU9OU19NT1VOVF9FWFBMT1JFUixcbiAgTE9HX0FDVElPTlNfQ0hBTkdFX0VYUExPUkVfQ09OVFJPTFMsXG59IGZyb20gJy4uLy4uL2xvZ2dlci9Mb2dVdGlscyc7XG5cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgLi4uRXhwbG9yZUNoYXJ0UGFuZWwucHJvcFR5cGVzLFxuICBoZWlnaHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3Rpb25zOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGRhdGFzb3VyY2VfdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBkYXNoYm9hcmRJZDogUHJvcFR5cGVzLm51bWJlcixcbiAgaXNEYXRhc291cmNlTWV0YUxvYWRpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGNoYXJ0OiBjaGFydFByb3BTaGFwZS5pc1JlcXVpcmVkLFxuICBzbGljZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2xpY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250cm9sczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBmb3JjZWRIZWlnaHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcm1fZGF0YTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzdGFuZGFsb25lOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIGltcHJlc3Npb25JZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdml6VHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmNvbnN0IFN0eWxlcyA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDV9O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgZmxleC1iYXNpczogMTAwdmg7XG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JheXNjYWxlLmxpZ2h0Mn07XG4gIC5leHBsb3JlLWNvbHVtbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHBhZGRpbmc6ICR7KHsgdGhlbWUgfSkgPT4gMiAqIHRoZW1lLmdyaWRVbml0fXB4IDA7XG4gICAgbWF4LWhlaWdodDogMTAwJTtcbiAgfVxuICAuZGF0YS1zb3VyY2Utc2VsZWN0aW9uIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmNvbG9ycy5ncmF5c2NhbGUubGlnaHQ0fTtcbiAgICBwYWRkaW5nOiAkeyh7IHRoZW1lIH0pID0+IDIgKiB0aGVtZS5ncmlkVW5pdH1weCAwO1xuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICB9XG4gIC5tYWluLWV4cGxvcmUtY29udGVudCB7XG4gICAgZmxleDogMTtcbiAgICBtaW4td2lkdGg6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuZ3JpZFVuaXQgKiAxMjh9cHg7XG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmNvbG9ycy5ncmF5c2NhbGUubGlnaHQyfTtcbiAgICAucGFuZWwge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICB9XG4gIH1cbiAgLmNvbnRyb2xzLWNvbHVtbiB7XG4gICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gIC50aXRsZS1jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgcGFkZGluZzogMCAkeyh7IHRoZW1lIH0pID0+IDIgKiB0aGVtZS5ncmlkVW5pdH1weDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgLmhvcml6b250YWwtdGV4dCB7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDF9O1xuICAgICAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pID0+IDQgKiB0aGVtZS50eXBvZ3JhcGh5LnNpemVzLnN9O1xuICAgIH1cbiAgfVxuICAubm8tc2hvdyB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAudmVydGljYWwtdGV4dCB7XG4gICAgd3JpdGluZy1tb2RlOiB2ZXJ0aWNhbC1ybDtcbiAgICB0ZXh0LW9yaWVudGF0aW9uOiBtaXhlZDtcbiAgfVxuICAuc2lkZWJhciB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDR9O1xuICAgIHBhZGRpbmc6ICR7KHsgdGhlbWUgfSkgPT4gMiAqIHRoZW1lLmdyaWRVbml0fXB4O1xuICAgIHdpZHRoOiAkeyh7IHRoZW1lIH0pID0+IDggKiB0aGVtZS5ncmlkVW5pdH1weDtcbiAgfVxuICAuY2FsbHBhc2UtaWNvbiA+IHN2ZyB7XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLnByaW1hcnkuYmFzZX07XG4gIH1cbmA7XG5cbmNvbnN0IGdldFdpbmRvd1NpemUgPSAoKSA9PiAoe1xuICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxufSk7XG5cbmZ1bmN0aW9uIHVzZVdpbmRvd1NpemUoeyBkZWxheU1zID0gMjUwIH0gPSB7fSkge1xuICBjb25zdCBbc2l6ZSwgc2V0U2l6ZV0gPSB1c2VTdGF0ZShnZXRXaW5kb3dTaXplKCkpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgb25XaW5kb3dSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiBzZXRTaXplKGdldFdpbmRvd1NpemUoKSksIGRlbGF5TXMpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxuZnVuY3Rpb24gRXhwbG9yZVZpZXdDb250YWluZXIocHJvcHMpIHtcbiAgY29uc3QgZHluYW1pY1BsdWdpbkNvbnRleHQgPSB1c2VQbHVnaW5Db250ZXh0KCk7XG4gIGNvbnN0IGR5bmFtaWNQbHVnaW4gPSBkeW5hbWljUGx1Z2luQ29udGV4dC5keW5hbWljUGx1Z2luc1twcm9wcy52aXpUeXBlXTtcbiAgY29uc3QgaXNEeW5hbWljUGx1Z2luTG9hZGluZyA9IGR5bmFtaWNQbHVnaW4gJiYgZHluYW1pY1BsdWdpbi5tb3VudGluZztcbiAgY29uc3Qgd2FzRHluYW1pY1BsdWdpbkxvYWRpbmcgPSB1c2VQcmV2aW91cyhpc0R5bmFtaWNQbHVnaW5Mb2FkaW5nKTtcblxuICAvKiogdGhlIHN0YXRlIG9mIGNvbnRyb2xzIGluIHRoZSBwcmV2aW91cyByZW5kZXIgKi9cbiAgY29uc3QgcHJldmlvdXNDb250cm9scyA9IHVzZVByZXZpb3VzKHByb3BzLmNvbnRyb2xzKTtcbiAgLyoqIHRoZSBzdGF0ZSBvZiBjb250cm9scyBsYXN0IHRpbWUgYSBxdWVyeSB3YXMgdHJpZ2dlcmVkICovXG4gIGNvbnN0IFtsYXN0UXVlcmllZENvbnRyb2xzLCBzZXRMYXN0UXVlcmllZENvbnRyb2xzXSA9IHVzZVN0YXRlKFxuICAgIHByb3BzLmNvbnRyb2xzLFxuICApO1xuICBjb25zdCB3aW5kb3dTaXplID0gdXNlV2luZG93U2l6ZSgpO1xuXG4gIGNvbnN0IFtzaG93aW5nTW9kYWwsIHNldFNob3dpbmdNb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc0NvbGxhcHNlZCwgc2V0SXNDb2xsYXBzZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgd2lkdGggPSBgJHt3aW5kb3dTaXplLndpZHRofXB4YDtcbiAgY29uc3QgbmF2SGVpZ2h0ID0gcHJvcHMuc3RhbmRhbG9uZSA/IDAgOiA5MDtcbiAgY29uc3QgaGVpZ2h0ID0gcHJvcHMuZm9yY2VkSGVpZ2h0XG4gICAgPyBgJHtwcm9wcy5mb3JjZWRIZWlnaHR9cHhgXG4gICAgOiBgJHt3aW5kb3dTaXplLmhlaWdodCAtIG5hdkhlaWdodH1weGA7XG5cbiAgY29uc3Qgc3RvcmFnZUtleXMgPSB7XG4gICAgY29udHJvbHNXaWR0aDogJ2NvbnRyb2xzX3dpZHRoJyxcbiAgICBkYXRhU291cmNlV2lkdGg6ICdkYXRhc291cmNlX3dpZHRoJyxcbiAgfTtcblxuICBjb25zdCBkZWZhdWx0U2lkZWJhcnNXaWR0aCA9IHtcbiAgICBjb250cm9sc193aWR0aDogMzIwLFxuICAgIGRhdGFzb3VyY2Vfd2lkdGg6IDMwMCxcbiAgfTtcblxuICBjb25zdCBhZGRIaXN0b3J5ID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgaXNSZXBsYWNlID0gZmFsc2UsIHRpdGxlIH0gPSB7fSkgPT4ge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHsgLi4ucHJvcHMuZm9ybV9kYXRhIH07XG4gICAgICBjb25zdCBsb25nVXJsID0gZ2V0RXhwbG9yZUxvbmdVcmwoXG4gICAgICAgIHByb3BzLmZvcm1fZGF0YSxcbiAgICAgICAgcHJvcHMuc3RhbmRhbG9uZSA/IFVSTF9QQVJBTVMuc3RhbmRhbG9uZS5uYW1lIDogbnVsbCxcbiAgICAgICAgZmFsc2UsXG4gICAgICApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzUmVwbGFjZSkge1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShwYXlsb2FkLCB0aXRsZSwgbG9uZ1VybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHBheWxvYWQsIHRpdGxlLCBsb25nVXJsKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCBhdCBhbHRlcmluZyBicm93c2VyIGhpc3RvcnknLFxuICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgbG9uZ1VybCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtwcm9wcy5mb3JtX2RhdGEsIHByb3BzLnN0YW5kYWxvbmVdLFxuICApO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcHN0YXRlKCkge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG4gICAgaWYgKGZvcm1EYXRhICYmIE9iamVjdC5rZXlzKGZvcm1EYXRhKS5sZW5ndGgpIHtcbiAgICAgIHByb3BzLmFjdGlvbnMuc2V0RXhwbG9yZUNvbnRyb2xzKGZvcm1EYXRhKTtcbiAgICAgIHByb3BzLmFjdGlvbnMucG9zdENoYXJ0Rm9ybURhdGEoXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgcHJvcHMudGltZW91dCxcbiAgICAgICAgcHJvcHMuY2hhcnQuaWQsXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBvblF1ZXJ5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHByb3BzLmFjdGlvbnMudHJpZ2dlclF1ZXJ5KHRydWUsIHByb3BzLmNoYXJ0LmlkKTtcbiAgICBhZGRIaXN0b3J5KCk7XG4gICAgc2V0TGFzdFF1ZXJpZWRDb250cm9scyhwcm9wcy5jb250cm9scyk7XG4gIH0sIFtwcm9wcy5jb250cm9scywgYWRkSGlzdG9yeSwgcHJvcHMuYWN0aW9ucywgcHJvcHMuY2hhcnQuaWRdKTtcblxuICBmdW5jdGlvbiBoYW5kbGVLZXlkb3duKGV2ZW50KSB7XG4gICAgY29uc3QgY29udHJvbE9yQ29tbWFuZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTtcbiAgICBpZiAoY29udHJvbE9yQ29tbWFuZCkge1xuICAgICAgY29uc3QgaXNFbnRlciA9IGV2ZW50LmtleSA9PT0gJ0VudGVyJyB8fCBldmVudC5rZXlDb2RlID09PSAxMztcbiAgICAgIGNvbnN0IGlzUyA9IGV2ZW50LmtleSA9PT0gJ3MnIHx8IGV2ZW50LmtleUNvZGUgPT09IDgzO1xuICAgICAgaWYgKGlzRW50ZXIpIHtcbiAgICAgICAgb25RdWVyeSgpO1xuICAgICAgfSBlbHNlIGlmIChpc1MpIHtcbiAgICAgICAgaWYgKHByb3BzLnNsaWNlKSB7XG4gICAgICAgICAgcHJvcHMuYWN0aW9uc1xuICAgICAgICAgICAgLnNhdmVTbGljZShwcm9wcy5mb3JtX2RhdGEsIHtcbiAgICAgICAgICAgICAgYWN0aW9uOiAnb3ZlcndyaXRlJyxcbiAgICAgICAgICAgICAgc2xpY2VfaWQ6IHByb3BzLnNsaWNlLnNsaWNlX2lkLFxuICAgICAgICAgICAgICBzbGljZV9uYW1lOiBwcm9wcy5zbGljZS5zbGljZV9uYW1lLFxuICAgICAgICAgICAgICBhZGRfdG9fZGFzaDogJ25vU2F2ZScsXG4gICAgICAgICAgICAgIGdvdG9fZGFzaDogZmFsc2UsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGRhdGEuc2xpY2Uuc2xpY2VfdXJsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblN0b3AoKSB7XG4gICAgaWYgKHByb3BzLmNoYXJ0ICYmIHByb3BzLmNoYXJ0LnF1ZXJ5Q29udHJvbGxlcikge1xuICAgICAgcHJvcHMuY2hhcnQucXVlcnlDb250cm9sbGVyLmFib3J0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlTW9kYWwoKSB7XG4gICAgc2V0U2hvd2luZ01vZGFsKCFzaG93aW5nTW9kYWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlQ29sbGFwc2UoKSB7XG4gICAgc2V0SXNDb2xsYXBzZWQoIWlzQ29sbGFwc2VkKTtcbiAgfVxuXG4gIC8vIGVmZmVjdCB0byBydW4gb24gbW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9wcy5hY3Rpb25zLmxvZ0V2ZW50KExPR19BQ1RJT05TX01PVU5UX0VYUExPUkVSKTtcbiAgICBhZGRIaXN0b3J5KHsgaXNSZXBsYWNlOiB0cnVlIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVBvcHN0YXRlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5ZG93bik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVBvcHN0YXRlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlkb3duKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAod2FzRHluYW1pY1BsdWdpbkxvYWRpbmcgJiYgIWlzRHluYW1pY1BsdWdpbkxvYWRpbmcpIHtcbiAgICAgIC8vIHJlbG9hZCB0aGUgY29udHJvbHMgbm93IHRoYXQgd2UgYWN0dWFsbHkgaGF2ZSB0aGUgY29udHJvbCBjb25maWdcbiAgICAgIHByb3BzLmFjdGlvbnMuZHluYW1pY1BsdWdpbkNvbnRyb2xzUmVhZHkoKTtcbiAgICB9XG4gIH0sIFtpc0R5bmFtaWNQbHVnaW5Mb2FkaW5nXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYXNFcnJvciA9IE9iamVjdC52YWx1ZXMocHJvcHMuY29udHJvbHMpLnNvbWUoXG4gICAgICBjb250cm9sID0+XG4gICAgICAgIGNvbnRyb2wudmFsaWRhdGlvbkVycm9ycyAmJiBjb250cm9sLnZhbGlkYXRpb25FcnJvcnMubGVuZ3RoID4gMCxcbiAgICApO1xuICAgIGlmICghaGFzRXJyb3IpIHtcbiAgICAgIHByb3BzLmFjdGlvbnMudHJpZ2dlclF1ZXJ5KHRydWUsIHByb3BzLmNoYXJ0LmlkKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCByZVJlbmRlckNoYXJ0ID0gKCkgPT4ge1xuICAgIHByb3BzLmFjdGlvbnMudXBkYXRlUXVlcnlGb3JtRGF0YShcbiAgICAgIGdldEZvcm1EYXRhRnJvbUNvbnRyb2xzKHByb3BzLmNvbnRyb2xzKSxcbiAgICAgIHByb3BzLmNoYXJ0LmlkLFxuICAgICk7XG4gICAgcHJvcHMuYWN0aW9ucy5yZW5kZXJUcmlnZ2VyZWQobmV3IERhdGUoKS5nZXRUaW1lKCksIHByb3BzLmNoYXJ0LmlkKTtcbiAgICBhZGRIaXN0b3J5KCk7XG4gIH07XG5cbiAgLy8gZWZmZWN0IHRvIHJ1biB3aGVuIGNvbnRyb2xzIGNoYW5nZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcmV2aW91c0NvbnRyb2xzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHByb3BzLmNvbnRyb2xzLmRhdGFzb3VyY2UgJiZcbiAgICAgICAgKHByZXZpb3VzQ29udHJvbHMuZGF0YXNvdXJjZSA9PSBudWxsIHx8XG4gICAgICAgICAgcHJvcHMuY29udHJvbHMuZGF0YXNvdXJjZS52YWx1ZSAhPT0gcHJldmlvdXNDb250cm9scy5kYXRhc291cmNlLnZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIC8vIHRoaXMgc2hvdWxkIHJlYWxseSBiZSBoYW5kbGVkIGJ5IGFjdGlvbnNcbiAgICAgICAgZmV0Y2hEYXRhc291cmNlTWV0YWRhdGEocHJvcHMuZm9ybV9kYXRhLmRhdGFzb3VyY2UsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGFuZ2VkQ29udHJvbEtleXMgPSBPYmplY3Qua2V5cyhwcm9wcy5jb250cm9scykuZmlsdGVyKFxuICAgICAgICBrZXkgPT5cbiAgICAgICAgICB0eXBlb2YgcHJldmlvdXNDb250cm9sc1trZXldICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICFhcmVPYmplY3RzRXF1YWwoXG4gICAgICAgICAgICBwcm9wcy5jb250cm9sc1trZXldLnZhbHVlLFxuICAgICAgICAgICAgcHJldmlvdXNDb250cm9sc1trZXldLnZhbHVlLFxuICAgICAgICAgICksXG4gICAgICApO1xuXG4gICAgICAvLyB0aGlzIHNob3VsZCBhbHNvIGJlIGhhbmRsZWQgYnkgdGhlIGFjdGlvbnMgdGhhdCBhcmUgYWN0dWFsbHkgY2hhbmdpbmcgdGhlIGNvbnRyb2xzXG4gICAgICBjb25zdCBoYXNEaXNwbGF5Q29udHJvbENoYW5nZWQgPSBjaGFuZ2VkQ29udHJvbEtleXMuc29tZShcbiAgICAgICAga2V5ID0+IHByb3BzLmNvbnRyb2xzW2tleV0ucmVuZGVyVHJpZ2dlcixcbiAgICAgICk7XG4gICAgICBpZiAoaGFzRGlzcGxheUNvbnRyb2xDaGFuZ2VkKSB7XG4gICAgICAgIHJlUmVuZGVyQ2hhcnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtwcm9wcy5jb250cm9scywgcHJvcHMub3duU3RhdGVdKTtcblxuICBjb25zdCBjaGFydElzU3RhbGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAobGFzdFF1ZXJpZWRDb250cm9scykge1xuICAgICAgY29uc3QgY2hhbmdlZENvbnRyb2xLZXlzID0gT2JqZWN0LmtleXMocHJvcHMuY29udHJvbHMpLmZpbHRlcihcbiAgICAgICAga2V5ID0+XG4gICAgICAgICAgdHlwZW9mIGxhc3RRdWVyaWVkQ29udHJvbHNba2V5XSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAhYXJlT2JqZWN0c0VxdWFsKFxuICAgICAgICAgICAgcHJvcHMuY29udHJvbHNba2V5XS52YWx1ZSxcbiAgICAgICAgICAgIGxhc3RRdWVyaWVkQ29udHJvbHNba2V5XS52YWx1ZSxcbiAgICAgICAgICApLFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIGNoYW5nZWRDb250cm9sS2V5cy5zb21lKFxuICAgICAgICBrZXkgPT5cbiAgICAgICAgICAhcHJvcHMuY29udHJvbHNba2V5XS5yZW5kZXJUcmlnZ2VyICYmXG4gICAgICAgICAgIXByb3BzLmNvbnRyb2xzW2tleV0uZG9udFJlZnJlc2hPbkNoYW5nZSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSwgW2xhc3RRdWVyaWVkQ29udHJvbHMsIHByb3BzLmNvbnRyb2xzXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvcHMub3duU3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb25RdWVyeSgpO1xuICAgICAgcmVSZW5kZXJDaGFydCgpO1xuICAgIH1cbiAgfSwgW3Byb3BzLm93blN0YXRlXSk7XG5cbiAgaWYgKGNoYXJ0SXNTdGFsZSkge1xuICAgIHByb3BzLmFjdGlvbnMubG9nRXZlbnQoTE9HX0FDVElPTlNfQ0hBTkdFX0VYUExPUkVfQ09OVFJPTFMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyRXJyb3JNZXNzYWdlKCkge1xuICAgIC8vIFJldHVybnMgYW4gZXJyb3IgbWVzc2FnZSBhcyBhIG5vZGUgaWYgYW55IGVycm9ycyBhcmUgaW4gdGhlIHN0b3JlXG4gICAgY29uc3QgY29udHJvbHNXaXRoRXJyb3JzID0gT2JqZWN0LnZhbHVlcyhwcm9wcy5jb250cm9scykuZmlsdGVyKFxuICAgICAgY29udHJvbCA9PlxuICAgICAgICBjb250cm9sLnZhbGlkYXRpb25FcnJvcnMgJiYgY29udHJvbC52YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDAsXG4gICAgKTtcbiAgICBpZiAoY29udHJvbHNXaXRoRXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlcyA9IGNvbnRyb2xzV2l0aEVycm9ycy5tYXAoXG4gICAgICBjb250cm9sID0+IGNvbnRyb2wudmFsaWRhdGlvbkVycm9ycyxcbiAgICApO1xuICAgIGNvbnN0IHVuaXF1ZUVycm9yTWVzc2FnZXMgPSBbLi4ubmV3IFNldChlcnJvck1lc3NhZ2VzLmZsYXQoKSldO1xuXG4gICAgY29uc3QgZXJyb3JzID0gdW5pcXVlRXJyb3JNZXNzYWdlc1xuICAgICAgLm1hcChtZXNzYWdlID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdMYWJlbHMgPSBjb250cm9sc1dpdGhFcnJvcnNcbiAgICAgICAgICAuZmlsdGVyKGNvbnRyb2wgPT4gY29udHJvbC52YWxpZGF0aW9uRXJyb3JzPy5pbmNsdWRlcyhtZXNzYWdlKSlcbiAgICAgICAgICAubWFwKGNvbnRyb2wgPT4gY29udHJvbC5sYWJlbCk7XG4gICAgICAgIHJldHVybiBbbWF0Y2hpbmdMYWJlbHMsIG1lc3NhZ2VdO1xuICAgICAgfSlcbiAgICAgIC5tYXAoKFtsYWJlbHMsIG1lc3NhZ2VdKSA9PiAoXG4gICAgICAgIDxkaXYga2V5PXttZXNzYWdlfT5cbiAgICAgICAgICB7bGFiZWxzLmxlbmd0aCA+IDEgPyB0KCdDb250cm9scyBsYWJlbGVkICcpIDogdCgnQ29udHJvbCBsYWJlbGVkICcpfVxuICAgICAgICAgIDxzdHJvbmc+e2AgJHtsYWJlbHMuam9pbignLCAnKX1gfTwvc3Ryb25nPlxuICAgICAgICAgIDxzcGFuPjoge21lc3NhZ2V9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkpO1xuXG4gICAgbGV0IGVycm9yTWVzc2FnZTtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IDxkaXYgc3R5bGU9e3sgdGV4dEFsaWduOiAnbGVmdCcgfX0+e2Vycm9yc308L2Rpdj47XG4gICAgfVxuICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJDaGFydENvbnRhaW5lcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEV4cGxvcmVDaGFydFBhbmVsXG4gICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgZXJyb3JNZXNzYWdlPXtyZW5kZXJFcnJvck1lc3NhZ2UoKX1cbiAgICAgICAgcmVmcmVzaE92ZXJsYXlWaXNpYmxlPXtjaGFydElzU3RhbGV9XG4gICAgICAgIGFkZEhpc3Rvcnk9e2FkZEhpc3Rvcnl9XG4gICAgICAgIG9uUXVlcnk9e29uUXVlcnl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTaWRlYmFyV2lkdGhzKGtleSkge1xuICAgIHJldHVybiBnZXRGcm9tTG9jYWxTdG9yYWdlKGtleSwgZGVmYXVsdFNpZGViYXJzV2lkdGhba2V5XSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTaWRlYmFyV2lkdGhzKGtleSwgZGltZW5zaW9uKSB7XG4gICAgY29uc3QgbmV3RGltZW5zaW9uID0gTnVtYmVyKGdldFNpZGViYXJXaWR0aHMoa2V5KSkgKyBkaW1lbnNpb24ud2lkdGg7XG4gICAgc2V0SW5Mb2NhbFN0b3JhZ2Uoa2V5LCBuZXdEaW1lbnNpb24pO1xuICB9XG5cbiAgaWYgKHByb3BzLnN0YW5kYWxvbmUpIHtcbiAgICByZXR1cm4gcmVuZGVyQ2hhcnRDb250YWluZXIoKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlcyBpZD1cImV4cGxvcmUtY29udGFpbmVyXCIgaGVpZ2h0PXtoZWlnaHR9PlxuICAgICAgPEdsb2JhbFxuICAgICAgICBzdHlsZXM9e2Nzc2BcbiAgICAgICAgICAubmF2YmFyIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJvZHkge1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgI2FwcC1tZW51LFxuICAgICAgICAgICNhcHAge1xuICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgfVxuICAgICAgICAgICNhcHAge1xuICAgICAgICAgICAgZmxleC1iYXNpczogMTAwJTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgfVxuICAgICAgICAgICNhcHAtbWVudSB7XG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICAvPlxuICAgICAge3Nob3dpbmdNb2RhbCAmJiAoXG4gICAgICAgIDxTYXZlTW9kYWxcbiAgICAgICAgICBvbkhpZGU9e3RvZ2dsZU1vZGFsfVxuICAgICAgICAgIGFjdGlvbnM9e3Byb3BzLmFjdGlvbnN9XG4gICAgICAgICAgZm9ybV9kYXRhPXtwcm9wcy5mb3JtX2RhdGF9XG4gICAgICAgICAgc2xpY2VOYW1lPXtwcm9wcy5zbGljZU5hbWV9XG4gICAgICAgICAgZGFzaGJvYXJkSWQ9e3Byb3BzLmRhc2hib2FyZElkfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIDxSZXNpemFibGVcbiAgICAgICAgb25SZXNpemVTdG9wPXsoZXZ0LCBkaXJlY3Rpb24sIHJlZiwgZCkgPT5cbiAgICAgICAgICBzZXRTaWRlYmFyV2lkdGhzKHN0b3JhZ2VLZXlzLmRhdGFTb3VyY2VXaWR0aCwgZClcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0U2l6ZT17e1xuICAgICAgICAgIHdpZHRoOiBnZXRTaWRlYmFyV2lkdGhzKHN0b3JhZ2VLZXlzLmRhdGFTb3VyY2VXaWR0aCksXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIH19XG4gICAgICAgIG1pbldpZHRoPXtkZWZhdWx0U2lkZWJhcnNXaWR0aFtzdG9yYWdlS2V5cy5kYXRhU291cmNlV2lkdGhdfVxuICAgICAgICBtYXhXaWR0aD1cIjMzJVwiXG4gICAgICAgIGVuYWJsZT17eyByaWdodDogdHJ1ZSB9fVxuICAgICAgICBjbGFzc05hbWU9e1xuICAgICAgICAgIGlzQ29sbGFwc2VkID8gJ25vLXNob3cnIDogJ2V4cGxvcmUtY29sdW1uIGRhdGEtc291cmNlLXNlbGVjdGlvbidcbiAgICAgICAgfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImhvcml6b250IGFsLXRleHRcIj57dCgnRGF0YXNldCcpfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImFjdGlvbi1idXR0b25cIlxuICAgICAgICAgICAgb25DbGljaz17dG9nZ2xlQ29sbGFwc2V9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEljb25zLkV4cGFuZFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb2xsYXBzZS1pY29uXCJcbiAgICAgICAgICAgICAgaWNvbkNvbG9yPXt0aGVtZS5jb2xvcnMucHJpbWFyeS5iYXNlfVxuICAgICAgICAgICAgICBpY29uU2l6ZT1cImxcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8RGF0YVNvdXJjZVBhbmVsXG4gICAgICAgICAgZGF0YXNvdXJjZT17cHJvcHMuZGF0YXNvdXJjZX1cbiAgICAgICAgICBjb250cm9scz17cHJvcHMuY29udHJvbHN9XG4gICAgICAgICAgYWN0aW9ucz17cHJvcHMuYWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvUmVzaXphYmxlPlxuICAgICAge2lzQ29sbGFwc2VkID8gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwic2lkZWJhclwiXG4gICAgICAgICAgb25DbGljaz17dG9nZ2xlQ29sbGFwc2V9XG4gICAgICAgICAgZGF0YS10ZXN0PVwib3Blbi1kYXRhc291cmNlLXRhYlwiXG4gICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgID5cbiAgICAgICAgICA8c3BhbiByb2xlPVwiYnV0dG9uXCIgdGFiSW5kZXg9ezB9IGNsYXNzTmFtZT1cImFjdGlvbi1idXR0b25cIj5cbiAgICAgICAgICAgIDxUb29sdGlwIHRpdGxlPXt0KCdPcGVuIERhdGFzb3VyY2UgdGFiJyl9PlxuICAgICAgICAgICAgICA8SWNvbnMuQ29sbGFwc2VcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb2xsYXBzZS1pY29uXCJcbiAgICAgICAgICAgICAgICBpY29uQ29sb3I9e3RoZW1lLmNvbG9ycy5wcmltYXJ5LmJhc2V9XG4gICAgICAgICAgICAgICAgaWNvblNpemU9XCJsXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPEljb25zLkRhdGFzZXRQaHlzaWNhbFxuICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogdGhlbWUuZ3JpZFVuaXQgKiAyIH19XG4gICAgICAgICAgICBpY29uU2l6ZT1cImxcIlxuICAgICAgICAgICAgaWNvbkNvbG9yPXt0aGVtZS5jb2xvcnMuZ3JheXNjYWxlLmJhc2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApIDogbnVsbH1cbiAgICAgIDxSZXNpemFibGVcbiAgICAgICAgb25SZXNpemVTdG9wPXsoZXZ0LCBkaXJlY3Rpb24sIHJlZiwgZCkgPT5cbiAgICAgICAgICBzZXRTaWRlYmFyV2lkdGhzKHN0b3JhZ2VLZXlzLmNvbnRyb2xzV2lkdGgsIGQpXG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdFNpemU9e3tcbiAgICAgICAgICB3aWR0aDogZ2V0U2lkZWJhcldpZHRocyhzdG9yYWdlS2V5cy5jb250cm9sc1dpZHRoKSxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgfX1cbiAgICAgICAgbWluV2lkdGg9e2RlZmF1bHRTaWRlYmFyc1dpZHRoW3N0b3JhZ2VLZXlzLmNvbnRyb2xzV2lkdGhdfVxuICAgICAgICBtYXhXaWR0aD1cIjMzJVwiXG4gICAgICAgIGVuYWJsZT17eyByaWdodDogdHJ1ZSB9fVxuICAgICAgICBjbGFzc05hbWU9XCJjb2wtc20tMyBleHBsb3JlLWNvbHVtbiBjb250cm9scy1jb2x1bW5cIlxuICAgICAgPlxuICAgICAgICA8UXVlcnlBbmRTYXZlQnRuc1xuICAgICAgICAgIGNhbkFkZD17ISEocHJvcHMuY2FuX2FkZCB8fCBwcm9wcy5jYW5fb3ZlcndyaXRlKX1cbiAgICAgICAgICBvblF1ZXJ5PXtvblF1ZXJ5fVxuICAgICAgICAgIG9uU2F2ZT17dG9nZ2xlTW9kYWx9XG4gICAgICAgICAgb25TdG9wPXtvblN0b3B9XG4gICAgICAgICAgbG9hZGluZz17cHJvcHMuY2hhcnQuY2hhcnRTdGF0dXMgPT09ICdsb2FkaW5nJ31cbiAgICAgICAgICBjaGFydElzU3RhbGU9e2NoYXJ0SXNTdGFsZX1cbiAgICAgICAgICBlcnJvck1lc3NhZ2U9e3JlbmRlckVycm9yTWVzc2FnZSgpfVxuICAgICAgICAgIGRhdGFzb3VyY2VUeXBlPXtwcm9wcy5kYXRhc291cmNlX3R5cGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxDb25uZWN0ZWRDb250cm9sUGFuZWxzQ29udGFpbmVyXG4gICAgICAgICAgYWN0aW9ucz17cHJvcHMuYWN0aW9uc31cbiAgICAgICAgICBmb3JtX2RhdGE9e3Byb3BzLmZvcm1fZGF0YX1cbiAgICAgICAgICBjb250cm9scz17cHJvcHMuY29udHJvbHN9XG4gICAgICAgICAgZGF0YXNvdXJjZV90eXBlPXtwcm9wcy5kYXRhc291cmNlX3R5cGV9XG4gICAgICAgICAgaXNEYXRhc291cmNlTWV0YUxvYWRpbmc9e3Byb3BzLmlzRGF0YXNvdXJjZU1ldGFMb2FkaW5nfVxuICAgICAgICAvPlxuICAgICAgPC9SZXNpemFibGU+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y3goXG4gICAgICAgICAgJ21haW4tZXhwbG9yZS1jb250ZW50JyxcbiAgICAgICAgICBpc0NvbGxhcHNlZCA/ICdjb2wtc20tOScgOiAnY29sLXNtLTcnLFxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7cmVuZGVyQ2hhcnRDb250YWluZXIoKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvU3R5bGVzPlxuICApO1xufVxuXG5FeHBsb3JlVmlld0NvbnRhaW5lci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGV4cGxvcmUsIGNoYXJ0cywgaW1wcmVzc2lvbklkLCBkYXRhTWFzaywgcmVwb3J0cyB9ID0gc3RhdGU7XG4gIGNvbnN0IGZvcm1fZGF0YSA9IGdldEZvcm1EYXRhRnJvbUNvbnRyb2xzKGV4cGxvcmUuY29udHJvbHMpO1xuICBmb3JtX2RhdGEuZXh0cmFfZm9ybV9kYXRhID0gbWVyZ2VFeHRyYUZvcm1EYXRhKFxuICAgIHsgLi4uZm9ybV9kYXRhLmV4dHJhX2Zvcm1fZGF0YSB9LFxuICAgIHtcbiAgICAgIC4uLmRhdGFNYXNrW2Zvcm1fZGF0YS5zbGljZV9pZCA/PyAwXT8ub3duU3RhdGUsIC8vIDAgLSB1bnNhdmVkIGNoYXJ0XG4gICAgfSxcbiAgKTtcbiAgY29uc3QgY2hhcnRLZXkgPSBPYmplY3Qua2V5cyhjaGFydHMpWzBdO1xuICBjb25zdCBjaGFydCA9IGNoYXJ0c1tjaGFydEtleV07XG5cbiAgcmV0dXJuIHtcbiAgICBpc0RhdGFzb3VyY2VNZXRhTG9hZGluZzogZXhwbG9yZS5pc0RhdGFzb3VyY2VNZXRhTG9hZGluZyxcbiAgICBkYXRhc291cmNlOiBleHBsb3JlLmRhdGFzb3VyY2UsXG4gICAgZGF0YXNvdXJjZV90eXBlOiBleHBsb3JlLmRhdGFzb3VyY2UudHlwZSxcbiAgICBkYXRhc291cmNlSWQ6IGV4cGxvcmUuZGF0YXNvdXJjZV9pZCxcbiAgICBkYXNoYm9hcmRJZDogZXhwbG9yZS5mb3JtX2RhdGEgPyBleHBsb3JlLmZvcm1fZGF0YS5kYXNoYm9hcmRJZCA6IHVuZGVmaW5lZCxcbiAgICBjb250cm9sczogZXhwbG9yZS5jb250cm9scyxcbiAgICBjYW5fb3ZlcndyaXRlOiAhIWV4cGxvcmUuY2FuX292ZXJ3cml0ZSxcbiAgICBjYW5fYWRkOiAhIWV4cGxvcmUuY2FuX2FkZCxcbiAgICBjYW5fZG93bmxvYWQ6ICEhZXhwbG9yZS5jYW5fZG93bmxvYWQsXG4gICAgY29sdW1uX2Zvcm1hdHM6IGV4cGxvcmUuZGF0YXNvdXJjZVxuICAgICAgPyBleHBsb3JlLmRhdGFzb3VyY2UuY29sdW1uX2Zvcm1hdHNcbiAgICAgIDogbnVsbCxcbiAgICBjb250YWluZXJJZDogZXhwbG9yZS5zbGljZVxuICAgICAgPyBgc2xpY2UtY29udGFpbmVyLSR7ZXhwbG9yZS5zbGljZS5zbGljZV9pZH1gXG4gICAgICA6ICdzbGljZS1jb250YWluZXInLFxuICAgIGlzU3RhcnJlZDogZXhwbG9yZS5pc1N0YXJyZWQsXG4gICAgc2xpY2U6IGV4cGxvcmUuc2xpY2UsXG4gICAgc2xpY2VOYW1lOiBleHBsb3JlLnNsaWNlTmFtZSxcbiAgICB0cmlnZ2VyUmVuZGVyOiBleHBsb3JlLnRyaWdnZXJSZW5kZXIsXG4gICAgZm9ybV9kYXRhLFxuICAgIHRhYmxlX25hbWU6IGZvcm1fZGF0YS5kYXRhc291cmNlX25hbWUsXG4gICAgdml6VHlwZTogZm9ybV9kYXRhLnZpel90eXBlLFxuICAgIHN0YW5kYWxvbmU6IGV4cGxvcmUuc3RhbmRhbG9uZSxcbiAgICBmb3JjZWRIZWlnaHQ6IGV4cGxvcmUuZm9yY2VkX2hlaWdodCxcbiAgICBjaGFydCxcbiAgICB0aW1lb3V0OiBleHBsb3JlLmNvbW1vbi5jb25mLlNVUEVSU0VUX1dFQlNFUlZFUl9USU1FT1VULFxuICAgIG93blN0YXRlOiBkYXRhTWFza1tmb3JtX2RhdGEuc2xpY2VfaWQgPz8gMF0/Lm93blN0YXRlLCAvLyAwIC0gdW5zYXZlZCBjaGFydFxuICAgIGltcHJlc3Npb25JZCxcbiAgICB1c2VyOiBleHBsb3JlLnVzZXIsXG4gICAgcmVwb3J0cyxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIGNvbnN0IGFjdGlvbnMgPSB7XG4gICAgLi4uZXhwbG9yZUFjdGlvbnMsXG4gICAgLi4uc2F2ZU1vZGFsQWN0aW9ucyxcbiAgICAuLi5jaGFydEFjdGlvbnMsXG4gICAgLi4ubG9nQWN0aW9ucyxcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBhY3Rpb25zOiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9ucywgZGlzcGF0Y2gpLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcyxcbikoRXhwbG9yZVZpZXdDb250YWluZXIpO1xuIl19 */\"),\n      iconSize: \"l\",\n      iconColor: theme.colors.grayscale.base })) :\n\n\n    null,\n    ___EmotionJSX(Resizable, {\n      onResizeStop: (evt, direction, ref, d) =>\n      setSidebarWidths(storageKeys.controlsWidth, d),\n\n      defaultSize: {\n        width: getSidebarWidths(storageKeys.controlsWidth),\n        height: '100%' },\n\n      minWidth: defaultSidebarsWidth[storageKeys.controlsWidth],\n      maxWidth: \"33%\",\n      enable: { right: true },\n      className: \"col-sm-3 explore-column controls-column\" },\n\n    ___EmotionJSX(QueryAndSaveBtns, {\n      canAdd: !!(props.can_add || props.can_overwrite),\n      onQuery: onQuery,\n      onSave: toggleModal,\n      onStop: onStop,\n      loading: props.chart.chartStatus === 'loading',\n      chartIsStale: chartIsStale,\n      errorMessage: renderErrorMessage(),\n      datasourceType: props.datasource_type }),\n\n    ___EmotionJSX(ConnectedControlPanelsContainer, {\n      actions: props.actions,\n      form_data: props.form_data,\n      controls: props.controls,\n      datasource_type: props.datasource_type,\n      isDatasourceMetaLoading: props.isDatasourceMetaLoading })),\n\n\n    ___EmotionJSX(\"div\", {\n      className: cx(\n      'main-explore-content',\n      isCollapsed ? 'col-sm-9' : 'col-sm-7') },\n\n\n    renderChartContainer())));\n\n\n\n}\n\nExploreViewContainer.propTypes = propTypes;\n\nfunction mapStateToProps(state) {var _dataMask, _form_data$slice_id, _dataMask2, _form_data$slice_id2;\n  const { explore, charts, impressionId, dataMask, reports } = state;\n  const form_data = getFormDataFromControls(explore.controls);\n  form_data.extra_form_data = mergeExtraFormData(\n  { ...form_data.extra_form_data },\n  {\n    ...((_dataMask = dataMask[(_form_data$slice_id = form_data.slice_id) != null ? _form_data$slice_id : 0]) == null ? void 0 : _dataMask.ownState) // 0 - unsaved chart\n  });\n\n  const chartKey = Object.keys(charts)[0];\n  const chart = charts[chartKey];\n\n  return {\n    isDatasourceMetaLoading: explore.isDatasourceMetaLoading,\n    datasource: explore.datasource,\n    datasource_type: explore.datasource.type,\n    datasourceId: explore.datasource_id,\n    dashboardId: explore.form_data ? explore.form_data.dashboardId : undefined,\n    controls: explore.controls,\n    can_overwrite: !!explore.can_overwrite,\n    can_add: !!explore.can_add,\n    can_download: !!explore.can_download,\n    column_formats: explore.datasource ?\n    explore.datasource.column_formats :\n    null,\n    containerId: explore.slice ?\n    `slice-container-${explore.slice.slice_id}` :\n    'slice-container',\n    isStarred: explore.isStarred,\n    slice: explore.slice,\n    sliceName: explore.sliceName,\n    triggerRender: explore.triggerRender,\n    form_data,\n    table_name: form_data.datasource_name,\n    vizType: form_data.viz_type,\n    standalone: explore.standalone,\n    forcedHeight: explore.forced_height,\n    chart,\n    timeout: explore.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    ownState: (_dataMask2 = dataMask[(_form_data$slice_id2 = form_data.slice_id) != null ? _form_data$slice_id2 : 0]) == null ? void 0 : _dataMask2.ownState, // 0 - unsaved chart\n    impressionId,\n    user: explore.user,\n    reports };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  const actions = {\n    ...exploreActions,\n    ...saveModalActions,\n    ...chartActions,\n    ...logActions };\n\n  return {\n    actions: bindActionCreators(actions, dispatch) };\n\n}\n\nexport default connect(\nmapStateToProps,\nmapDispatchToProps)(\nExploreViewContainer);","map":null,"metadata":{},"sourceType":"module"}