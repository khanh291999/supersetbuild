{"ast":null,"code":"import _isString from \"lodash/isString\";import { makeApi, CategoricalColorNamespace } from '@superset-ui/core';\n\nexport const DASHBOARD_INFO_UPDATED = 'DASHBOARD_INFO_UPDATED';\n// updates partially changed dashboard info\nexport function dashboardInfoChanged(newInfo) {\n  const { metadata } = newInfo;\n  const categoricalNamespace = CategoricalColorNamespace.getNamespace(metadata == null ? void 0 : metadata.color_namespace);\n  categoricalNamespace.resetColors();\n  if (metadata != null && metadata.label_colors) {\n    const labelColors = metadata.label_colors;\n    const colorMap = _isString(labelColors) ?\n    JSON.parse(labelColors) :\n    labelColors;\n    Object.keys(colorMap).forEach((label) => {\n      categoricalNamespace.setColor(label, colorMap[label]);\n    });\n  }\n  return { type: DASHBOARD_INFO_UPDATED, newInfo };\n}\nexport const SET_CHART_CONFIG_BEGIN = 'SET_CHART_CONFIG_BEGIN';\nexport const SET_CHART_CONFIG_COMPLETE = 'SET_CHART_CONFIG_COMPLETE';\nexport const SET_CHART_CONFIG_FAIL = 'SET_CHART_CONFIG_FAIL';\nexport const setChartConfiguration = (chartConfiguration) => async (dispatch, getState) => {\n  dispatch({\n    type: SET_CHART_CONFIG_BEGIN,\n    chartConfiguration });\n\n  const { id, metadata } = getState().dashboardInfo;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        chart_configuration: chartConfiguration }) });\n\n\n    dispatch(dashboardInfoChanged({\n      metadata: JSON.parse(response.result.json_metadata) }));\n\n    dispatch({\n      type: SET_CHART_CONFIG_COMPLETE,\n      chartConfiguration });\n\n  }\n  catch (err) {\n    dispatch({ type: SET_CHART_CONFIG_FAIL, chartConfiguration });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}