{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/components';\nimport { t, SupersetClient, styled } from '@superset-ui/core';\nimport { Operators, OPERATORS_OPTIONS, TABLE_ONLY_OPERATORS, DRUID_ONLY_OPERATORS, HAVING_OPERATORS, MULTI_OPERATORS, CUSTOM_OPERATORS, DISABLE_INPUT_OPERATORS, OPERATOR_ENUM_TO_OPERATOR_TYPE } from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport { EXPRESSION_TYPES, CLAUSES } from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport { Input } from 'src/common/components';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledInput = styled(Input)`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nconst SelectWithLabel = styled(Select)`\n  .ant-select-selector::after {\n    content: ${({ labelText }) => labelText || '\\\\A0'};\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\nexport const useSimpleTabFilterProps = (props) => {\n  const isOperatorRelevant = (operator, subject) => {var _props$datasource$col;\n    const column = (_props$datasource$col = props.datasource.columns) == null ? void 0 : _props$datasource$col.find((col) => col.column_name === subject);\n    const isColumnBoolean = !!column && (column.type === 'BOOL' || column.type === 'BOOLEAN');\n    const isColumnNumber = !!column && (column.type === 'INT' || column.type === 'INTEGER');\n    const isColumnFunction = !!column && !!column.expression;\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      const { partitionColumn } = props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n    if (operator === Operators.IS_TRUE || operator === Operators.IS_FALSE) {\n      return isColumnBoolean || isColumnNumber || isColumnFunction;\n    }\n    if (isColumnBoolean) {\n      return operator === Operators.IS_NULL || operator === Operators.IS_NOT_NULL;\n    }\n    return !(props.datasource.type === 'druid' &&\n    TABLE_ONLY_OPERATORS.indexOf(operator) >= 0 ||\n    props.datasource.type === 'table' &&\n    DRUID_ONLY_OPERATORS.indexOf(operator) >= 0 ||\n    props.adhocFilter.clause === CLAUSES.HAVING &&\n    HAVING_OPERATORS.indexOf(operator) === -1);\n  };\n  const onSubjectChange = (id) => {\n    const option = props.options.find((option) => 'column_name' in option && option.column_name === id ||\n    'optionName' in option && option.optionName === id);\n    let subject = '';\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && 'column_name' in option) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else\n    if (option && 'saved_metric_name' in option) {\n      subject = option.saved_metric_name;\n      clause = CLAUSES.HAVING;\n    } else\n    if (option && option.label) {\n      subject = option.label;\n      clause = CLAUSES.HAVING;\n    }\n    const { operator, operatorId } = props.adhocFilter;\n    props.onChange(props.adhocFilter.duplicateWith({\n      subject,\n      clause,\n      operator: operator && operatorId && isOperatorRelevant(operatorId, subject) ?\n      OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation :\n      null,\n      expressionType: EXPRESSION_TYPES.SIMPLE,\n      operatorId }));\n\n  };\n  const onOperatorChange = (operatorId) => {\n    const currentComparator = props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operatorId)) {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator :\n      [currentComparator].filter((element) => element);\n    } else\n    {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator[0] :\n      currentComparator;\n    }\n    if (operatorId === Operators.IS_TRUE || operatorId === Operators.IS_FALSE) {\n      newComparator = Operators.IS_TRUE === operatorId;\n    }\n    if (operatorId && CUSTOM_OPERATORS.has(operatorId)) {\n      props.onChange(props.adhocFilter.duplicateWith({\n        subject: props.adhocFilter.subject,\n        clause: CLAUSES.WHERE,\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        expressionType: EXPRESSION_TYPES.SQL,\n        datasource: props.datasource }));\n\n    } else\n    {\n      props.onChange(props.adhocFilter.duplicateWith({\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        comparator: newComparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n    }\n  };\n  const onComparatorChange = (comparator) => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      comparator,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n  };\n  return {\n    onSubjectChange,\n    onOperatorChange,\n    onComparatorChange,\n    isOperatorRelevant };\n\n};\nconst AdhocFilterEditPopoverSimpleTabContent = (props) => {var _props$operators, _props$operators2;\n  const { onSubjectChange, onOperatorChange, isOperatorRelevant, onComparatorChange } = useSimpleTabFilterProps(props);\n  const [suggestions, setSuggestions] = useState([]);\n  const [comparator, setComparator] = useState(props.adhocFilter.comparator);\n  const [loadingComparatorSuggestions, setLoadingComparatorSuggestions] = useState(false);\n  const onInputComparatorChange = (event) => {\n    onComparatorChange(event.target.value);\n  };\n  const renderSubjectOptionLabel = (option) => ___EmotionJSX(FilterDefinitionOption, { option: option });\n  const getOptionsRemaining = () => {var _ref;\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator) ?\n    comparator.filter((v) => suggestions.includes(v)).length :\n    0;\n    return (_ref = (suggestions == null ? void 0 : suggestions.length) - valuesFromSuggestionsLength) != null ? _ref : 0;\n  };\n  const createSuggestionsPlaceholder = () => {\n    const optionsRemaining = getOptionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  };\n  const handleSubjectChange = (subject) => {\n    setComparator(undefined);\n    onSubjectChange(subject);\n  };\n  let columns = props.options;\n  const { subject, operator, operatorId } = props.adhocFilter;\n  const subjectSelectProps = {\n    ariaLabel: t('Select subject'),\n    value: subject != null ? subject : undefined,\n    onChange: handleSubjectChange,\n    notFoundContent: t('No such column found. To filter on a metric, try the Custom SQL tab.'),\n    autoFocus: !subject,\n    placeholder: '' };\n\n  if (props.datasource.type === 'druid') {\n    subjectSelectProps.placeholder = t('%s column(s) and metric(s)', columns.length);\n  } else\n  {\n    // we cannot support simple ad-hoc filters for metrics because we don't know what type\n    // the value should be cast to (without knowing the output type of the aggregate, which\n    // becomes a rather complicated problem)\n    subjectSelectProps.placeholder =\n    props.adhocFilter.clause === CLAUSES.WHERE ?\n    t('%s column(s)', columns.length) :\n    t('To filter on a metric, use Custom SQL tab.');\n    columns = props.options.filter((option) => 'column_name' in option && option.column_name);\n  }\n  const operatorSelectProps = {\n    placeholder: t('%s operator(s)', ((_props$operators = props.operators) != null ? _props$operators : OPERATORS_OPTIONS).filter((op) => isOperatorRelevant(op, subject)).length),\n    value: operatorId,\n    onChange: onOperatorChange,\n    autoFocus: !!subjectSelectProps.value && !operator,\n    ariaLabel: t('Select operator') };\n\n  const shouldFocusComparator = !!subjectSelectProps.value && !!operatorSelectProps.value;\n  const comparatorSelectProps = {\n    allowClear: true,\n    allowNewOptions: true,\n    ariaLabel: t('Comparator option'),\n    mode: MULTI_OPERATORS.has(operatorId) ?\n    'multiple' :\n    'single',\n    loading: loadingComparatorSuggestions,\n    value: comparator,\n    onChange: onComparatorChange,\n    notFoundContent: t('Type a value here'),\n    disabled: DISABLE_INPUT_OPERATORS.includes(operatorId),\n    placeholder: createSuggestionsPlaceholder(),\n    autoFocus: shouldFocusComparator };\n\n  const labelText = comparator && comparator.length > 0 && createSuggestionsPlaceholder();\n  useEffect(() => {\n    const refreshComparatorSuggestions = () => {\n      const { datasource } = props;\n      const col = props.adhocFilter.subject;\n      const having = props.adhocFilter.clause === CLAUSES.HAVING;\n      if (col && datasource && datasource.filter_select && !having) {\n        const controller = new AbortController();\n        const { signal } = controller;\n        if (loadingComparatorSuggestions) {\n          controller.abort();\n        }\n        setLoadingComparatorSuggestions(true);\n        SupersetClient.get({\n          signal,\n          endpoint: `/superset/filter/${datasource.type}/${datasource.id}/${col}/` }).\n\n        then(({ json }) => {\n          setSuggestions(json);\n          setLoadingComparatorSuggestions(false);\n        }).\n        catch(() => {\n          setSuggestions([]);\n          setLoadingComparatorSuggestions(false);\n        });\n      }\n    };\n    refreshComparatorSuggestions();\n  }, [props.adhocFilter.subject]);\n  useEffect(() => {\n    setComparator(props.adhocFilter.comparator);\n  }, [props.adhocFilter.comparator]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Select, _extends({ css: (theme) => ({\n      marginTop: theme.gridUnit * 4,\n      marginBottom: theme.gridUnit * 4 }),\n    options: columns.map((column) => ({\n      value: 'column_name' in column && column.column_name ||\n      'optionName' in column && column.optionName ||\n      '',\n      label: 'saved_metric_name' in column && column.saved_metric_name ||\n      'column_name' in column && column.column_name ||\n      'label' in column && column.label,\n      key: 'id' in column && column.id ||\n      'optionName' in column && column.optionName ||\n      undefined,\n      customLabel: renderSubjectOptionLabel(column) })) },\n  subjectSelectProps)),\n  ___EmotionJSX(Select, _extends({ css: (theme) => ({ marginBottom: theme.gridUnit * 4 }), options: ((_props$operators2 = props.operators) != null ? _props$operators2 : OPERATORS_OPTIONS).\n    filter((op) => isOperatorRelevant(op, subject)).\n    map((option) => ({\n      value: option,\n      label: OPERATOR_ENUM_TO_OPERATOR_TYPE[option].display,\n      key: option })) },\n  operatorSelectProps)),\n  MULTI_OPERATORS.has(operatorId) || suggestions.length > 0 ? ___EmotionJSX(SelectWithLabel, _extends({ labelText: labelText, options: suggestions.map((suggestion) => ({\n      value: suggestion,\n      label: String(suggestion) })) },\n  comparatorSelectProps)) : ___EmotionJSX(StyledInput, { name: \"filter-value\", ref: (ref) => {\n      if (ref && shouldFocusComparator) {\n        ref.focus();\n      }\n    }, onChange: onInputComparatorChange, value: comparator, placeholder: t('Filter value (case sensitive)'), disabled: DISABLE_INPUT_OPERATORS.includes(operatorId) }));\n\n};\nexport default AdhocFilterEditPopoverSimpleTabContent;","map":null,"metadata":{},"sourceType":"module"}