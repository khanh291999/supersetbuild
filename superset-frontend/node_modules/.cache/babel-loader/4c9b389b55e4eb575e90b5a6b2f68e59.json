{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDrag } from 'react-dnd';\nimport { styled } from '@superset-ui/core';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { StyledColumnOption, StyledMetricOption } from 'src/explore/components/optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatasourceItemContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: ${({ theme }) => theme.gridUnit * 6}px;\n  cursor: pointer;\n\n  > div {\n    width: 100%;\n  }\n\n  :hover {\n    background-color: ${({ theme }) => theme.colors.grayscale.light2};\n  }\n`;\nexport default function DatasourcePanelDragOption(props) {\n  const { labelRef, showTooltip, type, value } = props;\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      value: props.value,\n      type: props.type },\n\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging() }) });\n\n\n  const optionProps = {\n    labelRef,\n    showTooltip: !isDragging && showTooltip,\n    showType: true };\n\n  return ___EmotionJSX(DatasourceItemContainer, { ref: drag },\n  type === DndItemType.Column ? ___EmotionJSX(StyledColumnOption, _extends({ column: value }, optionProps)) : ___EmotionJSX(StyledMetricOption, _extends({ metric: value }, optionProps)));\n\n}","map":null,"metadata":{},"sourceType":"module"}