{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StyledModal } from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { Form } from 'src/common/components';\nimport { setChartConfiguration } from 'src/dashboard/actions/dashboardInfo';\nimport CrossFilterScopingForm from './CrossFilterScopingForm';\nimport { StyledForm } from '../nativeFilters/FiltersConfigModal/FiltersConfigModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CrossFilterScopingModal = ({ isOpen, chartId, onClose }) => {var _chartConfig$chartId, _chartConfig$chartId$;\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const chartConfig = useSelector(({ dashboardInfo }) => {var _dashboardInfo$metada;return dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration;});\n  const scope = chartConfig == null ? void 0 : (_chartConfig$chartId = chartConfig[chartId]) == null ? void 0 : (_chartConfig$chartId$ = _chartConfig$chartId.crossFilters) == null ? void 0 : _chartConfig$chartId$.scope;\n  const handleSave = () => {\n    dispatch(setChartConfiguration({\n      ...chartConfig,\n      [chartId]: {\n        id: chartId,\n        crossFilters: { scope: form.getFieldValue('scope') } } }));\n\n\n    onClose();\n  };\n  return ___EmotionJSX(StyledModal, { visible: isOpen, maskClosable: false, title: t('Cross Filter Scoping'), width: \"55%\", destroyOnClose: true, onCancel: onClose, onOk: handleSave, centered: true, footer: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(Button, { key: \"cancel\", buttonStyle: \"secondary\", onClick: onClose },\n    t('Cancel')),\n\n    ___EmotionJSX(Button, { key: \"submit\", buttonStyle: \"primary\", onClick: handleSave },\n    t('Save'))) },\n\n\n  ___EmotionJSX(StyledForm, { preserve: false, form: form, layout: \"vertical\" },\n  ___EmotionJSX(CrossFilterScopingForm, { form: form, scope: scope, chartId: chartId })));\n\n\n};\nexport default CrossFilterScopingModal;","map":null,"metadata":{},"sourceType":"module"}