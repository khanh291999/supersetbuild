{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// TODO: refactor this with `import { AsyncSelect } from src/components/Select`\nimport { Select } from 'src/components/Select';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { getClientErrorObject } from '../../utils/getClientErrorObject';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dataEndpoint: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  mutator: PropTypes.func.isRequired,\n  onAsyncError: PropTypes.func,\n  value: PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.arrayOf(PropTypes.number)]),\n\n  valueRenderer: PropTypes.func,\n  placeholder: PropTypes.string,\n  autoSelect: PropTypes.bool };\n\n\nconst defaultProps = {\n  placeholder: t('Select ...'),\n  onAsyncError: () => {} };\n\n\nclass AsyncSelect extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      options: [] };\n\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchOptions();\n  }\n\n  onChange(option) {\n    this.props.onChange(option);\n  }\n\n  fetchOptions() {\n    this.setState({ isLoading: true });\n    const { mutator, dataEndpoint } = this.props;\n\n    return SupersetClient.get({ endpoint: dataEndpoint }).\n    then(({ json }) => {\n      const options = mutator ? mutator(json) : json;\n\n      this.setState({ options, isLoading: false });\n\n      if (!this.props.value && this.props.autoSelect && options.length > 0) {\n        this.onChange(options[0]);\n      }\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      this.props.onAsyncError(error.error || error.statusText || error);\n      this.setState({ isLoading: false });\n    }));\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(Select, _extends({\n        placeholder: this.props.placeholder,\n        options: this.state.options,\n        value: this.props.value,\n        isLoading: this.state.isLoading,\n        onChange: this.onChange,\n        valueRenderer: this.props.valueRenderer },\n      this.props)));\n\n\n  }}\n\n\nAsyncSelect.propTypes = propTypes;\nAsyncSelect.defaultProps = defaultProps;\n\nexport default AsyncSelect;","map":null,"metadata":{},"sourceType":"module"}