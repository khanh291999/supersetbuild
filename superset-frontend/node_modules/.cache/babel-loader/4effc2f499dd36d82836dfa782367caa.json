{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'react-virtualized';\nimport { createFilter } from 'react-search-input';\nimport { t, styled } from '@superset-ui/core';\nimport { Input } from 'src/common/components';\nimport { Select } from 'src/components';\nimport Loading from 'src/components/Loading';\nimport {\nCHART_TYPE,\nNEW_COMPONENT_SOURCE_TYPE } from\n'src/dashboard/util/componentTypes';\nimport {\nNEW_CHART_ID,\nNEW_COMPONENTS_SOURCE_ID } from\n'src/dashboard/util/constants';\nimport { slicePropShape } from 'src/dashboard/util/propShapes';\nimport AddSliceCard from './AddSliceCard';\nimport AddSliceDragPreview from './dnd/AddSliceDragPreview';\nimport DragDroppable from './dnd/DragDroppable';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  fetchAllSlices: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  slices: PropTypes.objectOf(slicePropShape).isRequired,\n  lastUpdated: PropTypes.number.isRequired,\n  errorMessage: PropTypes.string,\n  userId: PropTypes.string.isRequired,\n  selectedSliceIds: PropTypes.arrayOf(PropTypes.number),\n  editMode: PropTypes.bool,\n  height: PropTypes.number };\n\n\nconst defaultProps = {\n  selectedSliceIds: [],\n  editMode: false,\n  errorMessage: '',\n  height: window.innerHeight };\n\n\nconst KEYS_TO_FILTERS = ['slice_name', 'viz_type', 'datasource_name'];\nconst KEYS_TO_SORT = {\n  slice_name: 'name',\n  viz_type: 'viz type',\n  datasource_name: 'dataset',\n  changed_on: 'recent' };\n\n\nconst DEFAULT_SORT_KEY = 'changed_on';\n\nconst MARGIN_BOTTOM = 16;\nconst SIDEPANE_HEADER_HEIGHT = 30;\nconst SLICE_ADDER_CONTROL_HEIGHT = 64;\nconst DEFAULT_CELL_HEIGHT = 112;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nconst StyledSelect = styled(Select)`\n  margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  min-width: 150px;\n`;\n\nclass SliceAdder extends React.Component {\n  static sortByComparator(attr) {\n    const desc = attr === 'changed_on' ? -1 : 1;\n\n    return (a, b) => {\n      if (a[attr] < b[attr]) {\n        return -1 * desc;\n      }\n      if (a[attr] > b[attr]) {\n        return 1 * desc;\n      }\n      return 0;\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredSlices: [],\n      searchTerm: '',\n      sortBy: DEFAULT_SORT_KEY,\n      selectedSliceIdsSet: new Set(props.selectedSliceIds) };\n\n    this.rowRenderer = this.rowRenderer.bind(this);\n    this.searchUpdated = this.searchUpdated.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  componentDidMount() {\n    this.slicesRequest = this.props.fetchAllSlices(this.props.userId);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const nextState = {};\n    if (nextProps.lastUpdated !== this.props.lastUpdated) {\n      nextState.filteredSlices = Object.values(nextProps.slices).\n      filter(createFilter(this.state.searchTerm, KEYS_TO_FILTERS)).\n      sort(SliceAdder.sortByComparator(this.state.sortBy));\n    }\n\n    if (nextProps.selectedSliceIds !== this.props.selectedSliceIds) {\n      nextState.selectedSliceIdsSet = new Set(nextProps.selectedSliceIds);\n    }\n\n    if (Object.keys(nextState).length) {\n      this.setState(nextState);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.slicesRequest && this.slicesRequest.abort) {\n      this.slicesRequest.abort();\n    }\n  }\n\n  getFilteredSortedSlices(searchTerm, sortBy) {\n    return Object.values(this.props.slices).\n    filter(createFilter(searchTerm, KEYS_TO_FILTERS)).\n    sort(SliceAdder.sortByComparator(sortBy));\n  }\n\n  handleKeyPress(ev) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n\n      this.searchUpdated(ev.target.value);\n    }\n  }\n\n  handleChange(ev) {\n    this.searchUpdated(ev.target.value);\n  }\n\n  searchUpdated(searchTerm) {\n    this.setState((prevState) => ({\n      searchTerm,\n      filteredSlices: this.getFilteredSortedSlices(\n      searchTerm,\n      prevState.sortBy) }));\n\n\n  }\n\n  handleSelect(sortBy) {\n    this.setState((prevState) => ({\n      sortBy,\n      filteredSlices: this.getFilteredSortedSlices(\n      prevState.searchTerm,\n      sortBy) }));\n\n\n  }\n\n  rowRenderer({ key, index, style }) {\n    const { filteredSlices, selectedSliceIdsSet } = this.state;\n    const cellData = filteredSlices[index];\n    const isSelected = selectedSliceIdsSet.has(cellData.slice_id);\n    const type = CHART_TYPE;\n    const id = NEW_CHART_ID;\n\n    const meta = {\n      chartId: cellData.slice_id,\n      sliceName: cellData.slice_name };\n\n    return (\n      ___EmotionJSX(DragDroppable, {\n        key: key,\n        component: { type, id, meta },\n        parentComponent: {\n          id: NEW_COMPONENTS_SOURCE_ID,\n          type: NEW_COMPONENT_SOURCE_TYPE },\n\n        index: index,\n        depth: 0,\n        disableDragDrop: isSelected,\n        editMode: this.props.editMode\n        // we must use a custom drag preview within the List because\n        // it does not seem to work within a fixed-position container\n        , useEmptyDragPreview: true\n        // List library expect style props here\n        // actual style should be applied to nested AddSliceCard component\n        , style: {} },\n\n      ({ dragSourceRef }) =>\n      ___EmotionJSX(AddSliceCard, {\n        innerRef: dragSourceRef,\n        style: style,\n        sliceName: cellData.slice_name,\n        lastModified: cellData.changed_on_humanized,\n        visType: cellData.viz_type,\n        datasourceUrl: cellData.datasource_url,\n        datasourceName: cellData.datasource_name,\n        isSelected: isSelected })));\n\n\n\n\n  }\n\n  render() {\n    const slicesListHeight =\n    this.props.height -\n    SIDEPANE_HEADER_HEIGHT -\n    SLICE_ADDER_CONTROL_HEIGHT -\n    MARGIN_BOTTOM;\n    return (\n      ___EmotionJSX(\"div\", { className: \"slice-adder-container\" },\n      ___EmotionJSX(Controls, null,\n      ___EmotionJSX(Input, {\n        placeholder: t('Filter your charts'),\n        className: \"search-input\",\n        onChange: this.handleChange,\n        onKeyPress: this.handleKeyPress }),\n\n\n      ___EmotionJSX(StyledSelect, {\n        id: \"slice-adder-sortby\",\n        value: this.state.sortBy,\n        onChange: this.handleSelect,\n        options: Object.entries(KEYS_TO_SORT).map(([key, label]) => ({\n          label: `${t('Sort by')} ${label}`,\n          value: key })),\n\n        placeholder: t('Sort by') })),\n\n\n      this.props.isLoading && ___EmotionJSX(Loading, null),\n      !this.props.isLoading && this.state.filteredSlices.length > 0 &&\n      ___EmotionJSX(List, {\n        width: 376,\n        height: slicesListHeight,\n        rowCount: this.state.filteredSlices.length,\n        rowHeight: DEFAULT_CELL_HEIGHT,\n        rowRenderer: this.rowRenderer,\n        searchTerm: this.state.searchTerm,\n        sortBy: this.state.sortBy,\n        selectedSliceIds: this.props.selectedSliceIds }),\n\n\n      this.props.errorMessage &&\n      ___EmotionJSX(\"div\", { className: \"error-message\" }, this.props.errorMessage),\n\n\n      ___EmotionJSX(AddSliceDragPreview, { slices: this.state.filteredSlices })));\n\n\n  }}\n\n\nSliceAdder.propTypes = propTypes;\nSliceAdder.defaultProps = defaultProps;\n\nexport default SliceAdder;","map":null,"metadata":{},"sourceType":"module"}