{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport { styled } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const Table = styled.table`\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n  border-collapse: separate;\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n\n  thead > tr > th {\n    border: 0;\n  }\n\n  tbody {\n    tr:first-of-type > td {\n      border-top: 0;\n    }\n  }\n  th {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n    position: sticky;\n    top: 0;\n\n    &:first-of-type {\n      padding-left: ${({ theme }) => theme.gridUnit * 4}px;\n    }\n\n    &.xs {\n      min-width: 25px;\n    }\n    &.sm {\n      min-width: 50px;\n    }\n    &.md {\n      min-width: 75px;\n    }\n    &.lg {\n      min-width: 100px;\n    }\n    &.xl {\n      min-width: 150px;\n    }\n    &.xxl {\n      min-width: 200px;\n    }\n\n    span {\n      white-space: nowrap;\n      display: flex;\n      align-items: center;\n      line-height: 2;\n    }\n\n    svg {\n      display: inline-block;\n      position: relative;\n    }\n  }\n\n  td {\n    &.xs {\n      width: 25px;\n    }\n    &.sm {\n      width: 50px;\n    }\n    &.md {\n      width: 75px;\n    }\n    &.lg {\n      width: 100px;\n    }\n    &.xl {\n      width: 150px;\n    }\n    &.xxl {\n      width: 200px;\n    }\n  }\n\n  .table-cell-loader {\n    position: relative;\n\n    .loading-bar {\n      background-color: ${({ theme }) => theme.colors.secondary.light4};\n      border-radius: 7px;\n\n      span {\n        visibility: hidden;\n      }\n    }\n\n    &:after {\n      position: absolute;\n      transform: translateY(-50%);\n      top: 50%;\n      left: 0;\n      content: '';\n      display: block;\n      width: 100%;\n      height: 48px;\n      background-image: linear-gradient(\n        100deg,\n        rgba(255, 255, 255, 0),\n        rgba(255, 255, 255, 0.5) 60%,\n        rgba(255, 255, 255, 0) 80%\n      );\n      background-size: 200px 48px;\n      background-position: -100px 0;\n      background-repeat: no-repeat;\n      animation: loading-shimmer 1s infinite;\n    }\n  }\n\n  .actions {\n    white-space: nowrap;\n    min-width: 100px;\n\n    svg,\n    i {\n      margin-right: 8px;\n\n      &:hover {\n        path {\n          fill: ${({ theme }) => theme.colors.primary.base};\n        }\n      }\n    }\n  }\n\n  .table-row {\n    .actions {\n      opacity: 0;\n      font-size: ${({ theme }) => theme.typography.sizes.xl}px;\n    }\n\n    &:hover {\n      background-color: ${({ theme }) => theme.colors.secondary.light5};\n\n      .actions {\n        opacity: 1;\n        transition: opacity ease-in ${({ theme }) => theme.transitionTiming}s;\n      }\n    }\n  }\n\n  .table-row-selected {\n    background-color: ${({ theme }) => theme.colors.secondary.light4};\n\n    &:hover {\n      background-color: ${({ theme }) => theme.colors.secondary.light4};\n    }\n  }\n\n  .table-cell {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    max-width: 320px;\n    line-height: 1;\n    vertical-align: middle;\n    &:first-of-type {\n      padding-left: ${({ theme }) => theme.gridUnit * 4}px;\n    }\n  }\n\n  @keyframes loading-shimmer {\n    40% {\n      background-position: 100% 0;\n    }\n\n    100% {\n      background-position: 100% 0;\n    }\n  }\n`;\nTable.displayName = 'table';\nexport default /*#__PURE__*/React.memo(({ getTableProps, getTableBodyProps, prepareRow, headerGroups, columns, rows, loading, highlightRowId }) => ___EmotionJSX(Table, _extends({}, getTableProps(), { className: \"table table-hover\" }),\n___EmotionJSX(\"thead\", null,\nheaderGroups.map((headerGroup) => ___EmotionJSX(\"tr\", headerGroup.getHeaderGroupProps(),\nheaderGroup.headers.map((column) => {\n  let sortIcon = ___EmotionJSX(Icons.Sort, null);\n  if (column.isSorted && column.isSortedDesc) {\n    sortIcon = ___EmotionJSX(Icons.SortDesc, null);\n  } else\n  if (column.isSorted && !column.isSortedDesc) {\n    sortIcon = ___EmotionJSX(Icons.SortAsc, null);\n  }\n  return column.hidden ? null : ___EmotionJSX(\"th\", _extends({}, column.getHeaderProps(column.canSort ? column.getSortByToggleProps() : {}), { className: cx({\n      [column.size || '']: column.size }) }),\n\n  ___EmotionJSX(\"span\", null,\n  column.render('Header'),\n  column.canSort && sortIcon));\n\n\n})))),\n\n\n___EmotionJSX(\"tbody\", getTableBodyProps(),\nloading &&\nrows.length === 0 &&\n[...new Array(25)].map((_, i) => ___EmotionJSX(\"tr\", { key: i },\ncolumns.map((column, i2) => {\n  if (column.hidden)\n  return null;\n  return ___EmotionJSX(\"td\", { key: i2, className: cx('table-cell', {\n      'table-cell-loader': loading,\n      [column.size || '']: column.size }) },\n\n  ___EmotionJSX(\"span\", { className: \"loading-bar\", role: \"progressbar\" },\n  ___EmotionJSX(\"span\", null, \"LOADING\")));\n\n\n}))),\n\nrows.length > 0 &&\nrows.map((row) => {\n  prepareRow(row);\n  // @ts-ignore\n  const rowId = row.original.id;\n  return ___EmotionJSX(\"tr\", _extends({}, row.getRowProps(), { className: cx('table-row', {\n      'table-row-selected': row.isSelected ||\n      typeof rowId !== 'undefined' && rowId === highlightRowId }) }),\n\n  row.cells.map((cell) => {\n    if (cell.column.hidden)\n    return null;\n    const columnCellProps = cell.column.cellProps || {};\n    return ___EmotionJSX(\"td\", _extends({ className: cx('table-cell', {\n        'table-cell-loader': loading,\n        [cell.column.size || '']: cell.column.size }) },\n    cell.getCellProps(), columnCellProps),\n    ___EmotionJSX(\"span\", { className: cx({ 'loading-bar': loading }), role: loading ? 'progressbar' : undefined },\n    ___EmotionJSX(\"span\", null, cell.render('Cell'))));\n\n\n  }));\n\n}))));","map":null,"metadata":{},"sourceType":"module"}