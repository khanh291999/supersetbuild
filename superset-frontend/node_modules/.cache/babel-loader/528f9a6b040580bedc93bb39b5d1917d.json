{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { styled, t, css } from '@superset-ui/core';\nimport Popover from 'src/components/Popover';\nimport Icons from 'src/components/Icons';\nimport { Pill } from 'src/dashboard/components/FiltersBadge/Styles';\nimport FilterControl from 'src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterControl';\nimport CascadeFilterControl from 'src/dashboard/components/nativeFilters/FilterBar/CascadeFilters/CascadeFilterControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledTitleBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.grayscale.light4};\n  margin: ${({ theme }) => theme.gridUnit * -1}px\n    ${({ theme }) => theme.gridUnit * -4}px; // to override default antd padding\n  padding: ${({ theme }) => theme.gridUnit * 2}px\n    ${({ theme }) => theme.gridUnit * 4}px;\n\n  & > *:last-child {\n    cursor: pointer;\n  }\n`;\nconst StyledTitle = styled.h4`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n  margin: 0;\n  padding: 0;\n`;\nconst IconStyles = (theme) => css`\n  margin-right: ${theme.gridUnit}px;\n  color: ${theme.colors.grayscale.dark1};\n  width: ${theme.gridUnit * 4}px;\n`;\nconst StyledPill = styled(Pill)`\n  padding: ${({ theme }) => theme.gridUnit}px\n    ${({ theme }) => theme.gridUnit * 2}px;\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  background: ${({ theme }) => theme.colors.grayscale.light1};\n`;\nconst ContentWrapper = styled.div`\n  max-height: 700px;\n  overflow-y: auto;\n`;\nconst CascadePopover = ({ dataMaskSelected, filter, visible, onVisibleChange, onFilterSelectionChange, directPathToChild, inView }) => {var _filter$cascadeChildr;\n  const [currentPathToChild, setCurrentPathToChild] = useState();\n  const dataMask = dataMaskSelected[filter.id];\n  useEffect(() => {\n    setCurrentPathToChild(directPathToChild);\n    // clear local copy of directPathToChild after 500ms\n    // to prevent triggering multiple focus\n    const timeout = setTimeout(() => setCurrentPathToChild(undefined), 500);\n    return () => clearTimeout(timeout);\n  }, [directPathToChild, setCurrentPathToChild]);\n  const getActiveChildren = useCallback((filter) => {var _dataMask$filterState;\n    const children = filter.cascadeChildren || [];\n    const currentValue = dataMask == null ? void 0 : (_dataMask$filterState = dataMask.filterState) == null ? void 0 : _dataMask$filterState.value;\n    const activeChildren = children.flatMap((childFilter) => getActiveChildren(childFilter) || []);\n    if (activeChildren.length > 0) {\n      return activeChildren;\n    }\n    if (currentValue !== undefined && currentValue !== null) {\n      return [filter];\n    }\n    return null;\n  }, [dataMask]);\n  const getAllFilters = (filter) => {\n    const children = filter.cascadeChildren || [];\n    const allChildren = children.flatMap(getAllFilters);\n    return [filter, ...allChildren];\n  };\n  const allFilters = getAllFilters(filter);\n  const activeFilters = useMemo(() => getActiveChildren(filter) || [filter], [\n  filter,\n  getActiveChildren]);\n\n  useEffect(() => {\n    const focusedFilterId = currentPathToChild == null ? void 0 : currentPathToChild[0];\n    // filters not directly displayed in the Filter Bar\n    const inactiveFilters = allFilters.filter((filterEl) => !activeFilters.includes(filterEl));\n    const focusedInactiveFilter = inactiveFilters.some((cascadeChild) => cascadeChild.id === focusedFilterId);\n    if (focusedInactiveFilter) {\n      onVisibleChange(true);\n    }\n  }, [currentPathToChild]);\n  if (!((_filter$cascadeChildr = filter.cascadeChildren) != null && _filter$cascadeChildr.length)) {\n    return ___EmotionJSX(FilterControl, { dataMaskSelected: dataMaskSelected, filter: filter, directPathToChild: directPathToChild, onFilterSelectionChange: onFilterSelectionChange, inView: inView });\n  }\n  const title = ___EmotionJSX(StyledTitleBox, null,\n  ___EmotionJSX(StyledTitle, null,\n  ___EmotionJSX(Icons.Edit, { iconSize: \"l\", css: (theme) => IconStyles(theme) }),\n  t('Select parent filters'), \" (\", allFilters.length, \")\"),\n\n  ___EmotionJSX(Icons.Close, { iconSize: \"l\", css: (theme) => IconStyles(theme), onClick: () => onVisibleChange(false) }));\n\n  const content = ___EmotionJSX(ContentWrapper, null,\n  ___EmotionJSX(CascadeFilterControl, { dataMaskSelected: dataMaskSelected, key: filter.id, filter: filter, directPathToChild: visible ? currentPathToChild : undefined, onFilterSelectionChange: onFilterSelectionChange }));\n\n  return ___EmotionJSX(Popover, { content: content, title: title, trigger: \"click\", visible: visible, onVisibleChange: onVisibleChange, placement: \"rightTop\", id: filter.id, overlayStyle: { width: '400px' } },\n  ___EmotionJSX(\"div\", null,\n  activeFilters.map((activeFilter) => ___EmotionJSX(FilterControl, { dataMaskSelected: dataMaskSelected, key: activeFilter.id, filter: activeFilter, onFilterSelectionChange: onFilterSelectionChange, directPathToChild: currentPathToChild, inView: inView, icon: ___EmotionJSX(React.Fragment, null,\n    filter.cascadeChildren.length !== 0 && ___EmotionJSX(StyledPill, { onClick: () => onVisibleChange(true) },\n    ___EmotionJSX(Icons.Filter, { iconSize: \"m\" }), \" \", allFilters.length)) }))));\n\n\n\n\n};\nexport default CascadePopover;","map":null,"metadata":{},"sourceType":"module"}