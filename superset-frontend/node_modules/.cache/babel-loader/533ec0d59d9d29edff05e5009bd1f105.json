{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport moment from 'moment';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Icons from 'src/components/Icons';\nimport SavedQueryPreviewModal from './SavedQueryPreviewModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the saved queries. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more saved queries that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\nfunction SavedQueryList({ addDangerToast, addSuccessToast, user }) {\n  const { state: { loading, resourceCount: queryCount, resourceCollection: queries, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('saved_query', t('Saved queries'), addDangerToast);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] = useState(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] = useState(null);\n  const [importingSavedQuery, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const openNewQuery = () => {\n    window.open(`${window.location.origin}/superset/sqllab?new=true`);\n  };\n  const handleSavedQueryPreview = useCallback((id) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${id}` }).\n    then(({ json = {} }) => {\n      setSavedQueryCurrentlyPreviewing({ ...json.result });\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue previewing the selected query %s', errMsg))));\n  }, [addDangerToast]);\n  const menuData = {\n    activeChild: 'Saved queries',\n    ...commonMenuData };\n\n  const subMenuButtons = [];\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary' });\n\n  }\n  subMenuButtons.push({\n    name: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Query')),\n\n    onClick: openNewQuery,\n    buttonStyle: 'primary' });\n\n  if (canCreate && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import queries'), placement: \"bottomRight\" },\n      ___EmotionJSX(Icons.Import, null)),\n\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button' });\n\n  }\n  menuData.buttons = subMenuButtons;\n  // Action methods\n  const openInSqlLab = (id) => {\n    window.open(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`);\n  };\n  const copyQueryLink = useCallback((id) => {\n    copyTextToClipboard(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`).\n    then(() => {\n      addSuccessToast(t('Link Copied!'));\n    }).\n    catch(() => {\n      addDangerToast(t('Sorry, your browser does not support copying.'));\n    });\n  }, [addDangerToast, addSuccessToast]);\n  const handleQueryDelete = ({ id, label }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}` }).\n    then(() => {\n      refreshData();\n      setQueryCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', label));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', label, errMsg))));\n  };\n  const handleBulkSavedQueryExport = (savedQueriesToExport) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const handleBulkQueryDelete = (queriesToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(queriesToDelete.map(({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected queries: %s', errMsg))));\n  };\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'label',\n    Header: t('Name') },\n\n  {\n    accessor: 'database.database_name',\n    Header: t('Database'),\n    size: 'xl' },\n\n  {\n    accessor: 'database',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    accessor: 'schema',\n    Header: t('Schema'),\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { sql_tables: tables = [] } } }) => {\n      const names = tables.map((table) => table.table);\n      const main = (names == null ? void 0 : names.shift()) || '';\n      if (names.length) {\n        return ___EmotionJSX(StyledTableLabel, null,\n        ___EmotionJSX(\"span\", null, main),\n        ___EmotionJSX(Popover, { placement: \"right\", title: t('TABLES'), trigger: \"click\", content: ___EmotionJSX(React.Fragment, null,\n          names.map((name) => ___EmotionJSX(StyledPopoverItem, { key: name }, name))) },\n\n        ___EmotionJSX(\"span\", { className: \"count\" }, \"(+\", names.length, \")\")));\n\n\n      }\n      return main;\n    },\n    accessor: 'sql_tables',\n    Header: t('Tables'),\n    size: 'xl',\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original: { created_on: createdOn } } }) => {\n      const date = new Date(createdOn);\n      const utc = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n      return moment(utc).fromNow();\n    },\n    Header: t('Created on'),\n    accessor: 'created_on',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => changedOn,\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handlePreview = () => {\n        handleSavedQueryPreview(original.id);\n      };\n      const handleEdit = () => openInSqlLab(original.id);\n      const handleCopy = () => copyQueryLink(original.id);\n      const handleExport = () => handleBulkSavedQueryExport([original]);\n      const handleDelete = () => setQueryCurrentlyDeleting(original);\n      const actions = [\n      {\n        label: 'preview-action',\n        tooltip: t('Query preview'),\n        placement: 'bottom',\n        icon: 'Binoculars',\n        onClick: handlePreview },\n\n      canEdit && {\n        label: 'edit-action',\n        tooltip: t('Edit query'),\n        placement: 'bottom',\n        icon: 'Edit',\n        onClick: handleEdit },\n\n      {\n        label: 'copy-action',\n        tooltip: t('Copy query URL'),\n        placement: 'bottom',\n        icon: 'Copy',\n        onClick: handleCopy },\n\n      canExport && {\n        label: 'export-action',\n        tooltip: t('Export query'),\n        placement: 'bottom',\n        icon: 'Share',\n        onClick: handleExport },\n\n      canDelete && {\n        label: 'delete-action',\n        tooltip: t('Delete query'),\n        placement: 'bottom',\n        icon: 'Trash',\n        onClick: handleDelete }].\n\n      filter((item) => !!item);\n      return ___EmotionJSX(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true }],\n\n  [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Database'),\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('saved_query', 'database', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dataset datasource values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('Schema'),\n    id: 'schema',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('saved_query', 'schema', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching schema values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('Search'),\n    id: 'label',\n    input: 'search',\n    operator: FilterOperator.allText }],\n\n  [addDangerToast]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  queryCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('This action will permanently delete the saved query.'), onConfirm: () => {\n      if (queryCurrentlyDeleting) {\n        handleQueryDelete(queryCurrentlyDeleting);\n      }\n    }, onHide: () => setQueryCurrentlyDeleting(null), open: true, title: t('Delete Query?') }),\n  savedQueryCurrentlyPreviewing && ___EmotionJSX(SavedQueryPreviewModal, { fetchData: handleSavedQueryPreview, onHide: () => setSavedQueryCurrentlyPreviewing(null), savedQuery: savedQueryCurrentlyPreviewing, queries: queries, openInSqlLab: openInSqlLab, show: true }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected queries?'), onConfirm: handleBulkQueryDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        onSelect: confirmDelete,\n        type: 'danger' });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkSavedQueryExport });\n\n    }\n    return ___EmotionJSX(ListView, { className: \"saved_query-list-view\", columns: columns, count: queryCount, data: queries, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, highlightRowId: savedQueryCurrentlyPreviewing == null ? void 0 : savedQueryCurrentlyPreviewing.id });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"saved_query\", resourceLabel: t('queries'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleSavedQueryImport, show: importingSavedQuery, onHide: closeSavedQueryImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(SavedQueryList);","map":null,"metadata":{},"sourceType":"module"}