{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragLayer } from 'react-dnd';\n\nimport AddSliceCard from '../AddSliceCard';\nimport { slicePropShape } from '../../util/propShapes';\nimport {\nNEW_COMPONENT_SOURCE_TYPE,\nCHART_TYPE } from\n'../../util/componentTypes';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst staticCardStyles = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  top: 0,\n  left: 0,\n  zIndex: 101, // this should be higher than top-level tabs\n  width: 376 - 2 * 16 };\n\n\nconst propTypes = {\n  dragItem: PropTypes.shape({\n    index: PropTypes.number.isRequired }),\n\n  slices: PropTypes.arrayOf(slicePropShape),\n  isDragging: PropTypes.bool.isRequired,\n  currentOffset: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired }) };\n\n\n\nconst defaultProps = {\n  currentOffset: null,\n  dragItem: null,\n  slices: null };\n\n\nfunction AddSliceDragPreview({ dragItem, slices, isDragging, currentOffset }) {\n  if (!isDragging || !currentOffset || !dragItem || !slices) return null;\n\n  const slice = slices[dragItem.index];\n\n  // make sure it's a new component and a chart\n  const shouldRender =\n  slice &&\n  dragItem.parentType === NEW_COMPONENT_SOURCE_TYPE &&\n  dragItem.type === CHART_TYPE;\n\n  return !shouldRender ? null :\n  ___EmotionJSX(AddSliceCard, {\n    style: {\n      ...staticCardStyles,\n      transform: `translate(${currentOffset.x}px, ${currentOffset.y}px)` },\n\n    sliceName: slice.slice_name,\n    lastModified: slice.changed_on_humanized,\n    visType: slice.viz_type,\n    datasourceUrl: slice.datasource_url,\n    datasourceName: slice.datasource_name });\n\n\n}\n\nAddSliceDragPreview.propTypes = propTypes;\nAddSliceDragPreview.defaultProps = defaultProps;\n\n// This injects these props into the component\nexport default DragLayer((monitor) => ({\n  dragItem: monitor.getItem(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging() }))(\nAddSliceDragPreview);","map":null,"metadata":{},"sourceType":"module"}