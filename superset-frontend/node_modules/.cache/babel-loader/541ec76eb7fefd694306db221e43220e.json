{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getFilterScopeNodesTree from './getFilterScopeNodesTree';\nimport getFilterScopeParentNodes from './getFilterScopeParentNodes';\nimport getKeyForFilterScopeTree from './getKeyForFilterScopeTree';\nimport getSelectedChartIdForFilterScopeTree from './getSelectedChartIdForFilterScopeTree';\n\nexport default function buildFilterScopeTreeEntry({\n  checkedFilterFields = [],\n  activeFilterField,\n  filterScopeMap = {},\n  layout = {} })\n{\n  const key = getKeyForFilterScopeTree({\n    checkedFilterFields,\n    activeFilterField });\n\n  const editingList = activeFilterField ?\n  [activeFilterField] :\n  checkedFilterFields;\n  const selectedChartId = getSelectedChartIdForFilterScopeTree({\n    checkedFilterFields,\n    activeFilterField });\n\n  const nodes = getFilterScopeNodesTree({\n    components: layout,\n    filterFields: editingList,\n    selectedChartId });\n\n  const checkedChartIdSet = new Set();\n  editingList.forEach((filterField) => {\n    (filterScopeMap[filterField].checked || []).forEach((chartId) => {\n      checkedChartIdSet.add(`${chartId}:${filterField}`);\n    });\n  });\n  const checked = [...checkedChartIdSet];\n  const expanded = filterScopeMap[key] ?\n  filterScopeMap[key].expanded :\n  getFilterScopeParentNodes(nodes, 1);\n\n  return {\n    [key]: {\n      nodes,\n      nodesFiltered: [...nodes],\n      checked,\n      expanded } };\n\n\n}","map":null,"metadata":{},"sourceType":"module"}