{"ast":null,"code":"import { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_ROOT_ID } from './constants';\n// Looking for affected chart scopes and values\nexport const findAffectedCharts = ({ child, layout, scope, activeFilters, filterId, extraFormData }) => {var _layout$child, _layout$child$meta;\n  const chartId = (_layout$child = layout[child]) == null ? void 0 : (_layout$child$meta = _layout$child.meta) == null ? void 0 : _layout$child$meta.chartId;\n  if (layout[child].type === CHART_TYPE) {\n    // Ignore excluded charts\n    if (scope.excluded.includes(chartId)) {\n      return;\n    }\n    if (!activeFilters[filterId]) {\n      // Small mutation but simplify logic\n      // eslint-disable-next-line no-param-reassign\n      activeFilters[filterId] = {\n        scope: [],\n        values: extraFormData };\n\n    }\n    // Add not excluded chart scopes(to know what charts refresh) and values(refresh only if its value changed)\n    activeFilters[filterId].scope.push(chartId);\n    return;\n  }\n  // If child is not chart, recursive iterate over its children\n  layout[child].children.forEach((child) => findAffectedCharts({\n    child,\n    layout,\n    scope,\n    activeFilters,\n    filterId,\n    extraFormData }));\n\n};\nexport const getRelevantDataMask = (dataMask, prop) => Object.values(dataMask).\nfilter((item) => item[prop]).\nreduce((prev, next) => ({ ...prev, [next.id]: prop ? next[prop] : next }), {});\nexport const getAllActiveFilters = ({ chartConfiguration, nativeFilters, dataMask, layout }) => {\n  const activeFilters = {};\n  // Combine native filters with cross filters, because they have similar logic\n  Object.values(dataMask).forEach(({ id: filterId, extraFormData }) => {var _ref, _nativeFilters$filter, _nativeFilters$filter2, _chartConfiguration$f, _chartConfiguration$f2;\n    const scope = (_ref = (_nativeFilters$filter = nativeFilters == null ? void 0 : (_nativeFilters$filter2 = nativeFilters[filterId]) == null ? void 0 : _nativeFilters$filter2.scope) != null ? _nativeFilters$filter :\n    chartConfiguration == null ? void 0 : (_chartConfiguration$f = chartConfiguration[filterId]) == null ? void 0 : (_chartConfiguration$f2 = _chartConfiguration$f.crossFilters) == null ? void 0 : _chartConfiguration$f2.scope) != null ? _ref : {\n      rootPath: [DASHBOARD_ROOT_ID],\n      excluded: [filterId] };\n\n    // Iterate over all roots to find all affected charts\n    scope.rootPath.forEach((layoutItemId) => {var _layout$layoutItemId, _layout$layoutItemId$;\n      (_layout$layoutItemId = layout[layoutItemId]) == null ? void 0 : (_layout$layoutItemId$ = _layout$layoutItemId.children) == null ? void 0 : _layout$layoutItemId$.forEach((child) => {\n        // Need exclude from affected charts, charts that located in scope `excluded`\n        findAffectedCharts({\n          child,\n          layout,\n          scope,\n          activeFilters,\n          filterId,\n          extraFormData });\n\n      });\n    });\n  });\n  return activeFilters;\n};","map":null,"metadata":{},"sourceType":"module"}