{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport DragDroppable from 'src/dashboard/components/dnd/DragDroppable';\nimport DragHandle from 'src/dashboard/components/dnd/DragHandle';\nimport EditableTitle from 'src/components/EditableTitle';\nimport AnchorLink from 'src/components/AnchorLink';\nimport HoverMenu from 'src/dashboard/components/menu/HoverMenu';\nimport WithPopoverMenu from 'src/dashboard/components/menu/WithPopoverMenu';\nimport BackgroundStyleDropdown from 'src/dashboard/components/menu/BackgroundStyleDropdown';\nimport DeleteComponentButton from 'src/dashboard/components/DeleteComponentButton';\nimport PopoverDropdown from 'src/components/PopoverDropdown';\nimport headerStyleOptions from 'src/dashboard/util/headerStyleOptions';\nimport backgroundStyleOptions from 'src/dashboard/util/backgroundStyleOptions';\nimport { componentShape } from 'src/dashboard/util/propShapes';\nimport {\nSMALL_HEADER,\nBACKGROUND_TRANSPARENT } from\n'src/dashboard/util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  depth: PropTypes.number.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  filters: PropTypes.object.isRequired,\n\n  // redux\n  handleComponentDrop: PropTypes.func.isRequired,\n  deleteComponent: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired };\n\n\nconst defaultProps = {};\n\nclass Header extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFocused: false };\n\n    this.handleDeleteComponent = this.handleDeleteComponent.bind(this);\n    this.handleChangeFocus = this.handleChangeFocus.bind(this);\n    this.handleUpdateMeta = this.handleUpdateMeta.bind(this);\n    this.handleChangeSize = this.handleUpdateMeta.bind(this, 'headerSize');\n    this.handleChangeBackground = this.handleUpdateMeta.bind(\n    this,\n    'background');\n\n    this.handleChangeText = this.handleUpdateMeta.bind(this, 'text');\n  }\n\n  handleChangeFocus(nextFocus) {\n    this.setState(() => ({ isFocused: nextFocus }));\n  }\n\n  handleUpdateMeta(metaKey, nextValue) {\n    const { updateComponents, component } = this.props;\n    if (nextValue && component.meta[metaKey] !== nextValue) {\n      updateComponents({\n        [component.id]: {\n          ...component,\n          meta: {\n            ...component.meta,\n            [metaKey]: nextValue } } });\n\n\n\n    }\n  }\n\n  handleDeleteComponent() {\n    const { deleteComponent, id, parentId } = this.props;\n    deleteComponent(id, parentId);\n  }\n\n  render() {\n    const { isFocused } = this.state;\n\n    const {\n      component,\n      depth,\n      parentComponent,\n      index,\n      handleComponentDrop,\n      editMode,\n      filters } =\n    this.props;\n\n    const headerStyle = headerStyleOptions.find(\n    (opt) => opt.value === (component.meta.headerSize || SMALL_HEADER));\n\n\n    const rowStyle = backgroundStyleOptions.find(\n    (opt) =>\n    opt.value === (component.meta.background || BACKGROUND_TRANSPARENT));\n\n\n    return (\n      ___EmotionJSX(DragDroppable, {\n        component: component,\n        parentComponent: parentComponent,\n        orientation: \"row\",\n        index: index,\n        depth: depth,\n        onDrop: handleComponentDrop,\n        disableDragDrop: isFocused,\n        editMode: editMode },\n\n      ({ dropIndicatorProps, dragSourceRef }) =>\n      ___EmotionJSX(\"div\", { ref: dragSourceRef },\n      editMode &&\n      depth <= 2 && // drag handle looks bad when nested\n      ___EmotionJSX(HoverMenu, { position: \"left\" },\n      ___EmotionJSX(DragHandle, { position: \"left\" })),\n\n\n\n      ___EmotionJSX(WithPopoverMenu, {\n        onChangeFocus: this.handleChangeFocus,\n        menuItems: [\n        ___EmotionJSX(PopoverDropdown, {\n          id: `${component.id}-header-style`,\n          options: headerStyleOptions,\n          value: component.meta.headerSize,\n          onChange: this.handleChangeSize }),\n\n        ___EmotionJSX(BackgroundStyleDropdown, {\n          id: `${component.id}-background`,\n          value: component.meta.background,\n          onChange: this.handleChangeBackground }),\n\n        ___EmotionJSX(DeleteComponentButton, { onDelete: this.handleDeleteComponent })],\n\n        editMode: editMode },\n\n      ___EmotionJSX(\"div\", {\n        className: cx(\n        'dashboard-component',\n        'dashboard-component-header',\n        headerStyle.className,\n        rowStyle.className) },\n\n\n      ___EmotionJSX(EditableTitle, {\n        title: component.meta.text,\n        canEdit: editMode,\n        onSaveTitle: this.handleChangeText,\n        showTooltip: false }),\n\n      !editMode &&\n      ___EmotionJSX(AnchorLink, {\n        anchorLinkId: component.id,\n        filters: filters,\n        showShortLinkButton: true }))),\n\n\n\n\n\n      dropIndicatorProps && ___EmotionJSX(\"div\", dropIndicatorProps))));\n\n\n\n\n  }}\n\n\nHeader.propTypes = propTypes;\nHeader.defaultProps = defaultProps;\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}