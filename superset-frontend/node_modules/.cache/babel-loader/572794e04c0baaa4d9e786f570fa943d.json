{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'src/common/components';\nimport { t } from '@superset-ui/core';\n\nimport Label from 'src/components/Label';\nimport Popover from 'src/components/Popover';\nimport PopoverSection from 'src/components/PopoverSection';\nimport Checkbox from 'src/components/Checkbox';\nimport ControlHeader from '../ControlHeader';\nimport SelectControl from './SelectControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst spatialTypes = {\n  latlong: 'latlong',\n  delimited: 'delimited',\n  geohash: 'geohash' };\n\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.object,\n  animation: PropTypes.bool,\n  choices: PropTypes.array };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  animation: true,\n  choices: [] };\n\n\nexport default class SpatialControl extends React.Component {\n  constructor(props) {\n    super(props);\n    const v = props.value || {};\n    let defaultCol;\n    if (props.choices.length > 0) {\n      defaultCol = props.choices[0][0];\n    }\n    this.state = {\n      type: v.type || spatialTypes.latlong,\n      delimiter: v.delimiter || ',',\n      latCol: v.latCol || defaultCol,\n      lonCol: v.lonCol || defaultCol,\n      lonlatCol: v.lonlatCol || defaultCol,\n      reverseCheckbox: v.reverseCheckbox || false,\n      geohashCol: v.geohashCol || defaultCol,\n      value: null,\n      errors: [] };\n\n    this.toggleCheckbox = this.toggleCheckbox.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.renderReverseCheckbox = this.renderReverseCheckbox.bind(this);\n  }\n\n  componentDidMount() {\n    this.onChange();\n  }\n\n  onChange() {\n    const { type } = this.state;\n    const value = { type };\n    const errors = [];\n    const errMsg = t('Invalid lat/long configuration.');\n    if (type === spatialTypes.latlong) {\n      value.latCol = this.state.latCol;\n      value.lonCol = this.state.lonCol;\n      if (!value.lonCol || !value.latCol) {\n        errors.push(errMsg);\n      }\n    } else if (type === spatialTypes.delimited) {\n      value.lonlatCol = this.state.lonlatCol;\n      value.delimiter = this.state.delimiter;\n      value.reverseCheckbox = this.state.reverseCheckbox;\n      if (!value.lonlatCol || !value.delimiter) {\n        errors.push(errMsg);\n      }\n    } else if (type === spatialTypes.geohash) {\n      value.geohashCol = this.state.geohashCol;\n      value.reverseCheckbox = this.state.reverseCheckbox;\n      if (!value.geohashCol) {\n        errors.push(errMsg);\n      }\n    }\n    this.setState({ value, errors });\n    this.props.onChange(value, errors);\n  }\n\n  setType(type) {\n    this.setState({ type }, this.onChange);\n  }\n\n  toggleCheckbox() {\n    this.setState(\n    (prevState) => ({ reverseCheckbox: !prevState.reverseCheckbox }),\n    this.onChange);\n\n  }\n\n  renderLabelContent() {\n    if (this.state.errors.length > 0) {\n      return 'N/A';\n    }\n    if (this.state.type === spatialTypes.latlong) {\n      return `${this.state.lonCol} | ${this.state.latCol}`;\n    }\n    if (this.state.type === spatialTypes.delimited) {\n      return `${this.state.lonlatCol}`;\n    }\n    if (this.state.type === spatialTypes.geohash) {\n      return `${this.state.geohashCol}`;\n    }\n    return null;\n  }\n\n  renderSelect(name, type) {\n    return (\n      ___EmotionJSX(SelectControl, {\n        ariaLabel: name,\n        name: name,\n        choices: this.props.choices,\n        value: this.state[name],\n        clearable: false,\n        onFocus: () => {\n          this.setType(type);\n        },\n        onChange: (value) => {\n          this.setState({ [name]: value }, this.onChange);\n        } }));\n\n\n  }\n\n  renderReverseCheckbox() {\n    return (\n      ___EmotionJSX(\"span\", null,\n      t('Reverse lat/long '),\n      ___EmotionJSX(Checkbox, {\n        checked: this.state.reverseCheckbox,\n        onChange: this.toggleCheckbox })));\n\n\n\n  }\n\n  renderPopoverContent() {\n    return (\n      ___EmotionJSX(\"div\", { style: { width: '300px' } },\n      ___EmotionJSX(PopoverSection, {\n        title: t('Longitude & Latitude columns'),\n        isSelected: this.state.type === spatialTypes.latlong,\n        onSelect: this.setType.bind(this, spatialTypes.latlong) },\n\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 }, \"Longitude\",\n\n      this.renderSelect('lonCol', spatialTypes.latlong)),\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 }, \"Latitude\",\n\n      this.renderSelect('latCol', spatialTypes.latlong)))),\n\n\n\n      ___EmotionJSX(PopoverSection, {\n        title: t('Delimited long & lat single column'),\n        info: t(\n        'Multiple formats accepted, look the geopy.points ' +\n        'Python library for more details'),\n\n        isSelected: this.state.type === spatialTypes.delimited,\n        onSelect: this.setType.bind(this, spatialTypes.delimited) },\n\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      t('Column'),\n      this.renderSelect('lonlatCol', spatialTypes.delimited)),\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      this.renderReverseCheckbox()))),\n\n\n\n      ___EmotionJSX(PopoverSection, {\n        title: t('Geohash'),\n        isSelected: this.state.type === spatialTypes.geohash,\n        onSelect: this.setType.bind(this, spatialTypes.geohash) },\n\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 }, \"Column\",\n\n      this.renderSelect('geohashCol', spatialTypes.geohash)),\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      this.renderReverseCheckbox())))));\n\n\n\n\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, this.props),\n      ___EmotionJSX(Popover, {\n        content: this.renderPopoverContent(),\n        placement: \"topLeft\" // so that popover doesn't move when label changes\n        , trigger: \"click\" },\n\n      ___EmotionJSX(Label, { className: \"pointer\" }, this.renderLabelContent()))));\n\n\n\n  }}\n\n\nSpatialControl.propTypes = propTypes;\nSpatialControl.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}