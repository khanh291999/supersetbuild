{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, useTheme, styled } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { storeQuery } from 'src/utils/common';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledIcon = styled(Icons.Link)`\n  &:first-of-type {\n    margin: 0;\n    display: flex;\n    svg {\n      margin: 0;\n    }\n  }\n`;\nfunction ShareSqlLabQuery({ queryEditor, addDangerToast }) {\n  const theme = useTheme();\n  const getCopyUrlForKvStore = (callback) => {\n    const { dbId, title, schema, autorun, sql } = queryEditor;\n    const sharedQuery = { dbId, title, schema, autorun, sql };\n    return storeQuery(sharedQuery).\n    then((shortUrl) => {\n      callback(shortUrl);\n    }).\n    catch((response) => {\n      getClientErrorObject(response).then(() => {\n        addDangerToast(t('There was an error with your request'));\n      });\n    });\n  };\n  const getCopyUrlForSavedQuery = (callback) => {\n    let savedQueryToastContent;\n    if (queryEditor.remoteId) {\n      savedQueryToastContent = `${window.location.origin + window.location.pathname}?savedQueryId=${queryEditor.remoteId}`;\n      callback(savedQueryToastContent);\n    } else\n    {\n      savedQueryToastContent = t('Please save the query to enable sharing');\n      callback(savedQueryToastContent);\n    }\n  };\n  const getCopyUrl = (callback) => {\n    if (isFeatureEnabled(FeatureFlag.SHARE_QUERIES_VIA_KV_STORE)) {\n      return getCopyUrlForKvStore(callback);\n    }\n    return getCopyUrlForSavedQuery(callback);\n  };\n  const buildButton = (canShare) => {\n    const tooltip = canShare ?\n    t('Copy query link to your clipboard') :\n    t('Save the query to enable this feature');\n    return ___EmotionJSX(Button, { buttonSize: \"small\", tooltip: tooltip, disabled: !canShare },\n    ___EmotionJSX(StyledIcon, { iconColor: canShare ? theme.colors.primary.base : theme.colors.grayscale.base, iconSize: \"xl\" }),\n    t('Copy link'));\n\n  };\n  const canShare = !!queryEditor.remoteId ||\n  isFeatureEnabled(FeatureFlag.SHARE_QUERIES_VIA_KV_STORE);\n  return ___EmotionJSX(React.Fragment, null,\n  canShare ? ___EmotionJSX(CopyToClipboard, { getText: getCopyUrl, wrapped: false, copyNode: buildButton(canShare) }) : buildButton(canShare));\n\n}\nexport default withToasts(ShareSqlLabQuery);","map":null,"metadata":{},"sourceType":"module"}