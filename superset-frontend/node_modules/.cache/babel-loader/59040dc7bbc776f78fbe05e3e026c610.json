{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport { t } from '@superset-ui/core';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Collapse from 'src/components/Collapse';\nimport { StyledInputContainer, StyledJsonEditor, StyledExpandableForm, antdCollapseStyles, no_margin_bottom } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ExtraOptions = ({ db, onInputChange, onTextChange, onEditorChange, onExtraInputChange, onExtraEditorChange }) => {var _db$extra_json, _db$extra_json2, _db$extra_json3, _db$extra_json3$metad, _db$extra_json4, _db$extra_json4$metad, _db$extra_json5, _db$extra_json6, _db$extra_json7, _db$extra_json8, _db$extra_json9;\n  const expandableModalIsOpen = !!(db != null && db.expose_in_sqllab);\n  const createAsOpen = !!(db != null && db.allow_ctas || db != null && db.allow_cvas);\n  return ___EmotionJSX(Collapse, { expandIconPosition: \"right\", accordion: true, css: (theme) => antdCollapseStyles(theme) },\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"SQL Lab\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Adjust how this database will interact with SQL Lab.\")),\n\n\n    key: \"1\" },\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"expose_in_sqllab\", indeterminate: false, checked: !!(db != null && db.expose_in_sqllab), onChange: onInputChange, labelText: t('Expose database in SQL Lab') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow this database to be queried in SQL Lab') })),\n\n  ___EmotionJSX(StyledExpandableForm, { className: cx('expandable', {\n      open: expandableModalIsOpen,\n      'ctas-open': createAsOpen }) },\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_ctas\", indeterminate: false, checked: !!(db != null && db.allow_ctas), onChange: onInputChange, labelText: t('Allow CREATE TABLE AS') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new tables based on queries') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_cvas\", indeterminate: false, checked: !!(db != null && db.allow_cvas), onChange: onInputChange, labelText: t('Allow CREATE VIEW AS') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new views based on queries') })),\n\n  ___EmotionJSX(StyledInputContainer, { className: cx('expandable', { open: createAsOpen }) },\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('CTAS & CVAS SCHEMA')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"force_ctas_schema\", value: (db == null ? void 0 : db.force_ctas_schema) || '', placeholder: t('Create or select schema...'), onChange: onInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Force all tables and views to be created in this schema when clicking CTAS or CVAS in SQL Lab.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_dml\", indeterminate: false, checked: !!(db != null && db.allow_dml), onChange: onInputChange, labelText: t('Allow DML') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow manipulation of the database using non-SELECT statements such as UPDATE, DELETE, CREATE, etc.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_multi_schema_metadata_fetch\", indeterminate: false, checked: !!(db != null && db.allow_multi_schema_metadata_fetch), onChange: onInputChange, labelText: t('Allow Multi Schema Metadata Fetch') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow SQL Lab to fetch a list of all tables and all views across all database ' +\n    'schemas. For large data warehouse with thousands of tables, this can be ' +\n    'expensive and put strain on the system.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"cost_estimate_enabled\", indeterminate: false, checked: !!(db != null && (_db$extra_json = db.extra_json) != null && _db$extra_json.cost_estimate_enabled), onChange: onExtraInputChange, labelText: t('Enable query cost estimation') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('For Presto and Postgres, shows a button to compute cost before running a query.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allows_virtual_table_explore\", indeterminate: false, checked: !!(db != null && (_db$extra_json2 = db.extra_json) != null && _db$extra_json2.allows_virtual_table_explore), onChange: onExtraInputChange, labelText: t('Allow this database to be explored') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('When enabled, users are able to visualize SQL Lab results in Explore.') })))))),\n\n\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"Performance\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Adjust performance settings of this database.\")),\n\n\n    key: \"2\" },\n  ___EmotionJSX(StyledInputContainer, { className: \"mb-8\" },\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Chart cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"cache_timeout\", value: (db == null ? void 0 : db.cache_timeout) || '', placeholder: t('Enter duration in seconds'), onChange: onInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Duration (in seconds) of the caching timeout for charts of this database.' +\n  ' A timeout of 0 indicates that the cache never expires.' +\n  ' Note this defaults to the global timeout if undefined.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Schema cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"schema_cache_timeout\", value: (db == null ? void 0 : (_db$extra_json3 = db.extra_json) == null ? void 0 : (_db$extra_json3$metad = _db$extra_json3.metadata_cache_timeout) == null ? void 0 : _db$extra_json3$metad.schema_cache_timeout) ||\n    '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Duration (in seconds) of the metadata caching timeout for schemas of ' +\n  'this database. If left unset, the cache never expires.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Table cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"table_cache_timeout\", value: (db == null ? void 0 : (_db$extra_json4 = db.extra_json) == null ? void 0 : (_db$extra_json4$metad = _db$extra_json4.metadata_cache_timeout) == null ? void 0 : _db$extra_json4$metad.table_cache_timeout) ||\n    '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Duration (in seconds) of the metadata caching timeout for tables of ' +\n  'this database. If left unset, the cache never expires. '))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_run_async\", indeterminate: false, checked: !!(db != null && db.allow_run_async), onChange: onInputChange, labelText: t('Asynchronous query execution') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Operate the database in asynchronous mode, meaning that the queries ' +\n    'are executed on remote workers as opposed to on the web server itself. ' +\n    'This assumes that you have a Celery worker setup as well as a results ' +\n    'backend. Refer to the installation docs for more information.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zdXBlcnNldC1mcm9udGVuZC9zcmMvdmlld3MvQ1JVRC9kYXRhL2RhdGFiYXNlL0RhdGFiYXNlTW9kYWwvRXh0cmFPcHRpb25zLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4SThCIiwiZmlsZSI6Ii9zdXBlcnNldC1mcm9udGVuZC9zcmMvdmlld3MvQ1JVRC9kYXRhL2RhdGFiYXNlL0RhdGFiYXNlTW9kYWwvRXh0cmFPcHRpb25zLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyB0IH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IEluZm9Ub29sdGlwIGZyb20gJ3NyYy9jb21wb25lbnRzL0luZm9Ub29sdGlwJztcbmltcG9ydCBJbmRldGVybWluYXRlQ2hlY2tib3ggZnJvbSAnc3JjL2NvbXBvbmVudHMvSW5kZXRlcm1pbmF0ZUNoZWNrYm94JztcbmltcG9ydCBDb2xsYXBzZSBmcm9tICdzcmMvY29tcG9uZW50cy9Db2xsYXBzZSc7XG5pbXBvcnQgeyBTdHlsZWRJbnB1dENvbnRhaW5lciwgU3R5bGVkSnNvbkVkaXRvciwgU3R5bGVkRXhwYW5kYWJsZUZvcm0sIGFudGRDb2xsYXBzZVN0eWxlcywgbm9fbWFyZ2luX2JvdHRvbSwgfSBmcm9tICcuL3N0eWxlcyc7XG5jb25zdCBFeHRyYU9wdGlvbnMgPSAoeyBkYiwgb25JbnB1dENoYW5nZSwgb25UZXh0Q2hhbmdlLCBvbkVkaXRvckNoYW5nZSwgb25FeHRyYUlucHV0Q2hhbmdlLCBvbkV4dHJhRWRpdG9yQ2hhbmdlLCB9KSA9PiB7XG4gICAgY29uc3QgZXhwYW5kYWJsZU1vZGFsSXNPcGVuID0gISFkYj8uZXhwb3NlX2luX3NxbGxhYjtcbiAgICBjb25zdCBjcmVhdGVBc09wZW4gPSAhIShkYj8uYWxsb3dfY3RhcyB8fCBkYj8uYWxsb3dfY3Zhcyk7XG4gICAgcmV0dXJuICg8Q29sbGFwc2UgZXhwYW5kSWNvblBvc2l0aW9uPVwicmlnaHRcIiBhY2NvcmRpb24gY3NzPXsodGhlbWUpID0+IGFudGRDb2xsYXBzZVN0eWxlcyh0aGVtZSl9PlxuICAgICAgPENvbGxhcHNlLlBhbmVsIGhlYWRlcj17PGRpdj5cbiAgICAgICAgICAgIDxoND5TUUwgTGFiPC9oND5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAgICBBZGp1c3QgaG93IHRoaXMgZGF0YWJhc2Ugd2lsbCBpbnRlcmFjdCB3aXRoIFNRTCBMYWIuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+fSBrZXk9XCIxXCI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lciBjc3M9e25vX21hcmdpbl9ib3R0b219PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiZXhwb3NlX2luX3NxbGxhYlwiIGluZGV0ZXJtaW5hdGU9e2ZhbHNlfSBjaGVja2VkPXshIWRiPy5leHBvc2VfaW5fc3FsbGFifSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdFeHBvc2UgZGF0YWJhc2UgaW4gU1FMIExhYicpfS8+XG4gICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnQWxsb3cgdGhpcyBkYXRhYmFzZSB0byBiZSBxdWVyaWVkIGluIFNRTCBMYWInKX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxTdHlsZWRFeHBhbmRhYmxlRm9ybSBjbGFzc05hbWU9e2N4KCdleHBhbmRhYmxlJywge1xuICAgICAgICAgICAgb3BlbjogZXhwYW5kYWJsZU1vZGFsSXNPcGVuLFxuICAgICAgICAgICAgJ2N0YXMtb3Blbic6IGNyZWF0ZUFzT3BlbixcbiAgICAgICAgfSl9PlxuICAgICAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17bm9fbWFyZ2luX2JvdHRvbX0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPEluZGV0ZXJtaW5hdGVDaGVja2JveCBpZD1cImFsbG93X2N0YXNcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uYWxsb3dfY3Rhc30gb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9IGxhYmVsVGV4dD17dCgnQWxsb3cgQ1JFQVRFIFRBQkxFIEFTJyl9Lz5cbiAgICAgICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnQWxsb3cgY3JlYXRpb24gb2YgbmV3IHRhYmxlcyBiYXNlZCBvbiBxdWVyaWVzJyl9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17bm9fbWFyZ2luX2JvdHRvbX0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPEluZGV0ZXJtaW5hdGVDaGVja2JveCBpZD1cImFsbG93X2N2YXNcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uYWxsb3dfY3Zhc30gb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9IGxhYmVsVGV4dD17dCgnQWxsb3cgQ1JFQVRFIFZJRVcgQVMnKX0vPlxuICAgICAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdBbGxvdyBjcmVhdGlvbiBvZiBuZXcgdmlld3MgYmFzZWQgb24gcXVlcmllcycpfS8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY2xhc3NOYW1lPXtjeCgnZXhwYW5kYWJsZScsIHsgb3BlbjogY3JlYXRlQXNPcGVuIH0pfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWxcIj57dCgnQ1RBUyAmIENWQVMgU0NIRU1BJyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJmb3JjZV9jdGFzX3NjaGVtYVwiIHZhbHVlPXtkYj8uZm9yY2VfY3Rhc19zY2hlbWEgfHwgJyd9IHBsYWNlaG9sZGVyPXt0KCdDcmVhdGUgb3Igc2VsZWN0IHNjaGVtYS4uLicpfSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0vPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICAgICAgICB7dCgnRm9yY2UgYWxsIHRhYmxlcyBhbmQgdmlld3MgdG8gYmUgY3JlYXRlZCBpbiB0aGlzIHNjaGVtYSB3aGVuIGNsaWNraW5nIENUQVMgb3IgQ1ZBUyBpbiBTUUwgTGFiLicpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lciBjc3M9e25vX21hcmdpbl9ib3R0b219PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxJbmRldGVybWluYXRlQ2hlY2tib3ggaWQ9XCJhbGxvd19kbWxcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uYWxsb3dfZG1sfSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdBbGxvdyBETUwnKX0vPlxuICAgICAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdBbGxvdyBtYW5pcHVsYXRpb24gb2YgdGhlIGRhdGFiYXNlIHVzaW5nIG5vbi1TRUxFQ1Qgc3RhdGVtZW50cyBzdWNoIGFzIFVQREFURSwgREVMRVRFLCBDUkVBVEUsIGV0Yy4nKX0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXtub19tYXJnaW5fYm90dG9tfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiYWxsb3dfbXVsdGlfc2NoZW1hX21ldGFkYXRhX2ZldGNoXCIgaW5kZXRlcm1pbmF0ZT17ZmFsc2V9IGNoZWNrZWQ9eyEhZGI/LmFsbG93X211bHRpX3NjaGVtYV9tZXRhZGF0YV9mZXRjaH0gb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9IGxhYmVsVGV4dD17dCgnQWxsb3cgTXVsdGkgU2NoZW1hIE1ldGFkYXRhIEZldGNoJyl9Lz5cbiAgICAgICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnQWxsb3cgU1FMIExhYiB0byBmZXRjaCBhIGxpc3Qgb2YgYWxsIHRhYmxlcyBhbmQgYWxsIHZpZXdzIGFjcm9zcyBhbGwgZGF0YWJhc2UgJyArXG4gICAgICAgICAgICAnc2NoZW1hcy4gRm9yIGxhcmdlIGRhdGEgd2FyZWhvdXNlIHdpdGggdGhvdXNhbmRzIG9mIHRhYmxlcywgdGhpcyBjYW4gYmUgJyArXG4gICAgICAgICAgICAnZXhwZW5zaXZlIGFuZCBwdXQgc3RyYWluIG9uIHRoZSBzeXN0ZW0uJyl9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17bm9fbWFyZ2luX2JvdHRvbX0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPEluZGV0ZXJtaW5hdGVDaGVja2JveCBpZD1cImNvc3RfZXN0aW1hdGVfZW5hYmxlZFwiIGluZGV0ZXJtaW5hdGU9e2ZhbHNlfSBjaGVja2VkPXshIWRiPy5leHRyYV9qc29uPy5jb3N0X2VzdGltYXRlX2VuYWJsZWR9IG9uQ2hhbmdlPXtvbkV4dHJhSW5wdXRDaGFuZ2V9IGxhYmVsVGV4dD17dCgnRW5hYmxlIHF1ZXJ5IGNvc3QgZXN0aW1hdGlvbicpfS8+XG4gICAgICAgICAgICAgICAgPEluZm9Ub29sdGlwIHRvb2x0aXA9e3QoJ0ZvciBQcmVzdG8gYW5kIFBvc3RncmVzLCBzaG93cyBhIGJ1dHRvbiB0byBjb21wdXRlIGNvc3QgYmVmb3JlIHJ1bm5pbmcgYSBxdWVyeS4nKX0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPEluZGV0ZXJtaW5hdGVDaGVja2JveCBpZD1cImFsbG93c192aXJ0dWFsX3RhYmxlX2V4cGxvcmVcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uZXh0cmFfanNvbj8uYWxsb3dzX3ZpcnR1YWxfdGFibGVfZXhwbG9yZX0gb25DaGFuZ2U9e29uRXh0cmFJbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdBbGxvdyB0aGlzIGRhdGFiYXNlIHRvIGJlIGV4cGxvcmVkJyl9Lz5cbiAgICAgICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnV2hlbiBlbmFibGVkLCB1c2VycyBhcmUgYWJsZSB0byB2aXN1YWxpemUgU1FMIExhYiByZXN1bHRzIGluIEV4cGxvcmUuJyl9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgIDwvU3R5bGVkRXhwYW5kYWJsZUZvcm0+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICA8L0NvbGxhcHNlLlBhbmVsPlxuICAgICAgPENvbGxhcHNlLlBhbmVsIGhlYWRlcj17PGRpdj5cbiAgICAgICAgICAgIDxoND5QZXJmb3JtYW5jZTwvaDQ+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgICAgQWRqdXN0IHBlcmZvcm1hbmNlIHNldHRpbmdzIG9mIHRoaXMgZGF0YWJhc2UuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+fSBrZXk9XCIyXCI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lciBjbGFzc05hbWU9XCJtYi04XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsXCI+e3QoJ0NoYXJ0IGNhY2hlIHRpbWVvdXQnKX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiY2FjaGVfdGltZW91dFwiIHZhbHVlPXtkYj8uY2FjaGVfdGltZW91dCB8fCAnJ30gcGxhY2Vob2xkZXI9e3QoJ0VudGVyIGR1cmF0aW9uIGluIHNlY29uZHMnKX0gb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAge3QoJ0R1cmF0aW9uIChpbiBzZWNvbmRzKSBvZiB0aGUgY2FjaGluZyB0aW1lb3V0IGZvciBjaGFydHMgb2YgdGhpcyBkYXRhYmFzZS4nICtcbiAgICAgICAgICAgICcgQSB0aW1lb3V0IG9mIDAgaW5kaWNhdGVzIHRoYXQgdGhlIGNhY2hlIG5ldmVyIGV4cGlyZXMuJyArXG4gICAgICAgICAgICAnIE5vdGUgdGhpcyBkZWZhdWx0cyB0byB0aGUgZ2xvYmFsIHRpbWVvdXQgaWYgdW5kZWZpbmVkLicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsXCI+e3QoJ1NjaGVtYSBjYWNoZSB0aW1lb3V0Jyl9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInNjaGVtYV9jYWNoZV90aW1lb3V0XCIgdmFsdWU9e2RiPy5leHRyYV9qc29uPy5tZXRhZGF0YV9jYWNoZV90aW1lb3V0Py5zY2hlbWFfY2FjaGVfdGltZW91dCB8fFxuICAgICAgICAgICAgJyd9IHBsYWNlaG9sZGVyPXt0KCdFbnRlciBkdXJhdGlvbiBpbiBzZWNvbmRzJyl9IG9uQ2hhbmdlPXtvbkV4dHJhSW5wdXRDaGFuZ2V9IGRhdGEtdGVzdD1cInNjaGVtYS1jYWNoZS10aW1lb3V0LXRlc3RcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgIHt0KCdEdXJhdGlvbiAoaW4gc2Vjb25kcykgb2YgdGhlIG1ldGFkYXRhIGNhY2hpbmcgdGltZW91dCBmb3Igc2NoZW1hcyBvZiAnICtcbiAgICAgICAgICAgICd0aGlzIGRhdGFiYXNlLiBJZiBsZWZ0IHVuc2V0LCB0aGUgY2FjaGUgbmV2ZXIgZXhwaXJlcy4nKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbFwiPnt0KCdUYWJsZSBjYWNoZSB0aW1lb3V0Jyl9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRhYmxlX2NhY2hlX3RpbWVvdXRcIiB2YWx1ZT17ZGI/LmV4dHJhX2pzb24/Lm1ldGFkYXRhX2NhY2hlX3RpbWVvdXQ/LnRhYmxlX2NhY2hlX3RpbWVvdXQgfHxcbiAgICAgICAgICAgICcnfSBwbGFjZWhvbGRlcj17dCgnRW50ZXIgZHVyYXRpb24gaW4gc2Vjb25kcycpfSBvbkNoYW5nZT17b25FeHRyYUlucHV0Q2hhbmdlfSBkYXRhLXRlc3Q9XCJ0YWJsZS1jYWNoZS10aW1lb3V0LXRlc3RcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgIHt0KCdEdXJhdGlvbiAoaW4gc2Vjb25kcykgb2YgdGhlIG1ldGFkYXRhIGNhY2hpbmcgdGltZW91dCBmb3IgdGFibGVzIG9mICcgK1xuICAgICAgICAgICAgJ3RoaXMgZGF0YWJhc2UuIElmIGxlZnQgdW5zZXQsIHRoZSBjYWNoZSBuZXZlciBleHBpcmVzLiAnKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17eyBub19tYXJnaW5fYm90dG9tIH19PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiYWxsb3dfcnVuX2FzeW5jXCIgaW5kZXRlcm1pbmF0ZT17ZmFsc2V9IGNoZWNrZWQ9eyEhZGI/LmFsbG93X3J1bl9hc3luY30gb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9IGxhYmVsVGV4dD17dCgnQXN5bmNocm9ub3VzIHF1ZXJ5IGV4ZWN1dGlvbicpfS8+XG4gICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnT3BlcmF0ZSB0aGUgZGF0YWJhc2UgaW4gYXN5bmNocm9ub3VzIG1vZGUsIG1lYW5pbmcgdGhhdCB0aGUgcXVlcmllcyAnICtcbiAgICAgICAgICAgICdhcmUgZXhlY3V0ZWQgb24gcmVtb3RlIHdvcmtlcnMgYXMgb3Bwb3NlZCB0byBvbiB0aGUgd2ViIHNlcnZlciBpdHNlbGYuICcgK1xuICAgICAgICAgICAgJ1RoaXMgYXNzdW1lcyB0aGF0IHlvdSBoYXZlIGEgQ2VsZXJ5IHdvcmtlciBzZXR1cCBhcyB3ZWxsIGFzIGEgcmVzdWx0cyAnICtcbiAgICAgICAgICAgICdiYWNrZW5kLiBSZWZlciB0byB0aGUgaW5zdGFsbGF0aW9uIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyl9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17eyBub19tYXJnaW5fYm90dG9tIH19PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiY2FuY2VsX3F1ZXJ5X29uX3dpbmRvd3NfdW5sb2FkXCIgaW5kZXRlcm1pbmF0ZT17ZmFsc2V9IGNoZWNrZWQ9eyEhZGI/LmV4dHJhX2pzb24/LmNhbmNlbF9xdWVyeV9vbl93aW5kb3dzX3VubG9hZH0gb25DaGFuZ2U9e29uRXh0cmFJbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdDYW5jZWwgcXVlcnkgb24gd2luZG93IHVubG9hZCBldmVudCcpfS8+XG4gICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnVGVybWluYXRlIHJ1bm5pbmcgcXVlcmllcyB3aGVuIGJyb3dzZXIgd2luZG93IGNsb3NlZCBvciBuYXZpZ2F0ZWQgJyArXG4gICAgICAgICAgICAndG8gYW5vdGhlciBwYWdlLiBBdmFpbGFibGUgZm9yIFByZXN0bywgSGl2ZSwgTXlTUUwsIFBvc3RncmVzIGFuZCAnICtcbiAgICAgICAgICAgICdTbm93Zmxha2UgZGF0YWJhc2VzLicpfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICA8L0NvbGxhcHNlLlBhbmVsPlxuICAgICAgPENvbGxhcHNlLlBhbmVsIGhlYWRlcj17PGRpdj5cbiAgICAgICAgICAgIDxoND5TZWN1cml0eTwvaDQ+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJoZWxwZXJcIj5BZGQgZXh0cmEgY29ubmVjdGlvbiBpbmZvcm1hdGlvbi48L3A+XG4gICAgICAgICAgPC9kaXY+fSBrZXk9XCIzXCI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWxcIj57dCgnU2VjdXJlIGV4dHJhJyl9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxTdHlsZWRKc29uRWRpdG9yIG5hbWU9XCJlbmNyeXB0ZWRfZXh0cmFcIiB2YWx1ZT17ZGI/LmVuY3J5cHRlZF9leHRyYSB8fCAnJ30gcGxhY2Vob2xkZXI9e3QoJ1NlY3VyZSBleHRyYScpfSBvbkNoYW5nZT17KGpzb24pID0+IG9uRWRpdG9yQ2hhbmdlKHsganNvbiwgbmFtZTogJ2VuY3J5cHRlZF9leHRyYScgfSl9IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjE2MHB4XCIvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICB7dCgnSlNPTiBzdHJpbmcgY29udGFpbmluZyBhZGRpdGlvbmFsIGNvbm5lY3Rpb24gY29uZmlndXJhdGlvbi4gJyArXG4gICAgICAgICAgICAnVGhpcyBpcyB1c2VkIHRvIHByb3ZpZGUgY29ubmVjdGlvbiBpbmZvcm1hdGlvbiBmb3Igc3lzdGVtcyAnICtcbiAgICAgICAgICAgICdsaWtlIEhpdmUsIFByZXN0byBhbmQgQmlnUXVlcnkgd2hpY2ggZG8gbm90IGNvbmZvcm0gdG8gdGhlICcgK1xuICAgICAgICAgICAgJ3VzZXJuYW1lOnBhc3N3b3JkIHN5bnRheCBub3JtYWxseSB1c2VkIGJ5IFNRTEFsY2hlbXkuJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbFwiPnt0KCdSb290IGNlcnRpZmljYXRlJyl9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwic2VydmVyX2NlcnRcIiB2YWx1ZT17ZGI/LnNlcnZlcl9jZXJ0IHx8ICcnfSBwbGFjZWhvbGRlcj17dCgnRW50ZXIgQ0FfQlVORExFJyl9IG9uQ2hhbmdlPXtvblRleHRDaGFuZ2V9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAge3QoJ09wdGlvbmFsIENBX0JVTkRMRSBjb250ZW50cyB0byB2YWxpZGF0ZSBIVFRQUyByZXF1ZXN0cy4gT25seSAnICtcbiAgICAgICAgICAgICdhdmFpbGFibGUgb24gY2VydGFpbiBkYXRhYmFzZSBlbmdpbmVzLicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsXCI+XG4gICAgICAgICAgICB7dCgnU2NoZW1hcyBhbGxvd2VkIGZvciBDU1YgdXBsb2FkJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJzY2hlbWFzX2FsbG93ZWRfZm9yX2Nzdl91cGxvYWRcIiB2YWx1ZT17KGRiPy5leHRyYV9qc29uPy5zY2hlbWFzX2FsbG93ZWRfZm9yX2Nzdl91cGxvYWQgfHwgW10pLmpvaW4oJywnKX0gcGxhY2Vob2xkZXI9XCJzY2hlbWExLHNjaGVtYTJcIiBvbkNoYW5nZT17b25FeHRyYUlucHV0Q2hhbmdlfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgIHt0KCdBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIHNjaGVtYXMgdGhhdCBDU1ZzIGFyZSBhbGxvd2VkIHRvIHVwbG9hZCB0by4nKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17eyBub19tYXJnaW5fYm90dG9tIH19PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiaW1wZXJzb25hdGVfdXNlclwiIGluZGV0ZXJtaW5hdGU9e2ZhbHNlfSBjaGVja2VkPXshIWRiPy5pbXBlcnNvbmF0ZV91c2VyfSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdJbXBlcnNvbmF0ZSBsb2dnZWQgaW4gdXNlciAoUHJlc3RvLCBUcmlubywgRHJpbGwsIEhpdmUsIGFuZCBHU2hlZXRzKScpfS8+XG4gICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnSWYgUHJlc3RvIG9yIFRyaW5vLCBhbGwgdGhlIHF1ZXJpZXMgaW4gU1FMIExhYiBhcmUgZ29pbmcgdG8gYmUgZXhlY3V0ZWQgYXMgdGhlICcgK1xuICAgICAgICAgICAgJ2N1cnJlbnRseSBsb2dnZWQgb24gdXNlciB3aG8gbXVzdCBoYXZlIHBlcm1pc3Npb24gdG8gcnVuIHRoZW0uIElmIEhpdmUgJyArXG4gICAgICAgICAgICAnYW5kIGhpdmUuc2VydmVyMi5lbmFibGUuZG9BcyBpcyBlbmFibGVkLCB3aWxsIHJ1biB0aGUgcXVlcmllcyBhcyAnICtcbiAgICAgICAgICAgICdzZXJ2aWNlIGFjY291bnQsIGJ1dCBpbXBlcnNvbmF0ZSB0aGUgY3VycmVudGx5IGxvZ2dlZCBvbiB1c2VyIHZpYSAnICtcbiAgICAgICAgICAgICdoaXZlLnNlcnZlcjIucHJveHkudXNlciBwcm9wZXJ0eS4nKX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXt7IC4uLm5vX21hcmdpbl9ib3R0b20gfX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxJbmRldGVybWluYXRlQ2hlY2tib3ggaWQ9XCJhbGxvd19jc3ZfdXBsb2FkXCIgaW5kZXRlcm1pbmF0ZT17ZmFsc2V9IGNoZWNrZWQ9eyEhZGI/LmFsbG93X2Nzdl91cGxvYWR9IG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfSBsYWJlbFRleHQ9e3QoJ0FsbG93IGRhdGEgdXBsb2FkJyl9Lz5cbiAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdJZiBzZWxlY3RlZCwgcGxlYXNlIHNldCB0aGUgc2NoZW1hcyBhbGxvd2VkIGZvciBkYXRhIHVwbG9hZCBpbiBFeHRyYS4nKX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgPC9Db2xsYXBzZS5QYW5lbD5cbiAgICAgIDxDb2xsYXBzZS5QYW5lbCBoZWFkZXI9ezxkaXY+XG4gICAgICAgICAgICA8aDQ+T3RoZXI8L2g0PlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaGVscGVyXCI+QWRkaXRpb25hbCBzZXR0aW5ncy48L3A+XG4gICAgICAgICAgPC9kaXY+fSBrZXk9XCI0XCI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWxcIj57dCgnTWV0YWRhdGEgUGFyYW1ldGVycycpfTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8U3R5bGVkSnNvbkVkaXRvciBuYW1lPVwibWV0YWRhdGFfcGFyYW1zXCIgdmFsdWU9e2RiPy5leHRyYV9qc29uPy5tZXRhZGF0YV9wYXJhbXMgfHwgJyd9IHBsYWNlaG9sZGVyPXt0KCdNZXRhZGF0YSBQYXJhbWV0ZXJzJyl9IG9uQ2hhbmdlPXsoanNvbikgPT4gb25FeHRyYUVkaXRvckNoYW5nZSh7IGpzb24sIG5hbWU6ICdtZXRhZGF0YV9wYXJhbXMnIH0pfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxNjBweFwiLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAge3QoJ1RoZSBtZXRhZGF0YV9wYXJhbXMgb2JqZWN0IGdldHMgdW5wYWNrZWQgaW50byB0aGUgc3FsYWxjaGVteS5NZXRhRGF0YSBjYWxsLicpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWxcIj57dCgnRW5naW5lIFBhcmFtZXRlcnMnKX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPFN0eWxlZEpzb25FZGl0b3IgbmFtZT1cImVuZ2luZV9wYXJhbXNcIiB2YWx1ZT17ZGI/LmV4dHJhX2pzb24/LmVuZ2luZV9wYXJhbXMgfHwgJyd9IHBsYWNlaG9sZGVyPXt0KCdFbmdpbmUgUGFyYW1ldGVycycpfSBvbkNoYW5nZT17KGpzb24pID0+IG9uRXh0cmFFZGl0b3JDaGFuZ2UoeyBqc29uLCBuYW1lOiAnZW5naW5lX3BhcmFtcycgfSl9IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjE2MHB4XCIvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICB7dCgnVGhlIGVuZ2luZV9wYXJhbXMgb2JqZWN0IGdldHMgdW5wYWNrZWQgaW50byB0aGUgc3FsYWxjaGVteS5jcmVhdGVfZW5naW5lIGNhbGwuJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbFwiIGRhdGEtdGVzdD1cInZlcnNpb24tbGFiZWwtdGVzdFwiPlxuICAgICAgICAgICAge3QoJ1ZlcnNpb24nKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiIGRhdGEtdGVzdD1cInZlcnNpb24tc3BpbmJ1dHRvbi10ZXN0XCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJ2ZXJzaW9uXCIgdmFsdWU9e2RiPy5leHRyYV9qc29uPy52ZXJzaW9uIHx8ICcnfSBwbGFjZWhvbGRlcj17dCgnVmVyc2lvbiBudW1iZXInKX0gb25DaGFuZ2U9e29uRXh0cmFJbnB1dENoYW5nZX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICB7dCgnU3BlY2lmeSB0aGUgZGF0YWJhc2UgdmVyc2lvbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB3aXRoICcgK1xuICAgICAgICAgICAgJ1ByZXN0byBpbiBvcmRlciB0byBlbmFibGUgcXVlcnkgY29zdCBlc3RpbWF0aW9uLicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgPC9Db2xsYXBzZS5QYW5lbD5cbiAgICA8L0NvbGxhcHNlPik7XG59O1xuZXhwb3J0IGRlZmF1bHQgRXh0cmFPcHRpb25zO1xuIl19 */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"cancel_query_on_windows_unload\", indeterminate: false, checked: !!(db != null && (_db$extra_json5 = db.extra_json) != null && _db$extra_json5.cancel_query_on_windows_unload), onChange: onExtraInputChange, labelText: t('Cancel query on window unload event') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Terminate running queries when browser window closed or navigated ' +\n    'to another page. Available for Presto, Hive, MySQL, Postgres and ' +\n    'Snowflake databases.') })))),\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"Security\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Add extra connection information.\")),\n    key: \"3\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Secure extra')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"encrypted_extra\", value: (db == null ? void 0 : db.encrypted_extra) || '', placeholder: t('Secure extra'), onChange: (json) => onEditorChange({ json, name: 'encrypted_extra' }), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('JSON string containing additional connection configuration. ' +\n  'This is used to provide connection information for systems ' +\n  'like Hive, Presto and BigQuery which do not conform to the ' +\n  'username:password syntax normally used by SQLAlchemy.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Root certificate')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"textarea\", { name: \"server_cert\", value: (db == null ? void 0 : db.server_cert) || '', placeholder: t('Enter CA_BUNDLE'), onChange: onTextChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Optional CA_BUNDLE contents to validate HTTPS requests. Only ' +\n  'available on certain database engines.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Schemas allowed for CSV upload')),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"schemas_allowed_for_csv_upload\", value: ((db == null ? void 0 : (_db$extra_json6 = db.extra_json) == null ? void 0 : _db$extra_json6.schemas_allowed_for_csv_upload) || []).join(','), placeholder: \"schema1,schema2\", onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('A comma-separated list of schemas that CSVs are allowed to upload to.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"impersonate_user\", indeterminate: false, checked: !!(db != null && db.impersonate_user), onChange: onInputChange, labelText: t('Impersonate logged in user (Presto, Trino, Drill, Hive, and GSheets)') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If Presto or Trino, all the queries in SQL Lab are going to be executed as the ' +\n    'currently logged on user who must have permission to run them. If Hive ' +\n    'and hive.server2.enable.doAs is enabled, will run the queries as ' +\n    'service account, but impersonate the currently logged on user via ' +\n    'hive.server2.proxy.user property.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ ...no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_csv_upload\", indeterminate: false, checked: !!(db != null && db.allow_csv_upload), onChange: onInputChange, labelText: t('Allow data upload') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If selected, please set the schemas allowed for data upload in Extra.') })))),\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"Other\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Additional settings.\")),\n    key: \"4\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Metadata Parameters')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"metadata_params\", value: (db == null ? void 0 : (_db$extra_json7 = db.extra_json) == null ? void 0 : _db$extra_json7.metadata_params) || '', placeholder: t('Metadata Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'metadata_params' }), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('The metadata_params object gets unpacked into the sqlalchemy.MetaData call.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Engine Parameters')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"engine_params\", value: (db == null ? void 0 : (_db$extra_json8 = db.extra_json) == null ? void 0 : _db$extra_json8.engine_params) || '', placeholder: t('Engine Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'engine_params' }), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('The engine_params object gets unpacked into the sqlalchemy.create_engine call.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Version')),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"version\", value: (db == null ? void 0 : (_db$extra_json9 = db.extra_json) == null ? void 0 : _db$extra_json9.version) || '', placeholder: t('Version number'), onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Specify the database version. This should be used with ' +\n  'Presto in order to enable query cost estimation.')))));\n\n\n\n\n};\nexport default ExtraOptions;","map":null,"metadata":{},"sourceType":"module"}