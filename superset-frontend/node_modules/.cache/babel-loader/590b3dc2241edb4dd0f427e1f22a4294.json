{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { t } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport Button from 'src/components/Button';\nimport { exploreChart } from 'src/explore/exploreUtils';\nimport * as actions from 'src/SqlLab/actions/sqlLab';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  table: PropTypes.string.isRequired,\n  schema: PropTypes.string,\n  dbId: PropTypes.number.isRequired,\n  errorMessage: PropTypes.string,\n  templateParams: PropTypes.string };\n\n\nclass ExploreCtasResultsButton extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.visualize = this.visualize.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.visualize();\n  }\n\n  buildVizOptions() {\n    return {\n      datasourceName: this.props.table,\n      schema: this.props.schema,\n      dbId: this.props.dbId,\n      templateParams: this.props.templateParams };\n\n  }\n\n  visualize() {\n    this.props.actions.\n    createCtasDatasource(this.buildVizOptions()).\n    then((data) => {\n      const formData = {\n        datasource: `${data.table_id}__table`,\n        metrics: ['count'],\n        groupby: [],\n        viz_type: 'table',\n        since: '100 years ago',\n        all_columns: [],\n        row_limit: 1000 };\n\n      this.props.actions.addInfoToast(\n      t('Creating a data source and creating a new tab'));\n\n\n      // open new window for data visualization\n      exploreChart(formData);\n    }).\n    catch(() => {\n      this.props.actions.addDangerToast(\n      this.props.errorMessage || t('An error occurred'));\n\n    });\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: this.onClick,\n        tooltip: t('Explore the result set in the data exploration view') },\n\n      ___EmotionJSX(InfoTooltipWithTrigger, {\n        icon: \"line-chart\",\n        placement: \"top\",\n        label: \"explore\" }),\n      ' ',\n      t('Explore'))));\n\n\n\n  }}\n\nExploreCtasResultsButton.propTypes = propTypes;\n\nfunction mapStateToProps({ sqlLab, common }) {\n  return {\n    errorMessage: sqlLab.errorMessage,\n    timeout: common.conf ? common.conf.SUPERSET_WEBSERVER_TIMEOUT : null };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch) };\n\n}\n\nexport default connect(\nmapStateToProps,\nmapDispatchToProps)(\nExploreCtasResultsButton);","map":null,"metadata":{},"sourceType":"module"}