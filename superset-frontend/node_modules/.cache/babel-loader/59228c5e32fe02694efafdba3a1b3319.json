{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Select } from 'src/components';\nimport { t, styled } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport Button from 'src/components/Button';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { FormLabel } from 'src/components/Form';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const options = [\n[0, t(\"Don't refresh\")],\n[10, t('10 seconds')],\n[30, t('30 seconds')],\n[60, t('1 minute')],\n[300, t('5 minutes')],\n[1800, t('30 minutes')],\n[3600, t('1 hour')],\n[21600, t('6 hours')],\n[43200, t('12 hours')],\n[86400, t('24 hours')]].\nmap((o) => ({ value: o[0], label: o[1] }));\nconst StyledModalTrigger = styled(ModalTrigger)`\n  .ant-modal-body {\n    overflow: visible;\n  }\n`;\nconst RefreshWarningContainer = styled.div`\n  margin-top: ${({ theme }) => theme.gridUnit * 6}px;\n`;\nclass RefreshIntervalModal extends React.PureComponent {\n\n\n\n\n\n  constructor(props) {\n    super(props);this.modalRef = void 0;\n    this.modalRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      refreshFrequency: props.refreshFrequency };\n\n    this.handleFrequencyChange = this.handleFrequencyChange.bind(this);\n    this.onSave = this.onSave.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n  }\n  onSave() {var _this$modalRef$curren;\n    this.props.onChange(this.state.refreshFrequency, this.props.editMode);\n    (_this$modalRef$curren = this.modalRef.current) == null ? void 0 : _this$modalRef$curren.close();\n  }\n  onCancel() {var _this$modalRef$curren2;\n    this.setState({\n      refreshFrequency: this.props.refreshFrequency });\n\n    (_this$modalRef$curren2 = this.modalRef.current) == null ? void 0 : _this$modalRef$curren2.close();\n  }\n  handleFrequencyChange(value) {\n    this.setState({\n      refreshFrequency: value || options[0].value });\n\n  }\n  render() {\n    const { refreshLimit = 0, refreshWarning, editMode } = this.props;\n    const { refreshFrequency = 0 } = this.state;\n    const showRefreshWarning = !!refreshFrequency && !!refreshWarning && refreshFrequency < refreshLimit;\n    return ___EmotionJSX(StyledModalTrigger, { ref: this.modalRef, triggerNode: this.props.triggerNode, modalTitle: t('Refresh interval'), modalBody: ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(FormLabel, null, t('Refresh frequency')),\n      ___EmotionJSX(Select, { ariaLabel: t('Refresh interval'), options: options, value: refreshFrequency, onChange: this.handleFrequencyChange }),\n      showRefreshWarning && ___EmotionJSX(RefreshWarningContainer, null,\n      ___EmotionJSX(Alert, { type: \"warning\", message: ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(\"div\", null, refreshWarning),\n        ___EmotionJSX(\"br\", null),\n        ___EmotionJSX(\"strong\", null, t('Are you sure you want to proceed?'))) }))),\n\n\n      modalFooter: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Button, { buttonStyle: \"primary\", buttonSize: \"small\", onClick: this.onSave },\n      editMode ? t('Save') : t('Save for this session')),\n\n      ___EmotionJSX(Button, { onClick: this.onCancel, buttonSize: \"small\" },\n      t('Cancel'))) });\n\n\n  }}RefreshIntervalModal.defaultProps = { refreshLimit: 0, refreshWarning: null };\n\nexport default RefreshIntervalModal;","map":null,"metadata":{},"sourceType":"module"}