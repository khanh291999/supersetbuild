{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { areObjectsEqual } from 'src/reduxUtils';\nexport var TabIds;\n(function (TabIds) {\n  TabIds[\"AllFilters\"] = \"allFilters\";\n  TabIds[\"FilterSets\"] = \"filterSets\";\n})(TabIds || (TabIds = {}));\nexport function mapParentFiltersToChildren(filters) {\n  const cascadeChildren = {};\n  filters.forEach((filter) => {\n    const [parentId] = filter.cascadeParentIds || [];\n    if (parentId) {\n      if (!cascadeChildren[parentId]) {\n        cascadeChildren[parentId] = [];\n      }\n      cascadeChildren[parentId].push(filter);\n    }\n  });\n  return cascadeChildren;\n}\nexport const getOnlyExtraFormData = (data) => Object.values(data).reduce((prev, next) => ({ ...prev, [next.id]: next.extraFormData }), {});\nexport const checkIsMissingRequiredValue = (filter, filterState) => {var _filter$controlValues;\n  const value = filterState == null ? void 0 : filterState.value;\n  // TODO: this property should be unhardcoded\n  return ((_filter$controlValues = filter.controlValues) == null ? void 0 : _filter$controlValues.enableEmptyFilter) && (\n  value === null || value === undefined);\n};\nexport const checkIsApplyDisabled = (dataMaskSelected, dataMaskApplied, filters) => {\n  const dataSelectedValues = Object.values(dataMaskSelected);\n  const dataAppliedValues = Object.values(dataMaskApplied);\n  return areObjectsEqual(getOnlyExtraFormData(dataMaskSelected), getOnlyExtraFormData(dataMaskApplied), { ignoreUndefined: true }) ||\n  dataSelectedValues.length !== dataAppliedValues.length ||\n  filters.some((filter) => {var _dataMaskSelected$fil;return checkIsMissingRequiredValue(filter, dataMaskSelected == null ? void 0 : (_dataMaskSelected$fil = dataMaskSelected[filter == null ? void 0 : filter.id]) == null ? void 0 : _dataMaskSelected$fil.filterState);});\n};","map":null,"metadata":{},"sourceType":"module"}