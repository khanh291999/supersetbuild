{"ast":null,"code":"import { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport createTimeFormatter from '../createTimeFormatter';\nexport default function createMultiTimeFormatter({\n  id,\n  label,\n  description,\n  formats = {},\n  useLocalTime = false })\n{\n  const {\n    millisecond = '.%L',\n    second = ':%S',\n    minute = '%I:%M',\n    hour = '%I %p',\n    day = '%a %d',\n    week = '%b %d',\n    month = '%B',\n    year = '%Y' } =\n  formats;\n  const format = useLocalTime ? timeFormat : utcFormat;\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n  const {\n    hasMillisecond,\n    hasSecond,\n    hasMinute,\n    hasHour,\n    isNotFirstDayOfMonth,\n    isNotFirstDayOfWeek,\n    isNotFirstMonth } =\n  useLocalTime ? localTimeUtils : utcUtils;\n\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n\n    if (hasHour(date)) {\n      return formatHour;\n    }\n\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n\n    return formatYear;\n  }\n\n  return createTimeFormatter((date) => multiFormatFunc(date)(date), {\n    id,\n    label,\n    description,\n    useLocalTime });\n\n}","map":null,"metadata":{},"sourceType":"module"}