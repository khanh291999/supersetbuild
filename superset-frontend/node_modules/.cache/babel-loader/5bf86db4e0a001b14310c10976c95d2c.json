{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { styled, SupersetClient, t } from '@superset-ui/core';\n\nimport { Menu, NoAnimationDropdown } from 'src/common/components';\nimport Icons from 'src/components/Icons';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool.isRequired,\n  userCanShare: PropTypes.bool.isRequired,\n  userCanSave: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired };\n\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null };\n\n\nconst MENU_KEYS = {\n  SAVE_MODAL: 'save-modal',\n  SHARE_DASHBOARD: 'share-dashboard',\n  REFRESH_DASHBOARD: 'refresh-dashboard',\n  AUTOREFRESH_MODAL: 'autorefresh-modal',\n  SET_FILTER_MAPPING: 'set-filter-mapping',\n  EDIT_PROPERTIES: 'edit-properties',\n  EDIT_CSS: 'edit-css',\n  DOWNLOAD_AS_IMAGE: 'download-as-image',\n  TOGGLE_FULLSCREEN: 'toggle-fullscreen' };\n\n\nconst DropdownButton = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n  span {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\n\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard';\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      cssTemplates: [] };\n\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {\n    injectCustomCss(this.state.css);\n\n    SupersetClient.get({ endpoint: '/csstemplateasyncmodelview/api/read' }).\n    then(({ json }) => {\n      const cssTemplates = json.result.map((row) => ({\n        value: row.template_name,\n        css: row.css,\n        label: row.template_name }));\n\n      this.setState({ cssTemplates });\n    }).\n    catch(() => {\n      this.props.addDangerToast(\n      t('An error occurred while fetching available CSS templates'));\n\n    });\n  }\n\n  changeCss(css) {\n    this.setState({ css }, () => {\n      injectCustomCss(css);\n    });\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key, domEvent }) {\n    switch (key) {\n      case MENU_KEYS.REFRESH_DASHBOARD:\n        this.props.forceRefreshAllCharts();\n        break;\n      case MENU_KEYS.EDIT_PROPERTIES:\n        this.props.showPropertiesModal();\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:{\n          // menu closes with a delay, we need to hide it manually,\n          // so that we don't capture it on the screenshot\n          const menu = document.querySelector(\n          '.ant-dropdown:not(.ant-dropdown-hidden)');\n\n          menu.style.visibility = 'hidden';\n          downloadAsImage(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle,\n          {},\n          true)(\n          domEvent).then(() => {\n            menu.style.visibility = 'visible';\n          });\n          break;\n        }\n      case MENU_KEYS.TOGGLE_FULLSCREEN:{\n          const url = getDashboardUrl({\n            dataMask: this.props.dataMask,\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: !getUrlParam(URL_PARAMS.standalone) });\n\n          window.location.replace(url);\n          break;\n        }\n      default:\n        break;}\n\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      dataMask,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast } =\n    this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const url = getDashboardUrl({\n      dataMask,\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash });\n\n\n    const menu =\n    ___EmotionJSX(Menu, {\n      onClick: this.handleMenuClick,\n      selectable: false },\n\n\n    userCanSave &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SAVE_MODAL },\n    ___EmotionJSX(SaveModal, {\n      addSuccessToast: this.props.addSuccessToast,\n      addDangerToast: this.props.addDangerToast,\n      dashboardId: dashboardId,\n      dashboardTitle: dashboardTitle,\n      dashboardInfo: dashboardInfo,\n      saveType: SAVE_TYPE_NEWDASHBOARD,\n      layout: layout,\n      expandedSlices: expandedSlices,\n      refreshFrequency: refreshFrequency,\n      shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n      lastModifiedTime: lastModifiedTime,\n      customCss: customCss,\n      colorNamespace: colorNamespace,\n      colorScheme: colorScheme,\n      onSave: onSave,\n      triggerNode:\n      ___EmotionJSX(\"span\", null, t('Save as')),\n\n      canOverwrite: userCanEdit })),\n\n\n\n    userCanShare &&\n    ___EmotionJSX(ShareMenuItems, {\n      url: url,\n      copyMenuItemTitle: t('Copy dashboard URL'),\n      emailMenuItemTitle: t('Share dashboard by email'),\n      emailSubject: emailSubject,\n      emailBody: emailBody,\n      addSuccessToast: addSuccessToast,\n      addDangerToast: addDangerToast }),\n\n\n    ___EmotionJSX(Menu.Item, {\n      key: MENU_KEYS.REFRESH_DASHBOARD,\n\n      disabled: isLoading },\n\n    t('Refresh dashboard')),\n\n    ___EmotionJSX(Menu.Divider, null),\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.AUTOREFRESH_MODAL },\n    ___EmotionJSX(RefreshIntervalModal, {\n      refreshFrequency: refreshFrequency,\n      refreshLimit: refreshLimit,\n      refreshWarning: refreshWarning,\n      onChange: this.changeRefreshInterval,\n      editMode: editMode,\n      triggerNode: ___EmotionJSX(\"span\", null, t('Set auto-refresh interval')) })),\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SET_FILTER_MAPPING },\n    ___EmotionJSX(FilterScopeModal, {\n      className: \"m-r-5\",\n      triggerNode: t('Set filter mapping') })),\n\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_PROPERTIES },\n    t('Edit dashboard properties')),\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_CSS },\n    ___EmotionJSX(CssEditor, {\n      triggerNode: ___EmotionJSX(\"span\", null, t('Edit CSS')),\n      initialCss: this.state.css,\n      templates: this.state.cssTemplates,\n      onChange: this.changeCss })),\n\n\n\n\n    !editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.DOWNLOAD_AS_IMAGE },\n    t('Download as image')),\n\n\n\n    !editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.TOGGLE_FULLSCREEN },\n    getUrlParam(URL_PARAMS.standalone) ?\n    t('Exit fullscreen') :\n    t('Enter fullscreen')));\n\n\n\n\n    return (\n      ___EmotionJSX(NoAnimationDropdown, {\n        overlay: menu,\n        trigger: ['click'],\n        getPopupContainer: (triggerNode) =>\n        triggerNode.closest('.dashboard-header') },\n\n\n      ___EmotionJSX(DropdownButton, { id: \"save-dash-split-button\", role: \"button\" },\n      ___EmotionJSX(Icons.MoreHoriz, null))));\n\n\n\n  }}\n\n\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;\n\nexport default HeaderActionsDropdown;","map":null,"metadata":{},"sourceType":"module"}