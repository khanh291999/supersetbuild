{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport PropTypes from 'prop-types';\nimport { Input } from 'src/common/components';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  title: PropTypes.shape({\n    label: PropTypes.string,\n    hasCustomLabel: PropTypes.bool }),\n\n  onChange: PropTypes.func.isRequired,\n  isEditDisabled: PropTypes.bool };\n\n\nexport default class AdhocMetricEditPopoverTitle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onMouseOver = this.onMouseOver.bind(this);\n    this.onMouseOut = this.onMouseOut.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onInputBlur = this.onInputBlur.bind(this);\n    this.state = {\n      isHovered: false,\n      isEditMode: false };\n\n  }\n\n  onMouseOver() {\n    this.setState({ isHovered: true });\n  }\n\n  onMouseOut() {\n    this.setState({ isHovered: false });\n  }\n\n  onClick() {\n    this.setState({ isEditMode: true });\n  }\n\n  onBlur() {\n    this.setState({ isEditMode: false });\n  }\n\n  onInputBlur(e) {\n    if (e.target.value === '') {\n      this.props.onChange(e);\n    }\n    this.onBlur();\n  }\n\n  render() {\n    const { title, onChange, isEditDisabled } = this.props;\n    const defaultLabel = t('My metric');\n\n    if (isEditDisabled) {\n      return (\n        ___EmotionJSX(\"span\", null, title.label || defaultLabel));\n\n    }\n\n    return this.state.isEditMode ?\n    ___EmotionJSX(Input, {\n      className: \"metric-edit-popover-label-input\",\n      type: \"text\",\n      placeholder: title.label,\n      value: title.hasCustomLabel ? title.label : '',\n      autoFocus: true,\n      onChange: onChange,\n      onBlur: this.onInputBlur }) :\n\n\n\n    ___EmotionJSX(Tooltip, { placement: \"top\", title: \"Click to edit label\" },\n    ___EmotionJSX(\"span\", {\n      className: \"AdhocMetricEditPopoverTitle inline-editable\",\n\n      onMouseOver: this.onMouseOver,\n      onMouseOut: this.onMouseOut,\n      onClick: this.onClick,\n      onBlur: this.onBlur,\n      role: \"button\",\n      tabIndex: 0 },\n\n    title.label || defaultLabel, \"\\xA0\",\n\n    ___EmotionJSX(\"i\", {\n      className: \"fa fa-pencil\",\n      style: { color: this.state.isHovered ? 'black' : 'grey' } })));\n\n\n\n\n  }}\n\nAdhocMetricEditPopoverTitle.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}