{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icons from 'src/components/Icons';\nimport DashboardComponent from 'src/dashboard/containers/DashboardComponent';\nimport DeleteComponentButton from 'src/dashboard/components/DeleteComponentButton';\nimport DragDroppable from 'src/dashboard/components/dnd/DragDroppable';\nimport DragHandle from 'src/dashboard/components/dnd/DragHandle';\nimport HoverMenu from 'src/dashboard/components/menu/HoverMenu';\nimport IconButton from 'src/dashboard/components/IconButton';\nimport ResizableContainer from 'src/dashboard/components/resizable/ResizableContainer';\nimport BackgroundStyleDropdown from 'src/dashboard/components/menu/BackgroundStyleDropdown';\nimport WithPopoverMenu from 'src/dashboard/components/menu/WithPopoverMenu';\nimport backgroundStyleOptions from 'src/dashboard/util/backgroundStyleOptions';\nimport { componentShape } from 'src/dashboard/util/propShapes';\nimport { BACKGROUND_TRANSPARENT } from 'src/dashboard/util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n\n  // grid related\n  availableColumnCount: PropTypes.number.isRequired,\n  columnWidth: PropTypes.number.isRequired,\n  minColumnWidth: PropTypes.number.isRequired,\n  onResizeStart: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  onResizeStop: PropTypes.func.isRequired,\n\n  // dnd\n  deleteComponent: PropTypes.func.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired };\n\n\nconst defaultProps = {};\n\nclass Column extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFocused: false };\n\n    this.handleChangeBackground = this.handleUpdateMeta.bind(\n    this,\n    'background');\n\n    this.handleChangeFocus = this.handleChangeFocus.bind(this);\n    this.handleDeleteComponent = this.handleDeleteComponent.bind(this);\n  }\n\n  handleDeleteComponent() {\n    const { deleteComponent, id, parentId } = this.props;\n    deleteComponent(id, parentId);\n  }\n\n  handleChangeFocus(nextFocus) {\n    this.setState(() => ({ isFocused: Boolean(nextFocus) }));\n  }\n\n  handleUpdateMeta(metaKey, nextValue) {\n    const { updateComponents, component } = this.props;\n    if (nextValue && component.meta[metaKey] !== nextValue) {\n      updateComponents({\n        [component.id]: {\n          ...component,\n          meta: {\n            ...component.meta,\n            [metaKey]: nextValue } } });\n\n\n\n    }\n  }\n\n  render() {\n    const {\n      component: columnComponent,\n      parentComponent,\n      index,\n      availableColumnCount,\n      columnWidth,\n      minColumnWidth,\n      depth,\n      onResizeStart,\n      onResize,\n      onResizeStop,\n      handleComponentDrop,\n      editMode,\n      onChangeTab,\n      isComponentVisible } =\n    this.props;\n\n    const columnItems = columnComponent.children || [];\n    const backgroundStyle = backgroundStyleOptions.find(\n    (opt) =>\n    opt.value === (\n    columnComponent.meta.background || BACKGROUND_TRANSPARENT));\n\n\n    return (\n      ___EmotionJSX(DragDroppable, {\n        component: columnComponent,\n        parentComponent: parentComponent,\n        orientation: \"column\",\n        index: index,\n        depth: depth,\n        onDrop: handleComponentDrop,\n        editMode: editMode },\n\n      ({ dropIndicatorProps, dragSourceRef }) =>\n      ___EmotionJSX(ResizableContainer, {\n        id: columnComponent.id,\n        adjustableWidth: true,\n        adjustableHeight: false,\n        widthStep: columnWidth,\n        widthMultiple: columnComponent.meta.width,\n        minWidthMultiple: minColumnWidth,\n        maxWidthMultiple:\n        availableColumnCount + (columnComponent.meta.width || 0),\n\n        onResizeStart: onResizeStart,\n        onResize: onResize,\n        onResizeStop: onResizeStop,\n        editMode: editMode },\n\n      ___EmotionJSX(WithPopoverMenu, {\n        isFocused: this.state.isFocused,\n        onChangeFocus: this.handleChangeFocus,\n        disableClick: true,\n        menuItems: [\n        ___EmotionJSX(BackgroundStyleDropdown, {\n          id: `${columnComponent.id}-background`,\n          value: columnComponent.meta.background,\n          onChange: this.handleChangeBackground })],\n\n\n        editMode: editMode },\n\n      editMode &&\n      ___EmotionJSX(HoverMenu, { innerRef: dragSourceRef, position: \"top\" },\n      ___EmotionJSX(DragHandle, { position: \"top\" }),\n      ___EmotionJSX(DeleteComponentButton, {\n        onDelete: this.handleDeleteComponent }),\n\n      ___EmotionJSX(IconButton, {\n        onClick: this.handleChangeFocus,\n        icon: ___EmotionJSX(Icons.Cog, { iconSize: \"xl\" }) })),\n\n\n\n      ___EmotionJSX(\"div\", {\n        className: cx(\n        'grid-column',\n        columnItems.length === 0 && 'grid-column--empty',\n        backgroundStyle.className) },\n\n\n      columnItems.map((componentId, itemIndex) =>\n      ___EmotionJSX(DashboardComponent, {\n        key: componentId,\n        id: componentId,\n        parentId: columnComponent.id,\n        depth: depth + 1,\n        index: itemIndex,\n        availableColumnCount: columnComponent.meta.width,\n        columnWidth: columnWidth,\n        onResizeStart: onResizeStart,\n        onResize: onResize,\n        onResizeStop: onResizeStop,\n        isComponentVisible: isComponentVisible,\n        onChangeTab: onChangeTab })),\n\n\n\n      dropIndicatorProps && ___EmotionJSX(\"div\", dropIndicatorProps))))));\n\n\n\n\n\n\n  }}\n\n\nColumn.propTypes = propTypes;\nColumn.defaultProps = defaultProps;\n\nexport default Column;","map":null,"metadata":{},"sourceType":"module"}