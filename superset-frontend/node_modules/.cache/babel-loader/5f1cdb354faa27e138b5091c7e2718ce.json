{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, css } from '@superset-ui/core';\nimport cx from 'classnames';\nimport Interweave from 'interweave';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Icons from 'src/components/Icons';\nimport { ToastType } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ToastContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  span {\n    padding: 0 11px;\n  }\n`;\nconst StyledIcon = (theme) => css`\n  min-width: ${theme.gridUnit * 5}px;\n  color: ${theme.colors.grayscale.base};\n`;\nexport default function Toast({ toast, onCloseToast }) {\n  const hideTimer = useRef();\n  const [visible, setVisible] = useState(false);\n  const showToast = () => {\n    setVisible(true);\n  };\n  const handleClosePress = useCallback(() => {\n    if (hideTimer.current) {\n      clearTimeout(hideTimer.current);\n    }\n    // Wait for the transition\n    setVisible(() => {\n      setTimeout(() => {\n        onCloseToast(toast.id);\n      }, 150);\n      return false;\n    });\n  }, [onCloseToast, toast.id]);\n  useEffect(() => {\n    setTimeout(showToast);\n    if (toast.duration > 0) {\n      hideTimer.current = setTimeout(handleClosePress, toast.duration);\n    }\n    return () => {\n      if (hideTimer.current) {\n        clearTimeout(hideTimer.current);\n      }\n    };\n  }, [handleClosePress, toast.duration]);\n  let className = 'toast--success';\n  let icon = ___EmotionJSX(Icons.CircleCheckSolid, { css: (theme) => StyledIcon(theme) });\n  if (toast.toastType === ToastType.WARNING) {\n    icon = ___EmotionJSX(Icons.WarningSolid, { css: StyledIcon });\n    className = 'toast--warning';\n  } else\n  if (toast.toastType === ToastType.DANGER) {\n    icon = ___EmotionJSX(Icons.ErrorSolid, { css: StyledIcon });\n    className = 'toast--danger';\n  } else\n  if (toast.toastType === ToastType.INFO) {\n    icon = ___EmotionJSX(Icons.InfoSolid, { css: StyledIcon });\n    className = 'toast--info';\n  }\n  return ___EmotionJSX(ToastContainer, { className: cx('alert', 'toast', visible && 'toast--visible', className), role: \"alert\" },\n  icon,\n  ___EmotionJSX(Interweave, { content: toast.text }),\n  ___EmotionJSX(\"i\", { className: \"fa fa-close pull-right pointer\", role: \"button\", tabIndex: 0, onClick: handleClosePress, \"aria-label\": \"Close\" }));\n\n}","map":null,"metadata":{},"sourceType":"module"}