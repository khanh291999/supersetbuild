{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, SupersetClient, logging, styled, css } from '@superset-ui/core';\nimport rison from 'rison';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport SupersetText from 'src/utils/textUtils';\nconst createFetchResourceMethod = (method) => (resource, relation, handleError, user) => async (filterValue = '', page, pageSize) => {var _json$result;\n  const resourceEndpoint = `/api/v1/${resource}/${method}/${relation}`;\n  const queryParams = rison.encode({\n    filter: filterValue,\n    page,\n    page_size: pageSize });\n\n  const { json = {} } = await SupersetClient.get({\n    endpoint: `${resourceEndpoint}?q=${queryParams}` });\n\n  let fetchedLoggedUser = false;\n  const loggedUser = user ?\n  {\n    label: `${user.firstName} ${user.lastName}`,\n    value: user.userId } :\n\n  undefined;\n  const data = [];\n  json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _json$result.forEach(({ text, value }) => {\n    if (loggedUser &&\n    value === loggedUser.value &&\n    text === loggedUser.label) {\n      fetchedLoggedUser = true;\n    } else\n    {\n      data.push({\n        label: text,\n        value });\n\n    }\n  });\n  if (loggedUser && (!filterValue || fetchedLoggedUser)) {\n    data.unshift(loggedUser);\n  }\n  return {\n    data,\n    totalCount: json == null ? void 0 : json.count };\n\n};\nexport const PAGE_SIZE = 5;\nconst getParams = (filters) => {\n  const params = {\n    order_column: 'changed_on_delta_humanized',\n    order_direction: 'desc',\n    page: 0,\n    page_size: PAGE_SIZE,\n    filters };\n\n  if (!filters)\n  delete params.filters;\n  return rison.encode(params);\n};\nexport const getEditedObjects = (userId) => {\n  const filters = {\n    edited: [\n    {\n      col: 'changed_by',\n      opr: 'rel_o_m',\n      value: `${userId}` }] };\n\n\n\n  const batch = [\n  SupersetClient.get({\n    endpoint: `/api/v1/dashboard/?q=${getParams(filters.edited)}` }),\n\n  SupersetClient.get({\n    endpoint: `/api/v1/chart/?q=${getParams(filters.edited)}` })];\n\n\n  return Promise.all(batch).\n  then(([editedCharts, editedDashboards]) => {var _editedDashboards$jso, _editedCharts$json;\n    const res = {\n      editedDash: (_editedDashboards$jso = editedDashboards.json) == null ? void 0 : _editedDashboards$jso.result.slice(0, 3),\n      editedChart: (_editedCharts$json = editedCharts.json) == null ? void 0 : _editedCharts$json.result.slice(0, 3) };\n\n    return res;\n  }).\n  catch((err) => err);\n};\nexport const getUserOwnedObjects = (userId, resource) => {\n  const filters = {\n    created: [\n    {\n      col: 'created_by',\n      opr: 'rel_o_m',\n      value: `${userId}` }] };\n\n\n\n  return SupersetClient.get({\n    endpoint: `/api/v1/${resource}/?q=${getParams(filters.created)}` }).\n  then((res) => {var _res$json;return (_res$json = res.json) == null ? void 0 : _res$json.result;});\n};\nexport const getRecentAcitivtyObjs = (userId, recent, addDangerToast) => SupersetClient.get({ endpoint: recent }).then((recentsRes) => {\n  const res = {};\n  const filters = [\n  {\n    col: 'created_by',\n    opr: 'rel_o_m',\n    value: 0 }];\n\n\n  const newBatch = [\n  SupersetClient.get({\n    endpoint: `/api/v1/chart/?q=${getParams(filters)}` }),\n\n  SupersetClient.get({\n    endpoint: `/api/v1/dashboard/?q=${getParams(filters)}` })];\n\n\n  return Promise.all(newBatch).\n  then(([chartRes, dashboardRes]) => {\n    res.examples = [...chartRes.json.result, ...dashboardRes.json.result];\n    res.viewed = recentsRes.json;\n    return res;\n  }).\n  catch((errMsg) => addDangerToast(t('There was an error fetching your recent activity:'), errMsg));\n});\nexport const createFetchRelated = createFetchResourceMethod('related');\nexport const createFetchDistinct = createFetchResourceMethod('distinct');\nexport function createErrorHandler(handleErrorFunc) {\n  return async (e) => {\n    const parsedError = await getClientErrorObject(e);\n    // Taking the first error returned from the API\n    // @ts-ignore\n    const errorsArray = parsedError == null ? void 0 : parsedError.errors;\n    const config = await SupersetText;\n    if (errorsArray &&\n    errorsArray.length &&\n    config &&\n    config.ERRORS &&\n    errorsArray[0].error_type in config.ERRORS) {\n      parsedError.message = config.ERRORS[errorsArray[0].error_type];\n    }\n    logging.error(e);\n    handleErrorFunc(parsedError.message || parsedError.error);\n  };\n}\nexport function handleChartDelete({ id, slice_name: sliceName }, addSuccessToast, addDangerToast, refreshData, chartFilter, userId) {\n  const filters = {\n    pageIndex: 0,\n    pageSize: PAGE_SIZE,\n    sortBy: [\n    {\n      id: 'changed_on_delta_humanized',\n      desc: true }],\n\n\n    filters: [\n    {\n      id: 'created_by',\n      operator: 'rel_o_m',\n      value: `${userId}` }] };\n\n\n\n  SupersetClient.delete({\n    endpoint: `/api/v1/chart/${id}` }).\n  then(() => {\n    if (chartFilter === 'Mine')\n    refreshData(filters);else\n\n    refreshData();\n    addSuccessToast(t('Deleted: %s', sliceName));\n  }, () => {\n    addDangerToast(t('There was an issue deleting: %s', sliceName));\n  });\n}\nexport function handleDashboardDelete({ id, dashboard_title: dashboardTitle }, refreshData, addSuccessToast, addDangerToast, dashboardFilter, userId) {\n  return SupersetClient.delete({\n    endpoint: `/api/v1/dashboard/${id}` }).\n  then(() => {\n    const filters = {\n      pageIndex: 0,\n      pageSize: PAGE_SIZE,\n      sortBy: [\n      {\n        id: 'changed_on_delta_humanized',\n        desc: true }],\n\n\n      filters: [\n      {\n        id: 'owners',\n        operator: 'rel_m_m',\n        value: `${userId}` }] };\n\n\n\n    if (dashboardFilter === 'Mine')\n    refreshData(filters);else\n\n    refreshData();\n    addSuccessToast(t('Deleted: %s', dashboardTitle));\n  }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', dashboardTitle, errMsg))));\n}\nexport function shortenSQL(sql, maxLines) {\n  let lines = sql.split('\\n');\n  if (lines.length >= maxLines) {\n    lines = lines.slice(0, maxLines);\n    lines.push('...');\n  }\n  return lines.join('\\n');\n}\n// loading card count for homepage\nexport const loadingCardCount = 5;\nconst breakpoints = [576, 768, 992, 1200];\nexport const mq = breakpoints.map((bp) => `@media (max-width: ${bp}px)`);\nexport const CardContainer = styled.div`\n  ${({ showThumbnails, theme }) => `\n    overflow: hidden;\n    display: grid;\n    grid-gap: ${theme.gridUnit * 12}px ${theme.gridUnit * 4}px;\n    grid-template-columns: repeat(auto-fit, 300px);\n    max-height: ${showThumbnails ? '314' : '148'}px;\n    margin-top: ${theme.gridUnit * -6}px;\n    padding: ${showThumbnails ?\n`${theme.gridUnit * 8 + 3}px ${theme.gridUnit * 9}px` :\n`${theme.gridUnit * 8 + 1}px ${theme.gridUnit * 9}px`};\n  `}\n`;\nexport const CardStyles = styled.div`\n  cursor: pointer;\n  a {\n    text-decoration: none;\n  }\n  .ant-card-cover > div {\n    /* Height is calculated based on 300px width, to keep the same aspect ratio as the 800*450 thumbnails */\n    height: 168px;\n  }\n`;\nexport const StyledIcon = (theme) => css`\n  margin: auto ${theme.gridUnit * 2}px auto 0;\n  color: ${theme.colors.grayscale.base};\n`;\nexport /* eslint-disable no-underscore-dangle */const isNeedsPassword = (payload) => typeof payload === 'object' &&\nArray.isArray(payload._schema) &&\npayload._schema.length === 1 &&\npayload._schema[0] === 'Must provide a password for the database';\nexport const isAlreadyExists = (payload) => typeof payload === 'string' &&\npayload.includes('already exists and `overwrite=true` was not passed');\nexport const getPasswordsNeeded = (errors) => errors.\nmap((error) => Object.entries(error.extra).\nfilter(([, payload]) => isNeedsPassword(payload)).\nmap(([fileName]) => fileName)).\nflat();\nexport const getAlreadyExists = (errors) => errors.\nmap((error) => Object.entries(error.extra).\nfilter(([, payload]) => isAlreadyExists(payload)).\nmap(([fileName]) => fileName)).\nflat();\nexport const hasTerminalValidation = (errors) => errors.some((error) => !Object.values(error.extra).some((payload) => isNeedsPassword(payload) || isAlreadyExists(payload)));","map":null,"metadata":{},"sourceType":"module"}