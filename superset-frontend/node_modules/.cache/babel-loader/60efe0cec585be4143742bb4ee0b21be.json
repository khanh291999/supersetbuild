{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { t, SupersetClient, makeApi, styled } from '@superset-ui/core';\nimport moment from 'moment';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport Button from 'src/components/Button';\nimport FacePile from 'src/components/FacePile';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport { Switch } from 'src/components/Switch';\nimport { DATETIME_WITH_TIME_ZONE } from 'src/constants';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport AlertStatusIcon from 'src/views/CRUD/alert/components/AlertStatusIcon';\nimport RecipientIcon from 'src/views/CRUD/alert/components/RecipientIcon';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport DeleteModal from 'src/components/DeleteModal';\nimport LastUpdated from 'src/components/LastUpdated';\nimport { useListViewResource, useSingleViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler, createFetchRelated } from 'src/views/CRUD/utils';\nimport AlertReportModal from './AlertReportModal';\nimport { AlertState } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst deleteAlerts = makeApi({\n  requestType: 'rison',\n  method: 'DELETE',\n  endpoint: '/api/v1/report/' });\n\nconst RefreshContainer = styled.div`\n  width: 100%;\n  padding: 0 ${({ theme }) => theme.gridUnit * 4}px\n    ${({ theme }) => theme.gridUnit * 3}px;\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n`;\nfunction AlertList({ addDangerToast, isReportEnabled = false, user, addSuccessToast }) {\n  const title = isReportEnabled ? t('report') : t('alert');\n  const titlePlural = isReportEnabled ? t('reports') : t('alerts');\n  const pathName = isReportEnabled ? 'Reports' : 'Alerts';\n  const initalFilters = useMemo(() => [\n  {\n    id: 'type',\n    operator: FilterOperator.equals,\n    value: isReportEnabled ? 'Report' : 'Alert' }],\n\n  [isReportEnabled]);\n  const { state: { loading, resourceCount: alertsCount, resourceCollection: alerts, bulkSelectEnabled, lastFetched }, hasPerm, fetchData, refreshData, toggleBulkSelect } = useListViewResource('report', t('reports'), addDangerToast, true, undefined, initalFilters);\n  const { updateResource } = useSingleViewResource('report', t('reports'), addDangerToast);\n  const [alertModalOpen, setAlertModalOpen] = useState(false);\n  const [currentAlert, setCurrentAlert] = useState(null);\n  const [currentAlertDeleting, setCurrentAlertDeleting] = useState(null);\n  // Actions\n  function handleAlertEdit(alert) {\n    setCurrentAlert(alert);\n    setAlertModalOpen(true);\n  }\n  const generateKey = () => `${new Date().getTime()}`;\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  useEffect(() => {\n    if (bulkSelectEnabled && canDelete) {\n      toggleBulkSelect();\n    }\n  }, [isReportEnabled]);\n  const handleAlertDelete = ({ id, name }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/report/${id}` }).\n    then(() => {\n      refreshData();\n      setCurrentAlertDeleting(null);\n      addSuccessToast(t('Deleted: %s', name));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', name, errMsg))));\n  };\n  const handleBulkAlertDelete = async (alertsToDelete) => {\n    try {\n      const { message } = await deleteAlerts(alertsToDelete.map(({ id }) => id));\n      refreshData();\n      addSuccessToast(message);\n    }\n    catch (e) {\n      createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected %s: %s', titlePlural, errMsg)))(e);\n    }\n  };\n  const initialSort = [{ id: 'name', desc: true }];\n  const toggleActive = (data, checked) => {\n    if (data && data.id) {\n      const update_id = data.id;\n      updateResource(update_id, { active: checked }).then(() => {\n        refreshData();\n      });\n    }\n  };\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { last_state: lastState } } }) => ___EmotionJSX(AlertStatusIcon, { state: lastState, isReportEnabled: isReportEnabled }),\n    accessor: 'last_state',\n    size: 'xs',\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original: { last_eval_dttm: lastEvalDttm } } }) => lastEvalDttm ?\n    moment.utc(lastEvalDttm).local().format(DATETIME_WITH_TIME_ZONE) :\n    '',\n    accessor: 'last_eval_dttm',\n    Header: t('Last run'),\n    size: 'lg' },\n\n  {\n    accessor: 'name',\n    Header: t('Name'),\n    size: 'xl' },\n\n  {\n    Header: t('Schedule'),\n    accessor: 'crontab_humanized',\n    size: 'xl',\n    Cell: ({ row: { original: { crontab_humanized = '' } } }) => ___EmotionJSX(Tooltip, { title: crontab_humanized, placement: \"topLeft\" },\n    ___EmotionJSX(\"span\", null, crontab_humanized)) },\n\n\n  {\n    Cell: ({ row: { original: { recipients } } }) => recipients.map((r) => ___EmotionJSX(RecipientIcon, { key: r.id, type: r.type })),\n    accessor: 'recipients',\n    Header: t('Notification method'),\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    accessor: 'created_by',\n    disableSortBy: true,\n    hidden: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => ___EmotionJSX(FacePile, { users: owners }),\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => ___EmotionJSX(Switch, { checked: original.active, onClick: (checked) => toggleActive(original, checked), size: \"small\" }),\n    Header: t('Active'),\n    accessor: 'active',\n    id: 'active',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const history = useHistory();\n      const handleEdit = () => handleAlertEdit(original);\n      const handleDelete = () => setCurrentAlertDeleting(original);\n      const handleGotoExecutionLog = () => history.push(`/${original.type.toLowerCase()}/${original.id}/log`);\n      const actions = [\n      canEdit ?\n      {\n        label: 'execution-log-action',\n        tooltip: t('Execution log'),\n        placement: 'bottom',\n        icon: 'Note',\n        onClick: handleGotoExecutionLog } :\n\n      null,\n      canEdit ?\n      {\n        label: 'edit-action',\n        tooltip: t('Edit'),\n        placement: 'bottom',\n        icon: 'Edit',\n        onClick: handleEdit } :\n\n      null,\n      canDelete ?\n      {\n        label: 'delete-action',\n        tooltip: t('Delete'),\n        placement: 'bottom',\n        icon: 'Trash',\n        onClick: handleDelete } :\n\n      null].\n      filter((item) => item !== null);\n      return ___EmotionJSX(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete,\n    disableSortBy: true,\n    size: 'xl' }],\n\n  [canDelete, canEdit, isReportEnabled]);\n  const subMenuButtons = [];\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", title),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        handleAlertEdit(null);\n      } });\n\n  }\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select-toggle' });\n\n  }\n  const EmptyStateButton = ___EmotionJSX(Button, { buttonStyle: \"primary\", onClick: () => handleAlertEdit(null) },\n  ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", title);\n\n  const emptyState = {\n    message: t('No %s yet', titlePlural),\n    slot: canCreate ? EmptyStateButton : null };\n\n  const filters = useMemo(() => [\n  {\n    Header: t('Created by'),\n    id: 'created_by',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('report', 'created_by', createErrorHandler((errMsg) => t('An error occurred while fetching created by values: %s', errMsg)), user),\n    paginate: true },\n\n  {\n    Header: t('Status'),\n    id: 'last_state',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'Any',\n    selects: [\n    { label: t(`${AlertState.success}`), value: AlertState.success },\n    { label: t(`${AlertState.working}`), value: AlertState.working },\n    { label: t(`${AlertState.error}`), value: AlertState.error },\n    { label: t(`${AlertState.noop}`), value: AlertState.noop },\n    { label: t(`${AlertState.grace}`), value: AlertState.grace }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'name',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  []);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { activeChild: pathName, name: t('Alerts & reports'), tabs: [\n    {\n      name: 'Alerts',\n      label: t('Alerts'),\n      url: '/alert/list/',\n      usesRouter: true,\n      'data-test': 'alert-list' },\n\n    {\n      name: 'Reports',\n      label: t('Reports'),\n      url: '/report/list/',\n      usesRouter: true,\n      'data-test': 'report-list' }],\n\n    buttons: subMenuButtons },\n  ___EmotionJSX(RefreshContainer, null,\n  ___EmotionJSX(LastUpdated, { updatedAt: lastFetched, update: () => refreshData() }))),\n\n\n  ___EmotionJSX(AlertReportModal, { alert: currentAlert, addDangerToast: addDangerToast, layer: currentAlert, onHide: () => {\n      setAlertModalOpen(false);\n      setCurrentAlert(null);\n      refreshData();\n    }, show: alertModalOpen, isReport: isReportEnabled, key: (currentAlert == null ? void 0 : currentAlert.id) || generateKey() }),\n  currentAlertDeleting && ___EmotionJSX(DeleteModal, { description: t('This action will permanently delete %s.', currentAlertDeleting.name), onConfirm: () => {\n      if (currentAlertDeleting) {\n        handleAlertDelete(currentAlertDeleting);\n      }\n    }, onHide: () => setCurrentAlertDeleting(null), open: true, title: t('Delete %s?', title) }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected %s?', titlePlural), onConfirm: handleBulkAlertDelete },\n  (confirmDelete) => {\n    const bulkActions = canDelete ?\n    [\n    {\n      key: 'delete',\n      name: t('Delete'),\n      onSelect: confirmDelete,\n      type: 'danger' }] :\n\n\n    [];\n    return ___EmotionJSX(ListView, { className: \"alerts-list-view\", columns: columns, count: alertsCount, data: alerts, emptyState: emptyState, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, pageSize: PAGE_SIZE });\n  }));\n\n\n}\nexport default withToasts(AlertList);","map":null,"metadata":{},"sourceType":"module"}