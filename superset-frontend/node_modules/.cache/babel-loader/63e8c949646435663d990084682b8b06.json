{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType } from '@superset-ui/core';\nimport { FALSE_STRING, NULL_STRING, TRUE_STRING } from 'src/utils/common';\nexport const getSelectExtraFormData = (col, value, emptyFilter = false, inverseSelection = false) => {\n  const extra = {};\n  if (emptyFilter) {\n    extra.adhoc_filters = [\n    {\n      expressionType: 'SQL',\n      clause: 'WHERE',\n      sqlExpression: '1 = 0' }];\n\n\n  } else\n  if (value !== undefined && value !== null && value.length !== 0) {\n    extra.filters = [\n    {\n      col,\n      op: inverseSelection ? 'NOT IN' : 'IN',\n      // @ts-ignore\n      val: value }];\n\n\n  }\n  return extra;\n};\nexport const getRangeExtraFormData = (col, lower, upper) => {\n  const filters = [];\n  if (lower !== undefined && lower !== null) {\n    filters.push({ col, op: '>=', val: lower });\n  }\n  if (upper !== undefined && upper !== null) {\n    filters.push({ col, op: '<=', val: upper });\n  }\n  return filters.length ?\n  {\n    filters } :\n\n  {};\n};\nexport function getDataRecordFormatter({ timeFormatter, numberFormatter } = {}) {\n  return (value, dtype) => {\n    if (value === null || value === undefined) {\n      return NULL_STRING;\n    }\n    if (typeof value === 'boolean') {\n      return value ? TRUE_STRING : FALSE_STRING;\n    }\n    if (dtype === GenericDataType.BOOLEAN) {\n      try {\n        return JSON.parse(String(value).toLowerCase()) ?\n        TRUE_STRING :\n        FALSE_STRING;\n      }\n      catch {\n        return FALSE_STRING;\n      }\n    }\n    if (typeof value === 'string') {\n      return value;\n    }\n    if (timeFormatter && dtype === GenericDataType.TEMPORAL) {\n      return timeFormatter(value);\n    }\n    if (numberFormatter &&\n    typeof value === 'number' &&\n    dtype === GenericDataType.NUMERIC) {\n      return numberFormatter(value);\n    }\n    return String(value);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}