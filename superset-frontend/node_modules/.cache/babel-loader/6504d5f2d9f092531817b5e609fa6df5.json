{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Behavior, SuperChart, AppSection, t } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DefaultValue = ({ hasDefaultValue, filterId, hasDataset, form, setDataMask, formData, enableNoResults }) => {var _formFilter$defaultDa, _formFilter$defaultDa2;\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n  const queriesData = formFilter == null ? void 0 : formFilter.defaultValueQueriesData;\n  const loading = hasDataset && queriesData === null;\n  const value = (_formFilter$defaultDa = formFilter.defaultDataMask) == null ? void 0 : _formFilter$defaultDa.filterState.value;\n  const isMissingRequiredValue = hasDefaultValue && (value === null || value === undefined);\n  return loading ? ___EmotionJSX(Loading, { position: \"inline-centered\" }) : ___EmotionJSX(SuperChart, { height: 32, width: (formFilter == null ? void 0 : formFilter.filterType) === 'filter_time' ? 350 : 250, appSection: AppSection.FILTER_CONFIG_MODAL, behaviors: [Behavior.NATIVE_FILTER], formData: formData\n    // For charts that don't have datasource we need workaround for empty placeholder\n    , queriesData: hasDataset ? formFilter == null ? void 0 : formFilter.defaultValueQueriesData : [{ data: [{}] }], chartType: formFilter == null ? void 0 : formFilter.filterType, hooks: { setDataMask }, enableNoResults: enableNoResults, filterState: {\n      ...((_formFilter$defaultDa2 = formFilter.defaultDataMask) == null ? void 0 : _formFilter$defaultDa2.filterState),\n      validateMessage: isMissingRequiredValue && t('Value is required'),\n      validateStatus: isMissingRequiredValue && 'error' } });\n\n};\nexport default DefaultValue;","map":null,"metadata":{},"sourceType":"module"}