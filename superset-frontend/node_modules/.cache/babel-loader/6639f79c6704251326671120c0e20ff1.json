{"ast":null,"code":"import { timeSecond, timeMinute, timeHour, timeDay, timeWeek, timeSunday, timeMonday, timeTuesday, timeWednesday, timeThursday, timeFriday, timeSaturday, timeMonth, timeYear, utcSecond, utcMinute, utcHour, utcDay, utcWeek, utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcMonth, utcYear } from 'd3-time';\n\nfunction createUtils(useLocalTime = false) {\n  let floorSecond;\n  let floorMinute;\n  let floorHour;\n  let floorDay;\n  let floorWeek;\n  let floorWeekStartOnSunday;\n  let floorWeekStartOnMonday;\n  let floorWeekStartOnTuesday;\n  let floorWeekStartOnWednesday;\n  let floorWeekStartOnThursday;\n  let floorWeekStartOnFriday;\n  let floorWeekStartOnSaturday;\n  let floorMonth;\n  let floorYear;\n\n  if (useLocalTime) {\n    floorSecond = timeSecond;\n    floorMinute = timeMinute;\n    floorHour = timeHour;\n    floorDay = timeDay;\n    floorWeek = timeWeek;\n    floorWeekStartOnSunday = timeSunday;\n    floorWeekStartOnMonday = timeMonday;\n    floorWeekStartOnTuesday = timeTuesday;\n    floorWeekStartOnWednesday = timeWednesday;\n    floorWeekStartOnThursday = timeThursday;\n    floorWeekStartOnFriday = timeFriday;\n    floorWeekStartOnSaturday = timeSaturday;\n    floorMonth = timeMonth;\n    floorYear = timeYear;\n  } else {\n    floorSecond = utcSecond;\n    floorMinute = utcMinute;\n    floorHour = utcHour;\n    floorDay = utcDay;\n    floorWeek = utcWeek;\n    floorWeekStartOnSunday = utcSunday;\n    floorWeekStartOnMonday = utcMonday;\n    floorWeekStartOnTuesday = utcTuesday;\n    floorWeekStartOnWednesday = utcWednesday;\n    floorWeekStartOnThursday = utcThursday;\n    floorWeekStartOnFriday = utcFriday;\n    floorWeekStartOnSaturday = utcSaturday;\n    floorMonth = utcMonth;\n    floorYear = utcYear;\n  }\n\n  return {\n    floorSecond,\n    floorMinute,\n    floorHour,\n    floorDay,\n    floorWeek,\n    floorWeekStartOnSunday,\n    floorWeekStartOnMonday,\n    floorWeekStartOnTuesday,\n    floorWeekStartOnWednesday,\n    floorWeekStartOnThursday,\n    floorWeekStartOnFriday,\n    floorWeekStartOnSaturday,\n    floorMonth,\n    floorYear,\n    hasMillisecond: (date) => floorSecond(date) < date,\n    hasSecond: (date) => floorMinute(date) < date,\n    hasMinute: (date) => floorHour(date) < date,\n    hasHour: (date) => floorDay(date) < date,\n    isNotFirstDayOfMonth: (date) => floorMonth(date) < date,\n    isNotFirstDayOfWeek: (date) => floorWeek(date) < date,\n    isNotFirstDayOfWeekStartOnSunday: (date) => floorWeekStartOnSunday(date) < date,\n    isNotFirstDayOfWeekStartOnMonday: (date) => floorWeekStartOnMonday(date) < date,\n    isNotFirstDayOfWeekStartOnTuesday: (date) => floorWeekStartOnTuesday(date) < date,\n    isNotFirstDayOfWeekStartOnWednesday: (date) => floorWeekStartOnWednesday(date) < date,\n    isNotFirstDayOfWeekStartOnThursday: (date) => floorWeekStartOnThursday(date) < date,\n    isNotFirstDayOfWeekStartOnFriday: (date) => floorWeekStartOnFriday(date) < date,\n    isNotFirstDayOfWeekStartOnSaturday: (date) => floorWeekStartOnSaturday(date) < date,\n    isNotFirstMonth: (date) => floorYear(date) < date };\n\n}\n\nconst utcUtils = createUtils();\nconst localTimeUtils = createUtils(true);\nexport { utcUtils, localTimeUtils };","map":null,"metadata":{},"sourceType":"module"}