{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'src/common/components';\nimport { connect } from 'react-redux';\nimport { t, withTheme } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport Popover from 'src/components/Popover';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\nimport { getChartKey } from 'src/explore/exploreUtils';\nimport { runAnnotationQuery } from 'src/chart/chartAction';\nimport CustomListItem from 'src/explore/components/controls/CustomListItem';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst AnnotationLayer = AsyncEsmComponent(\n() => import('./AnnotationLayer'),\n// size of overlay inner content\n() => ___EmotionJSX(\"div\", { style: { width: 450, height: 368 } }));\n\n\nconst propTypes = {\n  colorScheme: PropTypes.string.isRequired,\n  annotationError: PropTypes.object,\n  annotationQuery: PropTypes.object,\n  vizType: PropTypes.string,\n\n  validationErrors: PropTypes.array,\n  name: PropTypes.string.isRequired,\n  actions: PropTypes.object,\n  value: PropTypes.arrayOf(PropTypes.object),\n  onChange: PropTypes.func,\n  refreshAnnotationData: PropTypes.func };\n\n\nconst defaultProps = {\n  vizType: '',\n  value: [],\n  annotationError: {},\n  annotationQuery: {},\n  onChange: () => {} };\n\n\nclass AnnotationLayerControl extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      popoverVisible: {},\n      addedAnnotationIndex: null };\n\n    this.addAnnotationLayer = this.addAnnotationLayer.bind(this);\n    this.removeAnnotationLayer = this.removeAnnotationLayer.bind(this);\n    this.handleVisibleChange = this.handleVisibleChange.bind(this);\n  }\n\n  componentDidMount() {\n    // preload the AnotationLayer component and dependent libraries i.e. mathjs\n    AnnotationLayer.preload();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { name, annotationError, validationErrors, value } = nextProps;\n    if (Object.keys(annotationError).length && !validationErrors.length) {\n      this.props.actions.setControlValue(\n      name,\n      value,\n      Object.keys(annotationError));\n\n    }\n    if (!Object.keys(annotationError).length && validationErrors.length) {\n      this.props.actions.setControlValue(name, value, []);\n    }\n  }\n\n  addAnnotationLayer(originalAnnotation, newAnnotation) {\n    let annotations = this.props.value;\n    if (annotations.includes(originalAnnotation)) {\n      annotations = annotations.map((anno) =>\n      anno === originalAnnotation ? newAnnotation : anno);\n\n    } else {\n      annotations = [...annotations, newAnnotation];\n      this.setState({ addedAnnotationIndex: annotations.length - 1 });\n    }\n\n    this.props.refreshAnnotationData(newAnnotation);\n    this.props.onChange(annotations);\n  }\n\n  handleVisibleChange(visible, popoverKey) {\n    this.setState((prevState) => ({\n      popoverVisible: { ...prevState.popoverVisible, [popoverKey]: visible } }));\n\n  }\n\n  removeAnnotationLayer(annotation) {\n    const annotations = this.props.value.filter((anno) => anno !== annotation);\n    this.props.onChange(annotations);\n  }\n\n  renderPopover(popoverKey, annotation, error) {\n    const id = (annotation == null ? void 0 : annotation.name) || '_new';\n\n    return (\n      ___EmotionJSX(\"div\", { id: `annotation-pop-${id}` },\n      ___EmotionJSX(AnnotationLayer, _extends({},\n      annotation, {\n        error: error,\n        colorScheme: this.props.colorScheme,\n        vizType: this.props.vizType,\n        addAnnotationLayer: (newAnnotation) =>\n        this.addAnnotationLayer(annotation, newAnnotation),\n\n        removeAnnotationLayer: () => this.removeAnnotationLayer(annotation),\n        close: () => {\n          this.handleVisibleChange(false, popoverKey);\n          this.setState({ addedAnnotationIndex: null });\n        } }))));\n\n\n\n  }\n\n  renderInfo(anno) {\n    const { annotationError, annotationQuery } = this.props;\n    if (annotationQuery[anno.name]) {\n      return (\n        ___EmotionJSX(\"i\", { className: \"fa fa-refresh\", style: { color: 'orange' }, \"aria-hidden\": true }));\n\n    }\n    if (annotationError[anno.name]) {\n      return (\n        ___EmotionJSX(InfoTooltipWithTrigger, {\n          label: \"validation-errors\",\n          bsStyle: \"danger\",\n          tooltip: annotationError[anno.name] }));\n\n\n    }\n    if (!anno.show) {\n      return ___EmotionJSX(\"span\", { style: { color: 'red' } }, \" Hidden \");\n    }\n    return '';\n  }\n\n  render() {\n    const { addedAnnotationIndex } = this.state;\n    const addedAnnotation = this.props.value[addedAnnotationIndex];\n\n    const annotations = this.props.value.map((anno, i) =>\n    ___EmotionJSX(Popover, {\n      key: i,\n      trigger: \"click\",\n      placement: \"right\",\n      title: t('Edit annotation layer'),\n      css: (theme) => ({\n        '&:hover': {\n          cursor: 'pointer',\n          backgroundColor: theme.colors.grayscale.light4 } }),\n\n\n      content: this.renderPopover(\n      i,\n      anno,\n      this.props.annotationError[anno.name]),\n\n      visible: this.state.popoverVisible[i],\n      onVisibleChange: (visible) => this.handleVisibleChange(visible, i) },\n\n    ___EmotionJSX(CustomListItem, { selectable: true },\n    ___EmotionJSX(\"span\", null, anno.name),\n    ___EmotionJSX(\"span\", { style: { float: 'right' } }, this.renderInfo(anno)))));\n\n\n\n\n    const addLayerPopoverKey = 'add';\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(List, { bordered: true, css: (theme) => ({ borderRadius: theme.gridUnit }) },\n      annotations,\n      ___EmotionJSX(Popover, {\n        trigger: \"click\",\n        placement: \"right\",\n        content: this.renderPopover(addLayerPopoverKey, addedAnnotation),\n        title: t('Add annotation layer'),\n        visible: this.state.popoverVisible[addLayerPopoverKey],\n        destroyTooltipOnHide: true,\n        onVisibleChange: (visible) =>\n        this.handleVisibleChange(visible, addLayerPopoverKey) },\n\n\n      ___EmotionJSX(CustomListItem, { selectable: true },\n      ___EmotionJSX(\"i\", {\n\n        className: \"fa fa-plus\" }),\n      ' ', \"\\xA0 \",\n      t('Add annotation layer'))))));\n\n\n\n\n\n  }}\n\n\nAnnotationLayerControl.propTypes = propTypes;\nAnnotationLayerControl.defaultProps = defaultProps;\n\n// Tried to hook this up through stores/control.jsx instead of using redux\n// directly, could not figure out how to get access to the color_scheme\nfunction mapStateToProps({ charts, explore }) {var _explore$controls, _explore$controls$col;\n  const chartKey = getChartKey(explore);\n  const chart = charts[chartKey] || charts[0] || {};\n\n  return {\n    // eslint-disable-next-line camelcase\n    colorScheme: (_explore$controls = explore.controls) == null ? void 0 : (_explore$controls$col = _explore$controls.color_scheme) == null ? void 0 : _explore$controls$col.value,\n    annotationError: chart.annotationError,\n    annotationQuery: chart.annotationQuery,\n    vizType: explore.controls.viz_type.value };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    refreshAnnotationData: (annotationLayer) =>\n    dispatch(runAnnotationQuery(annotationLayer)) };\n\n}\n\nconst themedAnnotationLayerControl = withTheme(AnnotationLayerControl);\n\nexport default connect(\nmapStateToProps,\nmapDispatchToProps)(\nthemedAnnotationLayerControl);","map":null,"metadata":{},"sourceType":"module"}