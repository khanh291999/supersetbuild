{"ast":null,"code":"var _getCategoricalScheme, _getCategoricalScheme2; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { getCategoricalSchemeRegistry, styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Avatar } from 'src/common/components';\nimport { getRandomColor } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst colorList = (_getCategoricalScheme = (_getCategoricalScheme2 = getCategoricalSchemeRegistry().get()) == null ? void 0 : _getCategoricalScheme2.colors) != null ? _getCategoricalScheme : [];\nconst customAvatarStyler = (theme) => `\n  width: ${theme.gridUnit * 6}px;\n  height: ${theme.gridUnit * 6}px;\n  line-height: ${theme.gridUnit * 6}px;\n  font-size: ${theme.typography.sizes.m}px;\n`;\nconst StyledAvatar = styled(Avatar)`\n  ${({ theme }) => customAvatarStyler(theme)}\n`;\n// to apply styling to the maxCount avatar\nconst StyledGroup = styled(Avatar.Group)`\n  .ant-avatar {\n    ${({ theme }) => customAvatarStyler(theme)}\n  }\n`;\nexport default function FacePile({ users, maxCount = 4 }) {\n  return ___EmotionJSX(StyledGroup, { maxCount: maxCount },\n  users.map(({ first_name, last_name, id }) => {var _first_name$, _last_name$;\n    const name = `${first_name} ${last_name}`;\n    const uniqueKey = `${id}-${first_name}-${last_name}`;\n    const color = getRandomColor(uniqueKey, colorList);\n    return ___EmotionJSX(Tooltip, { key: name, title: name, placement: \"top\" },\n    ___EmotionJSX(StyledAvatar, { key: name, style: {\n        backgroundColor: color,\n        borderColor: color } },\n\n    first_name && ((_first_name$ = first_name[0]) == null ? void 0 : _first_name$.toLocaleUpperCase()),\n    last_name && ((_last_name$ = last_name[0]) == null ? void 0 : _last_name$.toLocaleUpperCase())));\n\n\n  }));\n\n}","map":null,"metadata":{},"sourceType":"module"}