{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { t, useTheme } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { AddControlLabel, DndLabelsContainer, HeaderContainer } from 'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function DndSelectLabel({ displayGhostButton = true, accept, ...props }) {\n  const theme = useTheme();\n  const [{ isOver, canDrop }, datasourcePanelDrop] = useDrop({\n    accept,\n    drop: (item) => {\n      props.onDrop(item);\n      props.onDropValue == null ? void 0 : props.onDropValue(item.value);\n    },\n    canDrop: (item) => {var _props$canDropValue;return props.canDrop(item) && ((_props$canDropValue = props.canDropValue == null ? void 0 : props.canDropValue(item.value)) != null ? _props$canDropValue : true);},\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      type: monitor.getItemType() }) });\n\n\n  function renderGhostButton() {\n    return ___EmotionJSX(AddControlLabel, { cancelHover: !props.onClickGhostButton, onClick: props.onClickGhostButton },\n    ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n    t(props.ghostButtonText || 'Drop columns here'));\n\n  }\n  return ___EmotionJSX(\"div\", { ref: datasourcePanelDrop },\n  ___EmotionJSX(HeaderContainer, null,\n  ___EmotionJSX(ControlHeader, props)),\n\n  ___EmotionJSX(DndLabelsContainer, { canDrop: canDrop, isOver: isOver },\n  props.valuesRenderer(),\n  displayGhostButton && renderGhostButton()));\n\n\n}","map":null,"metadata":{},"sourceType":"module"}