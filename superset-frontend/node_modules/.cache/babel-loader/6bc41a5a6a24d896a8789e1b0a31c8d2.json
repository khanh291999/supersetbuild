{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Alert from 'src/components/Alert';\nimport { styled, logging, t } from '@superset-ui/core';\n\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { PLACEHOLDER_DATASOURCE } from 'src/dashboard/constants';\nimport Button from 'src/components/Button';\nimport Loading from 'src/components/Loading';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport ChartRenderer from './ChartRenderer';\nimport { ChartErrorMessage } from './ChartErrorMessage';\nimport { Logger, LOG_ACTIONS_RENDER_CHART } from '../logger/LogUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  annotationData: PropTypes.object,\n  actions: PropTypes.object,\n  chartId: PropTypes.number.isRequired,\n  datasource: PropTypes.object,\n  // current chart is included by dashboard\n  dashboardId: PropTypes.number,\n  // original selected values for FilterBox viz\n  // so that FilterBox can pre-populate selected values\n  // only affect UI control\n  initialValues: PropTypes.object,\n  // formData contains chart's own filter parameter\n  // and merged with extra filter that current dashboard applying\n  formData: PropTypes.object.isRequired,\n  labelColors: PropTypes.object,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  setControlValue: PropTypes.func,\n  timeout: PropTypes.number,\n  vizType: PropTypes.string.isRequired,\n  triggerRender: PropTypes.bool,\n  isFiltersInitialized: PropTypes.bool,\n  // state\n  chartAlert: PropTypes.string,\n  chartStatus: PropTypes.string,\n  chartStackTrace: PropTypes.string,\n  queriesResponse: PropTypes.arrayOf(PropTypes.object),\n  triggerQuery: PropTypes.bool,\n  refreshOverlayVisible: PropTypes.bool,\n  errorMessage: PropTypes.node,\n  // dashboard callbacks\n  addFilter: PropTypes.func,\n  onQuery: PropTypes.func,\n  onFilterMenuOpen: PropTypes.func,\n  onFilterMenuClose: PropTypes.func,\n  ownState: PropTypes.object };\n\n\nconst BLANK = {};\nconst NONEXISTENT_DATASET = t(\n'The dataset associated with this chart no longer exists');\n\n\nconst defaultProps = {\n  addFilter: () => BLANK,\n  onFilterMenuOpen: () => BLANK,\n  onFilterMenuClose: () => BLANK,\n  initialValues: BLANK,\n  setControlValue() {},\n  triggerRender: false,\n  dashboardId: null,\n  chartStackTrace: null };\n\n\nconst Styles = styled.div`\n  min-height: ${(p) => p.height}px;\n  position: relative;\n\n  .chart-tooltip {\n    opacity: 0.75;\n    font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  }\n`;\n\nconst RefreshOverlayWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nclass Chart extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleRenderContainerFailure = this.handleRenderContainerFailure.bind(\n    this);\n\n  }\n\n  componentDidMount() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n\n  runQuery() {\n    if (this.props.chartId > 0 && isFeatureEnabled(FeatureFlag.CLIENT_CACHE)) {\n      // Load saved chart with a GET request\n      this.props.actions.getSavedChart(\n      this.props.formData,\n      false,\n      this.props.timeout,\n      this.props.chartId,\n      this.props.dashboardId,\n      this.props.ownState);\n\n    } else {\n      // Create chart with POST request\n      this.props.actions.postChartFormData(\n      this.props.formData,\n      false,\n      this.props.timeout,\n      this.props.chartId,\n      this.props.dashboardId,\n      this.props.ownState);\n\n    }\n  }\n\n  handleRenderContainerFailure(error, info) {\n    const { actions, chartId } = this.props;\n    logging.warn(error);\n    actions.chartRenderingFailed(\n    error.toString(),\n    chartId,\n    info ? info.componentStack : null);\n\n\n    actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n      slice_id: chartId,\n      has_err: true,\n      error_details: error.toString(),\n      start_offset: this.renderStartTime,\n      ts: new Date().getTime(),\n      duration: Logger.getTimestamp() - this.renderStartTime });\n\n  }\n\n  renderErrorMessage(queryResponse) {var _queryResponse$errors;\n    const {\n      chartId,\n      chartAlert,\n      chartStackTrace,\n      datasource,\n      dashboardId,\n      height } =\n    this.props;\n\n    const error = queryResponse == null ? void 0 : (_queryResponse$errors = queryResponse.errors) == null ? void 0 : _queryResponse$errors[0];\n    const message = chartAlert || (queryResponse == null ? void 0 : queryResponse.message);\n\n    // if datasource is still loading, don't render JS errors\n    if (\n    chartAlert !== undefined &&\n    chartAlert !== NONEXISTENT_DATASET &&\n    datasource === PLACEHOLDER_DATASOURCE)\n    {\n      return (\n        ___EmotionJSX(Styles, {\n          \"data-ui-anchor\": \"chart\",\n          className: \"chart-container\",\n\n          height: height },\n\n        ___EmotionJSX(Loading, null)));\n\n\n    }\n\n    return (\n      ___EmotionJSX(ChartErrorMessage, {\n        chartId: chartId,\n        error: error,\n        subtitle: message,\n        copyText: message,\n        link: queryResponse ? queryResponse.link : null,\n        source: dashboardId ? 'dashboard' : 'explore',\n        stackTrace: chartStackTrace }));\n\n\n  }\n\n  render() {\n    const {\n      height,\n      chartAlert,\n      chartStatus,\n      errorMessage,\n      onQuery,\n      refreshOverlayVisible,\n      queriesResponse = [] } =\n    this.props;\n\n    const isLoading = chartStatus === 'loading';\n    const isFaded = refreshOverlayVisible && !errorMessage;\n    this.renderContainerStartTime = Logger.getTimestamp();\n    if (chartStatus === 'failed') {\n      return queriesResponse.map((item) => this.renderErrorMessage(item));\n    }\n\n    if (errorMessage) {\n      return (\n        ___EmotionJSX(Alert, {\n\n          message: errorMessage,\n          type: \"warning\" }));\n\n\n    }\n\n    return (\n      ___EmotionJSX(ErrorBoundary, {\n        onError: this.handleRenderContainerFailure,\n        showMessage: false },\n\n      ___EmotionJSX(Styles, {\n        \"data-ui-anchor\": \"chart\",\n        className: \"chart-container\",\n\n        height: height },\n\n      ___EmotionJSX(\"div\", {\n        className: `slice_container ${isFaded ? ' faded' : ''}` },\n\n\n      ___EmotionJSX(ChartRenderer, this.props)),\n\n\n      !isLoading && !chartAlert && isFaded &&\n      ___EmotionJSX(RefreshOverlayWrapper, null,\n      ___EmotionJSX(Button, { onClick: onQuery, buttonStyle: \"primary\" },\n      t('Run query'))),\n\n\n\n\n      isLoading && ___EmotionJSX(Loading, null))));\n\n\n\n  }}\n\n\nChart.propTypes = propTypes;\nChart.defaultProps = defaultProps;\n\nexport default Chart;","map":null,"metadata":{},"sourceType":"module"}