{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { styled, t } from '@superset-ui/core';\nimport { setInLocalStorage } from 'src/utils/localStorageHelpers';\nimport ListViewCard from 'src/components/ListViewCard';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport { LoadingCards } from 'src/views/CRUD/welcome/Welcome';\nimport { CardStyles, getEditedObjects, CardContainer } from 'src/views/CRUD/utils';\nimport { HOMEPAGE_ACTIVITY_FILTER } from 'src/views/CRUD/storageKeys';\nimport Icons from 'src/components/Icons';\nimport EmptyState from './EmptyState';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar SetTabType;\n(function (SetTabType) {\n  SetTabType[\"EDITED\"] = \"Edited\";\n  SetTabType[\"CREATED\"] = \"Created\";\n  SetTabType[\"VIEWED\"] = \"Viewed\";\n  SetTabType[\"EXAMPLE\"] = \"Examples\";\n})(SetTabType || (SetTabType = {}));\nconst Styles = styled.div`\n  .recentCards {\n    max-height: none;\n    grid-gap: ${({ theme }) => `${theme.gridUnit * 4}px`};\n  }\n`;\nconst UNTITLED = t('[Untitled]');\nconst UNKNOWN_TIME = t('Unknown');\nconst getEntityTitle = (entity) => {\n  if ('dashboard_title' in entity)\n  return entity.dashboard_title || UNTITLED;\n  if ('slice_name' in entity)\n  return entity.slice_name || UNTITLED;\n  if ('label' in entity)\n  return entity.label || UNTITLED;\n  return entity.item_title || UNTITLED;\n};\nconst getEntityIcon = (entity) => {\n  if ('sql' in entity)\n  return ___EmotionJSX(Icons.Sql, null);\n  const url = 'item_url' in entity ? entity.item_url : entity.url;\n  if (url != null && url.includes('dashboard')) {\n    return ___EmotionJSX(Icons.NavDashboard, null);\n  }\n  if (url != null && url.includes('explore')) {\n    return ___EmotionJSX(Icons.NavCharts, null);\n  }\n  return null;\n};\nconst getEntityUrl = (entity) => {\n  if ('sql' in entity)\n  return `/superset/sqllab?savedQueryId=${entity.id}`;\n  if ('url' in entity)\n  return entity.url;\n  return entity.item_url;\n};\nconst getEntityLastActionOn = (entity) => {\n  // translation keys for last action on\n  const LAST_VIEWED = `Viewed %s`;\n  const LAST_MODIFIED = `Modified %s`;\n  // for Recent viewed items\n  if ('time_delta_humanized' in entity) {\n    return t(LAST_VIEWED, entity.time_delta_humanized);\n  }\n  if ('changed_on_delta_humanized' in entity) {\n    return t(LAST_MODIFIED, entity.changed_on_delta_humanized);\n  }\n  let time;\n  let translationKey = LAST_MODIFIED;\n  if ('time' in entity) {\n    // eslint-disable-next-line prefer-destructuring\n    time = entity.time;\n    translationKey = LAST_VIEWED;\n  }\n  if ('changed_on' in entity)\n  time = entity.changed_on;\n  if ('changed_on_utc' in entity)\n  time = entity.changed_on_utc;\n  return t(translationKey, time == null ? UNKNOWN_TIME : moment(time).fromNow());\n};\nexport default function ActivityTable({ activeChild, setActiveChild, activityData, user, loadedCount }) {var _activityData$activeC;\n  const [editedObjs, setEditedObjs] = useState();\n  const [loadingState, setLoadingState] = useState(false);\n  const getEditedCards = () => {\n    setLoadingState(true);\n    getEditedObjects(user.userId).then((r) => {\n      setEditedObjs([...r.editedChart, ...r.editedDash]);\n      setLoadingState(false);\n    });\n  };\n  useEffect(() => {\n    if (activeChild === 'Edited') {\n      setLoadingState(true);\n      getEditedCards();\n    }\n  }, [activeChild]);\n  const tabs = [\n  {\n    name: 'Edited',\n    label: t('Edited'),\n    onClick: () => {\n      setActiveChild('Edited');\n      setInLocalStorage(HOMEPAGE_ACTIVITY_FILTER, SetTabType.EDITED);\n    } },\n\n  {\n    name: 'Created',\n    label: t('Created'),\n    onClick: () => {\n      setActiveChild('Created');\n      setInLocalStorage(HOMEPAGE_ACTIVITY_FILTER, SetTabType.CREATED);\n    } }];\n\n\n  if (activityData != null && activityData.Viewed) {\n    tabs.unshift({\n      name: 'Viewed',\n      label: t('Viewed'),\n      onClick: () => {\n        setActiveChild('Viewed');\n        setInLocalStorage(HOMEPAGE_ACTIVITY_FILTER, SetTabType.VIEWED);\n      } });\n\n  }\n  const renderActivity = () => (activeChild !== 'Edited' ? activityData[activeChild] : editedObjs).map((entity) => {\n    const url = getEntityUrl(entity);\n    const lastActionOn = getEntityLastActionOn(entity);\n    return ___EmotionJSX(CardStyles, { onClick: () => {\n        window.location.href = url;\n      }, key: url },\n    ___EmotionJSX(ListViewCard, { cover: ___EmotionJSX(React.Fragment, null), url: url, title: getEntityTitle(entity), description: lastActionOn, avatar: getEntityIcon(entity), actions: null }));\n\n  });\n  const doneFetching = loadedCount < 3;\n  if (loadingState && !editedObjs || doneFetching) {\n    return ___EmotionJSX(LoadingCards, null);\n  }\n  return ___EmotionJSX(Styles, null,\n  ___EmotionJSX(SubMenu, { activeChild: activeChild, tabs: tabs }),\n  ((_activityData$activeC = activityData[activeChild]) == null ? void 0 : _activityData$activeC.length) > 0 ||\n  activeChild === 'Edited' && editedObjs && editedObjs.length > 0 ? ___EmotionJSX(CardContainer, { className: \"recentCards\" },\n  renderActivity()) :\n  ___EmotionJSX(EmptyState, { tableName: \"RECENTS\", tab: activeChild }));\n\n}","map":null,"metadata":{},"sourceType":"module"}