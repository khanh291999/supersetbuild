{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef, useEffect } from 'react';\nimport { FixedSizeList as WindowedList } from 'react-window';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_OPTION_HEIGHT = 30;\n/**\n * Get the index of the last selected option.\n */\nfunction getLastSelected(children) {\n  return Array.isArray(children) ?\n  children.findIndex(({ props: { isFocused = false } = {} }) => isFocused) || 0 :\n  -1;\n}\n/**\n * Calculate probable option height as set in theme configs\n */\nfunction detectHeight({ spacing: { baseUnit, lineHeight } }) {\n  // Option item expects 2 * baseUnit for each of top and bottom padding.\n  return baseUnit * 4 + lineHeight;\n}\nexport default function WindowedMenuList({ children, ...props }) {\n  const { maxHeight, selectProps, theme, getStyles, cx, innerRef, isMulti, className } = props;\n  const {\n    // Expose react-window VariableSizeList instance and HTML elements\n    windowListRef: windowListRef_, windowListInnerRef } = selectProps;\n  const defaultWindowListRef = useRef(null);\n  const windowListRef = windowListRef_ || defaultWindowListRef;\n  // try get default option height from theme configs\n  let { optionHeight } = selectProps;\n  if (!optionHeight) {\n    optionHeight = theme ? detectHeight(theme) : DEFAULT_OPTION_HEIGHT;\n  }\n  const itemCount = children.length;\n  const totalHeight = optionHeight * itemCount;\n  const Row = ({ data, index, style }) => ___EmotionJSX(\"div\", { style: style }, data[index]);\n  useEffect(() => {\n    const lastSelected = getLastSelected(children);\n    if (windowListRef.current && lastSelected) {\n      windowListRef.current.scrollToItem(lastSelected);\n    }\n  }, [children, windowListRef]);\n  return ___EmotionJSX(WindowedList, { css: getStyles('menuList', props), className: cx({\n      'menu-list': true,\n      'menu-list--is-multi': isMulti },\n    className), ref: windowListRef, outerRef: innerRef, innerRef: windowListInnerRef, height: Math.min(totalHeight, maxHeight), width: \"100%\", itemData: children, itemCount: children.length, itemSize: optionHeight },\n  Row);\n\n}","map":null,"metadata":{},"sourceType":"module"}