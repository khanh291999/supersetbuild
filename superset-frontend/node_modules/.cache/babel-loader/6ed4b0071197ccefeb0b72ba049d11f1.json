{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getCategoricalSchemeRegistry, t } from '@superset-ui/core';\n\nimport ColorSchemeControl from 'src/explore/components/controls/ColorSchemeControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  labelMargin: PropTypes.number,\n  colorScheme: PropTypes.string };\n\n\nconst defaultProps = {\n  colorScheme: undefined,\n  onChange: () => {} };\n\n\nclass ColorSchemeControlWrapper extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { hovered: false };\n    this.categoricalSchemeRegistry = getCategoricalSchemeRegistry();\n    this.choices = this.categoricalSchemeRegistry.keys().map((s) => [s, s]);\n    this.schemes = this.categoricalSchemeRegistry.getMap();\n  }\n\n  setHover(hovered) {\n    this.setState({ hovered });\n  }\n\n  render() {\n    const { colorScheme, labelMargin = 0 } = this.props;\n    return (\n      ___EmotionJSX(ColorSchemeControl, {\n        description: t(\n        \"Any color palette selected here will override the colors applied to this dashboard's individual charts\"),\n\n        label: t('Color scheme'),\n        labelMargin: labelMargin,\n        name: \"color_scheme\",\n        onChange: this.props.onChange,\n        value: colorScheme,\n        choices: this.choices,\n        clearable: true,\n        schemes: this.schemes,\n        hovered: this.state.hovered }));\n\n\n  }}\n\n\nColorSchemeControlWrapper.propTypes = propTypes;\nColorSchemeControlWrapper.defaultProps = defaultProps;\n\nexport default ColorSchemeControlWrapper;","map":null,"metadata":{},"sourceType":"module"}