{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\nimport { AppSection, ensureIsArray, smartDateDetailedFormatter, t, tn } from '@superset-ui/core';\nimport React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { Select } from 'src/components';\nimport debounce from 'lodash/debounce';\nimport { SLOW_DEBOUNCE } from 'src/constants';\nimport { useImmerReducer } from 'use-immer';\nimport { StyledFormItem, FilterPluginStyle, StatusMessage } from '../common';\nimport { getDataRecordFormatter, getSelectExtraFormData } from '../../utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction reducer(draft, action) {\n  switch (action.type) {\n    case 'ownState':\n      draft.ownState = {\n        ...draft.ownState,\n        ...action.ownState };\n\n      return draft;\n    case 'filterState':\n      draft.extraFormData = action.extraFormData;\n      // eslint-disable-next-line no-underscore-dangle\n      draft.__cache = action.__cache;\n      draft.filterState = { ...draft.filterState, ...action.filterState };\n      return draft;\n    default:\n      return draft;}\n\n}\nexport default function PluginFilterSelect(props) {\n  const { coltypeMap, data, filterState, formData, height, isRefreshing, width, setDataMask, setFocusedFilter, unsetFocusedFilter, appSection } = props;\n  const { enableEmptyFilter, multiSelect, showSearch, inverseSelection, inputRef, defaultToFirstItem, searchAllOptions } = formData;\n  const groupby = ensureIsArray(formData.groupby);\n  const [col] = groupby;\n  const [initialColtypeMap] = useState(coltypeMap);\n  const [dataMask, dispatchDataMask] = useImmerReducer(reducer, {\n    extraFormData: {},\n    filterState });\n\n  const datatype = coltypeMap[col];\n  const labelFormatter = useMemo(() => getDataRecordFormatter({\n    timeFormatter: smartDateDetailedFormatter }),\n  []);\n  const updateDataMask = useCallback((values) => {\n    const emptyFilter = enableEmptyFilter && !inverseSelection && !(values != null && values.length);\n    const suffix = inverseSelection && values != null && values.length ? ` (${t('excluded')})` : '';\n    dispatchDataMask({\n      type: 'filterState',\n      __cache: filterState,\n      extraFormData: getSelectExtraFormData(col, values, emptyFilter, inverseSelection),\n      filterState: {\n        ...filterState,\n        label: values != null && values.length ?\n        `${(values || []).\n        map((value) => labelFormatter(value, datatype)).\n        join(', ')}${suffix}` :\n        undefined,\n        value: appSection === AppSection.FILTER_CONFIG_MODAL && defaultToFirstItem ?\n        undefined :\n        values } });\n\n\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  appSection,\n  col,\n  datatype,\n  defaultToFirstItem,\n  dispatchDataMask,\n  enableEmptyFilter,\n  inverseSelection,\n  JSON.stringify(filterState),\n  labelFormatter]);\n\n  useEffect(() => {\n    updateDataMask(filterState.value);\n  }, [JSON.stringify(filterState.value)]);\n  const isDisabled = appSection === AppSection.FILTER_CONFIG_MODAL && defaultToFirstItem;\n  const debouncedOwnStateFunc = useCallback(debounce((val) => {\n    dispatchDataMask({\n      type: 'ownState',\n      ownState: {\n        coltypeMap: initialColtypeMap,\n        search: val } });\n\n\n  }, SLOW_DEBOUNCE), []);\n  const searchWrapper = (val) => {\n    if (searchAllOptions) {\n      debouncedOwnStateFunc(val);\n    }\n  };\n  const clearSuggestionSearch = () => {\n    if (searchAllOptions) {\n      dispatchDataMask({\n        type: 'ownState',\n        ownState: {\n          coltypeMap: initialColtypeMap,\n          search: null } });\n\n\n    }\n  };\n  const handleBlur = () => {\n    clearSuggestionSearch();\n    unsetFocusedFilter();\n  };\n  const handleChange = (value) => {\n    const values = ensureIsArray(value);\n    if (values.length === 0) {\n      updateDataMask(null);\n    } else\n    {\n      updateDataMask(values);\n    }\n  };\n  useEffect(() => {\n    if (defaultToFirstItem && filterState.value === undefined) {\n      // initialize to first value if set to default to first item\n      const firstItem = data[0] ?\n      groupby.map((col) => data[0][col]) :\n      null;\n      // firstItem[0] !== undefined for a case when groupby changed but new data still not fetched\n      // TODO: still need repopulate default value in config modal when column changed\n      if (firstItem && firstItem[0] !== undefined) {\n        updateDataMask(firstItem);\n      }\n    } else\n    if (isDisabled) {\n      // empty selection if filter is disabled\n      updateDataMask(null);\n    } else\n    {\n      // reset data mask based on filter state\n      updateDataMask(filterState.value);\n    }\n  }, [\n  col,\n  isDisabled,\n  defaultToFirstItem,\n  enableEmptyFilter,\n  inverseSelection,\n  updateDataMask,\n  data,\n  groupby,\n  JSON.stringify(filterState)]);\n\n  useEffect(() => {\n    setDataMask(dataMask);\n  }, [JSON.stringify(dataMask)]);\n  const placeholderText = data.length === 0 ?\n  t('No data') :\n  tn('%s option', '%s options', data.length, data.length);\n  const formItemData = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = ___EmotionJSX(StatusMessage, { status: filterState.validateStatus },\n    filterState.validateMessage);\n\n  }\n  const options = useMemo(() => {\n    const options = [];\n    data.forEach((row) => {\n      const [value] = groupby.map((col) => row[col]);\n      options.push({\n        label: labelFormatter(value, datatype),\n        value });\n\n    });\n    return options;\n  }, [data, datatype, groupby, labelFormatter]);\n  return ___EmotionJSX(FilterPluginStyle, { height: height, width: width },\n  ___EmotionJSX(StyledFormItem, _extends({ validateStatus: filterState.validateStatus }, formItemData),\n  ___EmotionJSX(Select, { allowClear: true, allowNewOptions: true\n    // @ts-ignore\n    , value: filterState.value || [], disabled: isDisabled, showSearch: showSearch, mode: multiSelect ? 'multiple' : 'single', placeholder: placeholderText, onSearch: searchWrapper, onSelect: clearSuggestionSearch, onBlur: handleBlur, onMouseEnter: setFocusedFilter, onMouseLeave: unsetFocusedFilter\n    // @ts-ignore\n    , onChange: handleChange, ref: inputRef, loading: isRefreshing, maxTagCount: 5, invertSelection: inverseSelection\n    // @ts-ignore\n    , options: options })));\n\n\n}","map":null,"metadata":{},"sourceType":"module"}