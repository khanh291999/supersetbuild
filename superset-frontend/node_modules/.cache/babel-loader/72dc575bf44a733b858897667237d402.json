{"ast":null,"code":"import _reject from \"lodash/reject\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\n\nimport { getFromLocalStorage, setInLocalStorage } from 'src/utils/localStorageHelpers';\nimport ListViewCard from 'src/components/ListViewCard';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { createErrorHandler, getRecentAcitivtyObjs, mq, CardContainer, getUserOwnedObjects, loadingCardCount } from 'src/views/CRUD/utils';\nimport { HOMEPAGE_ACTIVITY_FILTER, HOMEPAGE_COLLAPSE_STATE } from 'src/views/CRUD/storageKeys';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { Switch } from 'src/common/components';\nimport ActivityTable from './ActivityTable';\nimport ChartTable from './ChartTable';\nimport SavedQueries from './SavedQueries';\nimport DashboardTable from './DashboardTable';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_TAB_ARR = ['2', '3'];\nconst WelcomeContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.grayscale.light4};\n  .ant-row.menu {\n    margin-top: -15px;\n    background-color: ${({ theme }) => theme.colors.grayscale.light4};\n    &:after {\n      content: '';\n      display: block;\n      border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      margin: 0px ${({ theme }) => theme.gridUnit * 6}px;\n      position: relative;\n      width: 100%;\n      ${mq[1]} {\n        margin-top: 5px;\n        margin: 0px 2px;\n      }\n    }\n    .ant-menu.ant-menu-light.ant-menu-root.ant-menu-horizontal {\n      padding-left: ${({ theme }) => theme.gridUnit * 8}px;\n    }\n    button {\n      padding: 3px 21px;\n    }\n  }\n  .ant-card-meta-description {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n  .ant-card.ant-card-bordered {\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n  .ant-collapse-item .ant-collapse-content {\n    margin-bottom: ${({ theme }) => theme.gridUnit * -6}px;\n  }\n  div.ant-collapse-item:last-child.ant-collapse-item-active\n    .ant-collapse-header {\n    padding-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  }\n  div.ant-collapse-item:last-child .ant-collapse-header {\n    padding-bottom: ${({ theme }) => theme.gridUnit * 9}px;\n  }\n  .loading-cards {\n    margin-top: ${({ theme }) => theme.gridUnit * 8}px;\n    .ant-card-cover > div {\n      height: 168px;\n    }\n  }\n`;\nconst WelcomeNav = styled.div`\n  height: 50px;\n  background-color: white;\n  .navbar-brand {\n    margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n  .switch {\n    float: right;\n    margin: ${({ theme }) => theme.gridUnit * 5}px;\n    display: flex;\n    flex-direction: row;\n    span {\n      display: block;\n      margin: ${({ theme }) => theme.gridUnit * 1}px;\n      line-height: 1;\n    }\n  }\n`;\nexport const LoadingCards = ({ cover }) => ___EmotionJSX(CardContainer, { showThumbnails: cover, className: \"loading-cards\" },\n[...new Array(loadingCardCount)].map(() => ___EmotionJSX(ListViewCard, { cover: cover ? false : ___EmotionJSX(React.Fragment, null), description: \"\", loading: true })));\n\nfunction Welcome({ user, addDangerToast }) {\n  const userid = user.userId;\n  const id = userid.toString();\n  const recent = `/superset/recent_activity/${user.userId}/?limit=6`;\n  const [activeChild, setActiveChild] = useState('Loading');\n  const userKey = getFromLocalStorage(id, null);\n  let defaultChecked = false;\n  if (isFeatureEnabled(FeatureFlag.THUMBNAILS)) {\n    defaultChecked =\n    (userKey == null ? void 0 : userKey.thumbnails) === undefined ? true : userKey == null ? void 0 : userKey.thumbnails;\n  }\n  const [checked, setChecked] = useState(defaultChecked);\n  const [activityData, setActivityData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [queryData, setQueryData] = useState(null);\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loadedCount, setLoadedCount] = useState(0);\n  const collapseState = getFromLocalStorage(HOMEPAGE_COLLAPSE_STATE, null);\n  const [activeState, setActiveState] = useState(collapseState);\n  const handleCollapse = (state) => {\n    setActiveState(state);\n    setInLocalStorage(HOMEPAGE_COLLAPSE_STATE, state);\n  };\n  useEffect(() => {\n    const activeTab = getFromLocalStorage(HOMEPAGE_ACTIVITY_FILTER, null);\n    setActiveState(collapseState || DEFAULT_TAB_ARR);\n    getRecentAcitivtyObjs(user.userId, recent, addDangerToast).\n    then((res) => {\n      const data = {};\n      data.Examples = res.examples;\n      if (res.viewed) {\n        const filtered = _reject(res.viewed, ['item_url', null]).map((r) => r);\n        data.Viewed = filtered;\n        if (!activeTab && data.Viewed) {\n          setActiveChild('Viewed');\n        } else\n        if (!activeTab && !data.Viewed) {\n          setActiveChild('Created');\n        } else\n\n        setActiveChild(activeTab);\n      } else\n      if (!activeTab)\n      setActiveChild('Created');else\n\n      setActiveChild(activeTab);\n      setActivityData((activityData) => ({ ...activityData, ...data }));\n    }).\n    catch(createErrorHandler((errMsg) => {\n      setActivityData((activityData) => ({ ...activityData, Viewed: [] }));\n      addDangerToast(t('There was an issue fetching your recent activity: %s', errMsg));\n    }));\n    // Sets other activity data in parallel with recents api call\n    getUserOwnedObjects(id, 'dashboard').\n    then((r) => {\n      setDashboardData(r);\n      setLoadedCount((loadedCount) => loadedCount + 1);\n    }).\n    catch((err) => {\n      setDashboardData([]);\n      setLoadedCount((loadedCount) => loadedCount + 1);\n      addDangerToast(t('There was an issues fetching your dashboards: %s', err));\n    });\n    getUserOwnedObjects(id, 'chart').\n    then((r) => {\n      setChartData(r);\n      setLoadedCount((loadedCount) => loadedCount + 1);\n    }).\n    catch((err) => {\n      setChartData([]);\n      setLoadedCount((loadedCount) => loadedCount + 1);\n      addDangerToast(t('There was an issues fetching your chart: %s', err));\n    });\n    getUserOwnedObjects(id, 'saved_query').\n    then((r) => {\n      setQueryData(r);\n      setLoadedCount((loadedCount) => loadedCount + 1);\n    }).\n    catch((err) => {\n      setQueryData([]);\n      setLoadedCount((loadedCount) => loadedCount + 1);\n      addDangerToast(t('There was an issues fetching your saved queries: %s', err));\n    });\n  }, []);\n  const handleToggle = () => {\n    setChecked(!checked);\n    setInLocalStorage(id, { thumbnails: !checked });\n  };\n  useEffect(() => {\n    if (!collapseState && queryData != null && queryData.length) {\n      setActiveState((activeState) => [...activeState, '4']);\n    }\n    setActivityData((activityData) => ({\n      ...activityData,\n      Created: [\n      ...((chartData == null ? void 0 : chartData.slice(0, 3)) || []),\n      ...((dashboardData == null ? void 0 : dashboardData.slice(0, 3)) || []),\n      ...((queryData == null ? void 0 : queryData.slice(0, 3)) || [])] }));\n\n\n  }, [chartData, queryData, dashboardData]);\n  useEffect(() => {var _activityData$Viewed;\n    if (!collapseState && activityData != null && (_activityData$Viewed = activityData.Viewed) != null && _activityData$Viewed.length) {\n      setActiveState((activeState) => ['1', ...activeState]);\n    }\n  }, [activityData]);\n  const isRecentActivityLoading = !(activityData != null && activityData.Examples) && !(activityData != null && activityData.Viewed);\n  return ___EmotionJSX(WelcomeContainer, null,\n  ___EmotionJSX(WelcomeNav, null,\n  ___EmotionJSX(\"span\", { className: \"navbar-brand\" }, \"Home\"),\n  isFeatureEnabled(FeatureFlag.THUMBNAILS) ? ___EmotionJSX(\"div\", { className: \"switch\" },\n  ___EmotionJSX(Switch, { checked: checked, onChange: handleToggle }),\n  ___EmotionJSX(\"span\", null, \"Thumbnails\")) :\n  null),\n\n  ___EmotionJSX(Collapse, { activeKey: activeState, onChange: handleCollapse, ghost: true, bigger: true },\n  ___EmotionJSX(Collapse.Panel, { header: t('Recents'), key: \"1\" },\n  activityData && (\n  activityData.Viewed ||\n  activityData.Examples ||\n  activityData.Created) &&\n  activeChild !== 'Loading' ? ___EmotionJSX(ActivityTable, { user: user, activeChild: activeChild, setActiveChild: setActiveChild, activityData: activityData, loadedCount: loadedCount }) : ___EmotionJSX(LoadingCards, null)),\n\n  ___EmotionJSX(Collapse.Panel, { header: t('Dashboards'), key: \"2\" },\n  !dashboardData || isRecentActivityLoading ? ___EmotionJSX(LoadingCards, { cover: checked }) : ___EmotionJSX(DashboardTable, { user: user, mine: dashboardData, showThumbnails: checked, examples: activityData == null ? void 0 : activityData.Examples })),\n\n  ___EmotionJSX(Collapse.Panel, { header: t('Charts'), key: \"3\" },\n  !chartData || isRecentActivityLoading ? ___EmotionJSX(LoadingCards, { cover: checked }) : ___EmotionJSX(ChartTable, { showThumbnails: checked, user: user, mine: chartData, examples: activityData == null ? void 0 : activityData.Examples })),\n\n  ___EmotionJSX(Collapse.Panel, { header: t('Saved queries'), key: \"4\" },\n  !queryData ? ___EmotionJSX(LoadingCards, { cover: checked }) : ___EmotionJSX(SavedQueries, { showThumbnails: checked, user: user, mine: queryData, featureFlag: isFeatureEnabled(FeatureFlag.THUMBNAILS) }))));\n\n\n\n}\nexport default withToasts(Welcome);","map":null,"metadata":{},"sourceType":"module"}