{"ast":null,"code":"import { css as _css } from \"@emotion/react\";function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'src/common/components';\nimport { Radio } from 'src/components/Radio';\nimport Card from 'src/components/Card';\nimport Alert from 'src/components/Alert';\nimport Badge from 'src/components/Badge';\nimport shortid from 'shortid';\nimport { styled, SupersetClient, t, supersetTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport Label from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport TableSelector from 'src/components/TableSelector';\nimport EditableTitle from 'src/components/EditableTitle';\n\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\n\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport SpatialControl from 'src/explore/components/controls/SpatialControl';\n\nimport CollectionTable from 'src/CRUD/CollectionTable';\nimport Fieldset from 'src/CRUD/Fieldset';\nimport Field from 'src/CRUD/Field';\n\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst DatasourceContainer = styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${({ theme }) => theme.colors.warning.base};\n  }\n\n  .change-warning .bold {\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledTableTabs = styled(Tabs)`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .ant-badge-count {\n    line-height: ${({ theme }) => theme.gridUnit * 4}px;\n    height: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst EditLockContainer = styled.div`\n  font-size: ${supersetTheme.typography.sizes.s}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = styled.div`\n  text-align: right;\n  ${({ theme }) => `margin-bottom: ${theme.gridUnit * 2}px`}\n`;\n\nconst StyledLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst checkboxGenerator = (d, onChange) =>\n___EmotionJSX(CheckboxControl, { value: d, onChange: onChange });\n\nconst DATA_TYPES = [\n{ value: 'STRING', label: 'STRING' },\n{ value: 'NUMERIC', label: 'NUMERIC' },\n{ value: 'DATETIME', label: 'DATETIME' },\n{ value: 'BOOLEAN', label: 'BOOLEAN' }];\n\n\nconst DATASOURCE_TYPES_ARR = [\n{ key: 'physical', label: t('Physical (table or view)') },\n{ key: 'virtual', label: t('Virtual (SQL)') }];\n\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach((o) => {\n  DATASOURCE_TYPES[o.key] = o;\n});var _ref = process.env.NODE_ENV === \"production\" ? { name: \"s5xdrg\", styles: \"display:flex;align-items:center\" } : { name: \"l0hchv-CollectionTabTitle\", styles: \"display:flex;align-items:center;label:CollectionTabTitle;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    ___EmotionJSX(\"div\", {\n      css: _ref },\n\n\n    title, ' ',\n    ___EmotionJSX(StyledBadge, { count: collection ? collection.length : 0, showZero: true })));\n\n\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array };\n\n\nfunction ColumnCollectionTable({\n  columns,\n  onChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator })\n{\n  return (\n    ___EmotionJSX(CollectionTable, {\n      collection: columns,\n      tableColumns: ['column_name', 'type', 'is_dttm', 'filterable', 'groupby'],\n      sortColumns: ['column_name', 'type', 'is_dttm', 'filterable', 'groupby'],\n      allowDeletes: true,\n      allowAddItem: allowAddItem,\n      itemGenerator: itemGenerator,\n      stickyHeader: true,\n      expandFieldset:\n      ___EmotionJSX(FormContainer, null,\n      ___EmotionJSX(Fieldset, { compact: true },\n      showExpression &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"expression\",\n        label: t('SQL expression'),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"markdown\",\n          offerEditInModal: false }) }),\n\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"verbose_name\",\n        label: t('Label'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"verbose_name\",\n          placeholder: t('Label') }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"description\",\n          placeholder: t('Description') }) }),\n\n\n\n      allowEditDataType &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"type\",\n        label: t('Data type'),\n        control:\n        ___EmotionJSX(Select, {\n          ariaLabel: t('Data type'),\n          options: DATA_TYPES,\n          name: \"type\",\n          allowNewOptions: true,\n          allowClear: true }) }),\n\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"python_date_format\",\n        label: t('Datetime format'),\n        description:\n        /* Note the fragmented translations may not work. */\n        ___EmotionJSX(\"div\", null,\n        t('The pattern of timestamp format. For strings use '),\n        ___EmotionJSX(\"a\", { href: \"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\" },\n        t('Python datetime string pattern')),\n\n        t(' expression which needs to adhere to the '),\n        ___EmotionJSX(\"a\", { href: \"https://en.wikipedia.org/wiki/ISO_8601\" },\n        t('ISO 8601')),\n\n        t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)),\n\n\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"python_date_format\",\n          placeholder: \"%Y/%m/%d\" }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"certified_by\",\n        label: t('Certified By'),\n        description: t('Person or group that has certified this metric'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"certified\",\n          placeholder: t('Certified by') }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"certification_details\",\n        label: t('Certification details'),\n        description: t('Details of the certification'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"certificationDetails\",\n          placeholder: t('Certification details') }) }))),\n\n\n\n\n\n\n      columnLabels: {\n        column_name: t('Column'),\n        type: t('Data type'),\n        groupby: t('Is dimension'),\n        is_dttm: t('Is temporal'),\n        filterable: t('Is filterable') },\n\n      onChange: onChange,\n      itemRenderers: {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedIcon, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }),\n\n\n        ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onItemChange })) :\n\n\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedIcon, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }),\n\n\n        v),\n\n\n        type: (d) => d ? ___EmotionJSX(Label, null, d) : null,\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator } }));\n\n\n\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func };\n\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: '<new column>',\n    filterable: true,\n    groupby: true }) };\n\n\n\nfunction StackedField({ label, formElement }) {\n  return (\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"strong\", null, label)),\n\n    ___EmotionJSX(\"div\", null, formElement)));\n\n\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node };\n\n\nfunction FormContainer({ children }) {\n  return ___EmotionJSX(Card, { padded: true }, children);\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node };\n\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  onChange: () => {} };\n\n\nfunction OwnersSelector({ datasource, onChange }) {\n  const loadOptions = useCallback((search = '', page, pageSize) => {\n    const query = rison.encode({ filter: search, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}` }).\n    then((response) => ({\n      data: response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text })),\n\n      totalCount: response.json.count }));\n\n  }, []);\n\n  return (\n    ___EmotionJSX(Select, {\n      ariaLabel: t('Select owners'),\n      mode: \"multiple\",\n      name: \"owners\",\n      value: datasource.owners,\n      options: loadOptions,\n      onChange: onChange,\n      header: ___EmotionJSX(FormLabel, null, t('Owners')),\n      allowClear: true }));\n\n\n}var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref3 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nclass DatasourceEditor extends React.PureComponent {\n  constructor(props) {var _props$datasource$met;\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}` })),\n\n        metrics: (_props$datasource$met = props.datasource.metrics) == null ? void 0 : _props$datasource$met.map((metric) => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails } =\n          metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown } =\n          JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric };\n\n        }) },\n\n      errors: [],\n      isDruid:\n      props.datasource.type === 'druid' ||\n      props.datasource.datasource_type === 'druid',\n      isSqla:\n      props.datasource.datasource_type === 'table' ||\n      props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter((col) => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n      (col) => !!col.expression),\n\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql ?\n      DATASOURCE_TYPES.virtual.key :\n      DATASOURCE_TYPES.physical.key };\n\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata = this.tableChangeAndSyncMetadata.bind(\n    this);\n\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.allowEditSource = !isFeatureEnabled(\n    FeatureFlag.DISABLE_DATASET_SOURCE_EDIT);\n\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n    datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns] };\n\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.setState((prevState) => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback = this.validateAndChange) {\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n    (prevState) => ({\n      datasource: { ...prevState.datasource, [attr]: value } }),\n\n    attr === 'table_name' ?\n    this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata) :\n    this.onDatasourceChange(datasource, this.validateAndChange));\n\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  updateColumns(cols) {\n    const { databaseColumns } = this.state;\n    const databaseColumnNames = cols.map((col) => col.name);\n    const currentCols = databaseColumns.reduce(\n    (agg, col) => ({\n      ...agg,\n      [col.column_name]: col }),\n\n    {});\n\n    const finalColumns = [];\n    const results = {\n      added: [],\n      modified: [],\n      removed: databaseColumns.\n      map((col) => col.column_name).\n      filter((col) => !databaseColumnNames.includes(col)) };\n\n    cols.forEach((col) => {\n      const currentCol = currentCols[col.name];\n      if (!currentCol) {\n        // new column\n        finalColumns.push({\n          id: shortid.generate(),\n          column_name: col.name,\n          type: col.type,\n          groupby: true,\n          filterable: true,\n          is_dttm: col.is_dttm });\n\n        results.added.push(col.name);\n      } else if (\n      currentCol.type !== col.type ||\n      !currentCol.is_dttm && col.is_dttm)\n      {\n        // modified column\n        finalColumns.push({\n          ...currentCol,\n          type: col.type,\n          is_dttm: currentCol.is_dttm || col.is_dttm });\n\n        results.modified.push(col.name);\n      } else {\n        // unchanged\n        finalColumns.push(currentCol);\n      }\n    });\n    if (\n    results.added.length ||\n    results.modified.length ||\n    results.removed.length)\n    {\n      this.setColumns({ databaseColumns: finalColumns });\n    }\n    return results;\n  }\n\n  syncMetadata() {\n    const { datasource } = this.state;\n    const params = {\n      datasource_type: datasource.type || datasource.datasource_type,\n      database_name:\n      datasource.database.database_name || datasource.database.name,\n      schema_name: datasource.schema,\n      table_name: datasource.table_name };\n\n    Object.entries(params).forEach(([key, value]) => {\n      // rison can't encode the undefined value\n      if (value === undefined) {\n        params[key] = null;\n      }\n    });\n    const endpoint = `/datasource/external_metadata_by_name/?q=${rison.encode(\n    params)\n    }`;\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint }).\n    then(({ json }) => {\n      const results = this.updateColumns(json);\n      if (results.modified.length) {\n        this.props.addSuccessToast(\n        t('Modified columns: %s', results.modified.join(', ')));\n\n      }\n      if (results.removed.length) {\n        this.props.addSuccessToast(\n        t('Removed columns: %s', results.removed.join(', ')));\n\n      }\n      if (results.added.length) {\n        this.props.addSuccessToast(\n        t('New columns added: %s', results.added.join(', ')));\n\n      }\n      this.props.addSuccessToast(t('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then(({ error, statusText }) => {\n      this.props.addDangerToast(\n      error || statusText || t('An error has occurred'));\n\n      this.setState({ metadataLoading: false });\n    }));\n\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach((obj) => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, (obj) => obj.column_name);\n    errors = errors.concat(\n    dups.map((name) => t('Column name [%s] is duplicated', name)));\n\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, (obj) => obj.metric_name);\n    errors = errors.concat(\n    dups.map((name) => t('Metric name [%s] is duplicated', name)));\n\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n    (col) => !col.expression && !col.json);\n\n    errors = errors.concat(\n    noFilterCalcCols.map((col) =>\n    t('Calculated column [%s] requires an expression', col.column_name)));\n\n\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort(({ id: a }, { id: b }) => b - a);\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Basic'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"markdown\", offerEditInModal: false }) }),\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"default_endpoint\",\n        label: t('Default URL'),\n        description: t(\n        'Default URL to redirect to when accessing from the dataset list page'),\n\n        control: ___EmotionJSX(TextControl, { controlId: \"default_endpoint\" }) }),\n\n      ___EmotionJSX(Field, {\n        inline: true,\n        fieldKey: \"filter_select_enabled\",\n        label: t('Autocomplete filters'),\n        description: t('Whether to populate autocomplete filters options'),\n        control: ___EmotionJSX(CheckboxControl, null) }),\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"fetch_values_predicate\",\n        label: t('Autocomplete query predicate'),\n        description: t(\n        'When using \"Autocomplete filters\", this can be used to improve performance ' +\n        'of the query fetching the values. Use this option to apply a ' +\n        'predicate (WHERE clause) to the query selecting the distinct ' +\n        'values from the table. Typically the intent would be to limit the scan ' +\n        'by applying a relative time filter on a partitioned or indexed time-related field.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"sql\",\n          controlId: \"fetch_values_predicate\",\n          minLines: 5 }) }),\n\n\n\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"extra\",\n        label: t('Extra'),\n        description: t(\n        'Extra data to specify table metadata. Currently supports ' +\n        'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n        '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n        '}, \"warning_markdown\": \"This is a warning.\" }`.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          controlId: \"extra\",\n          language: \"json\",\n          offerEditInModal: false }) }),\n\n\n\n\n      ___EmotionJSX(OwnersSelector, {\n        datasource: datasource,\n        onChange: (newOwners) => {\n          this.onDatasourceChange({ ...datasource, owners: newOwners });\n        } })));\n\n\n\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Advanced'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"cache_timeout\",\n        label: t('Cache timeout'),\n        description: t(\n        'The duration of time in seconds before the cache is invalidated'),\n\n        control: ___EmotionJSX(TextControl, { controlId: \"cache_timeout\" }) }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"offset\",\n        label: t('Hours offset'),\n        control: ___EmotionJSX(TextControl, { controlId: \"offset\" }),\n        description: t(\n        'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.') }),\n\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"template_params\",\n        label: t('Template parameters'),\n        description: t(\n        'A set of parameters that become available in the query using Jinja templating syntax'),\n\n        control: ___EmotionJSX(TextControl, { controlId: \"template_params\" }) })));\n\n\n\n\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      ___EmotionJSX(Tabs.TabPane, {\n        tab: ___EmotionJSX(CollectionTabTitle, { collection: spatials, title: t('Spatial') }),\n        key: 4 },\n\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['name', 'config'],\n        onChange: this.onDatasourcePropChange.bind(this, 'spatials'),\n        itemGenerator: () => ({\n          name: '<new spatial>',\n          type: '<no type>',\n          config: null }),\n\n        collection: spatials,\n        allowDeletes: true,\n        itemRenderers: {\n          name: (d, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: d, onSaveTitle: onChange }),\n\n          config: (v, onChange) =>\n          ___EmotionJSX(SpatialControl, { value: v, onChange: onChange, choices: allCols }) } })));\n\n\n\n\n\n  }\n\n  renderSourceFieldset() {\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"div\", { className: \"m-l-10 m-t-20 m-b-10\" },\n      DATASOURCE_TYPES_ARR.map((type) =>\n      ___EmotionJSX(Radio, {\n        key: type.key,\n        value: type.key,\n        inline: true,\n        onChange: this.onDatasourceTypeChange.bind(this, type.key),\n        checked: this.state.datasourceType === type.key,\n        disabled: !this.state.isEditMode },\n\n      type.label))),\n\n\n\n      ___EmotionJSX(\"hr\", null),\n      ___EmotionJSX(Fieldset, { item: datasource, onChange: this.onDatasourceChange, compact: true },\n      this.state.datasourceType === DATASOURCE_TYPES.virtual.key &&\n      ___EmotionJSX(\"div\", null,\n      this.state.isSqla &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(Field, {\n        fieldKey: \"databaseSelector\",\n        label: t('virtual'),\n        control:\n        ___EmotionJSX(\"div\", { css: _ref2 },\n        ___EmotionJSX(DatabaseSelector, {\n          db: datasource == null ? void 0 : datasource.database,\n          schema: datasource.schema,\n          onSchemaChange: (schema) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('schema', schema),\n\n          onDbChange: (database) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('database', database),\n\n          formMode: false,\n          handleError: this.props.addDangerToast,\n          readOnly: !this.state.isEditMode })) }),\n\n\n\n\n      ___EmotionJSX(\"div\", { css: /*#__PURE__*/_css({ width: 'calc(100% - 34px)', marginTop: -16 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:DatasourceEditor;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n      ___EmotionJSX(Field, {\n        fieldKey: \"table_name\",\n        label: t('Dataset name'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"table_name\",\n          onChange: (table) => {\n            this.onDatasourcePropChange('table_name', table);\n          },\n          placeholder: t('Dataset name'),\n          disabled: !this.state.isEditMode }) }))),\n\n\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"sql\",\n        label: t('SQL'),\n        description: t(\n        'When specifying SQL, the datasource acts as a view. ' +\n        'Superset will use this statement as a subquery while grouping and filtering ' +\n        'on the generated parent queries.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"sql\",\n          offerEditInModal: false,\n          minLines: 20,\n          maxLines: 20,\n          readOnly: !this.state.isEditMode }) })),\n\n\n\n\n\n      this.state.isDruid &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"json\",\n        label: t('JSON'),\n        description:\n        ___EmotionJSX(\"div\", null,\n        t('The JSON metric or post aggregation definition.')),\n\n\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"json\", offerEditInModal: false }) })),\n\n\n\n\n\n      this.state.datasourceType === DATASOURCE_TYPES.physical.key &&\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"tableSelector\",\n        label: t('Physical'),\n        control:\n        ___EmotionJSX(\"div\", { css: _ref3 },\n        ___EmotionJSX(TableSelector, {\n          clearable: false,\n          database: {\n            ...datasource.database,\n            database_name:\n            datasource.database.database_name ||\n            datasource.database.name },\n\n          dbId: datasource.database.id,\n          handleError: this.props.addDangerToast,\n          schema: datasource.schema,\n          sqlLabMode: false,\n          tableName: datasource.table_name,\n          onSchemaChange:\n          this.state.isEditMode ?\n          (schema) =>\n          this.onDatasourcePropChange('schema', schema) :\n          undefined,\n\n          onDbChange:\n          this.state.isEditMode ?\n          (database) =>\n          this.onDatasourcePropChange(\n          'database',\n          database) :\n\n          undefined,\n\n          onTableChange:\n          this.state.isEditMode ?\n          (table) =>\n          this.onDatasourcePropChange('table_name', table) :\n          undefined,\n\n          readOnly: !this.state.isEditMode })),\n\n\n\n        description: t(\n        'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n        'associated to this Superset logical table, and this logical table points ' +\n        'the physical table referenced here.') }))),\n\n\n\n\n\n\n      this.allowEditSource &&\n      ___EmotionJSX(EditLockContainer, null,\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: this.onChangeEditMode },\n      this.state.isEditMode ?\n      ___EmotionJSX(Icons.LockUnlocked, {\n        iconColor: supersetTheme.colors.grayscale.base }) :\n\n\n      ___EmotionJSX(Icons.LockLocked, {\n        iconColor: supersetTheme.colors.grayscale.base })),\n\n\n\n      !this.state.isEditMode &&\n      ___EmotionJSX(\"div\", null, t('Click the lock to make changes.')),\n\n      this.state.isEditMode &&\n      ___EmotionJSX(\"div\", null, t('Click the lock to prevent further changes.')))));\n\n\n\n\n\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        ___EmotionJSX(Alert, {\n          css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n          type: \"error\",\n          message:\n          ___EmotionJSX(React.Fragment, null,\n          this.state.errors.map((err) =>\n          ___EmotionJSX(\"div\", { key: err }, err))) }));\n\n\n\n\n\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    return (\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['metric_name', 'verbose_name', 'expression'],\n        sortColumns: ['metric_name', 'verbose_name', 'expression'],\n        columnLabels: {\n          metric_name: t('Metric'),\n          verbose_name: t('Label'),\n          expression: t('SQL expression') },\n\n        expandFieldset:\n        ___EmotionJSX(FormContainer, null,\n        ___EmotionJSX(Fieldset, { compact: true },\n        ___EmotionJSX(Field, {\n          fieldKey: \"verbose_name\",\n          label: t('Label'),\n          control: ___EmotionJSX(TextControl, { controlId: \"verbose_name\" }) }),\n\n        ___EmotionJSX(Field, {\n          fieldKey: \"description\",\n          label: t('Description'),\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"description\",\n            placeholder: t('Description') }) }),\n\n\n\n        ___EmotionJSX(Field, {\n          fieldKey: \"d3format\",\n          label: t('D3 format'),\n          control:\n          ___EmotionJSX(TextControl, { controlId: \"d3format\", placeholder: \"%y/%m/%d\" }) }),\n\n\n        ___EmotionJSX(Field, {\n          label: t('Certified by'),\n          fieldKey: \"certified_by\",\n          description: t(\n          'Person or group that has certified this metric'),\n\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"certified_by\",\n            placeholder: t('Certified by') }) }),\n\n\n\n        ___EmotionJSX(Field, {\n          label: t('Certification details'),\n          fieldKey: \"certification_details\",\n          description: t('Details of the certification'),\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"certification_details\",\n            placeholder: t('Certification details') }) }),\n\n\n\n        ___EmotionJSX(Field, {\n          label: t('Warning'),\n          fieldKey: \"warning_markdown\",\n          description: t('Optional warning about use of this metric'),\n          control:\n          ___EmotionJSX(TextAreaControl, {\n            controlId: \"warning_markdown\",\n            language: \"markdown\",\n            offerEditInModal: false }) }))),\n\n\n\n\n\n\n        collection: sortedMetrics,\n        allowAddItem: true,\n        onChange: this.onDatasourcePropChange.bind(this, 'metrics'),\n        itemGenerator: () => ({\n          metric_name: '<new metric>',\n          verbose_name: '',\n          expression: '' }),\n\n        itemRenderers: {\n          metric_name: (v, onChange, _, record) =>\n          ___EmotionJSX(FlexRowContainer, null,\n          record.is_certified &&\n          ___EmotionJSX(CertifiedIcon, {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }),\n\n\n          record.warning_markdown &&\n          ___EmotionJSX(WarningIconWithTooltip, {\n            warningMarkdown: record.warning_markdown }),\n\n\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange })),\n\n\n          verbose_name: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange }),\n\n          expression: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, {\n            canEdit: true,\n            title: v,\n            onSaveTitle: onChange,\n            extraClasses: ['datasource-sql-expression'],\n            multiLine: true }),\n\n\n          description: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }),\n\n\n          d3format: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }) },\n\n\n\n        allowDeletes: true,\n        stickyHeader: true }));\n\n\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    return (\n      ___EmotionJSX(DatasourceContainer, null,\n      this.renderErrors(),\n      ___EmotionJSX(Alert, {\n        css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n        type: \"warning\",\n        message:\n        ___EmotionJSX(React.Fragment, null,\n        ' ',\n        ___EmotionJSX(\"strong\", null, t('Be careful.'), \" \"),\n        t(\n        'Changing these settings will affect all charts using this dataset, including charts owned by other people.')) }),\n\n\n\n\n      ___EmotionJSX(StyledTableTabs, {\n        fullWidth: false,\n        id: \"table-tabs\",\n\n        onChange: this.handleTabSelect,\n        defaultActiveKey: activeTabKey },\n\n      ___EmotionJSX(Tabs.TabPane, { key: 0, tab: t('Source') },\n      this.renderSourceFieldset()),\n\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: sortedMetrics,\n          title: t('Metrics') }),\n\n\n        key: 1 },\n\n      this.renderMetricCollection()),\n\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.databaseColumns,\n          title: t('Columns') }),\n\n\n        key: 2 },\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ColumnButtonWrapper, null,\n      ___EmotionJSX(\"span\", { className: \"m-t-10 m-r-10\" },\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"tertiary\",\n        onClick: this.syncMetadata,\n        className: \"sync-from-source\",\n        disabled: this.state.isEditMode },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-database\" }), ' ',\n      t('Sync columns from source')))),\n\n\n\n      ___EmotionJSX(ColumnCollectionTable, {\n        className: \"columns-table\",\n        columns: this.state.databaseColumns,\n        onChange: (databaseColumns) =>\n        this.setColumns({ databaseColumns }) }),\n\n\n      this.state.metadataLoading && ___EmotionJSX(Loading, null))),\n\n\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.calculatedColumns,\n          title: t('Calculated columns') }),\n\n\n        key: 3 },\n\n      ___EmotionJSX(ColumnCollectionTable, {\n        columns: this.state.calculatedColumns,\n        onChange: (calculatedColumns) =>\n        this.setColumns({ calculatedColumns }),\n\n        editableColumnName: true,\n        showExpression: true,\n        allowAddItem: true,\n        allowEditDataType: true,\n        itemGenerator: () => ({\n          column_name: '<new column>',\n          filterable: true,\n          groupby: true,\n          expression: '<enter SQL expression here>',\n          __expanded: true }) })),\n\n\n\n      ___EmotionJSX(Tabs.TabPane, { key: 4, tab: t('Settings') },\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormContainer, null, this.renderSettingsFieldset())),\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormContainer, null, this.renderAdvancedFieldset())))))));\n\n\n\n\n\n\n  }}\n\n\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nexport default withToasts(DatasourceEditor);","map":null,"metadata":{},"sourceType":"module"}