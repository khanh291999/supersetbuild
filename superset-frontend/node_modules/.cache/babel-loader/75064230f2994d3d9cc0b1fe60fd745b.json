{"ast":null,"code":"import _filter from \"lodash/filter\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { t } from '@superset-ui/core';\n\nimport { useListViewResource, useChartEditModal, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport { setInLocalStorage, getFromLocalStorage } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useHistory } from 'react-router-dom';\nimport { TableTabTypes } from 'src/views/CRUD/types';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { CardContainer, PAGE_SIZE } from 'src/views/CRUD/utils';\nimport { HOMEPAGE_CHART_FILTER } from 'src/views/CRUD/storageKeys';\nimport { LoadingCards } from 'src/views/CRUD/welcome/Welcome';\nimport ChartCard from 'src/views/CRUD/chart/ChartCard';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport EmptyState from './EmptyState';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction ChartTable({ user, addDangerToast, addSuccessToast, mine, showThumbnails, examples }) {\n  const history = useHistory();\n  const filterStore = getFromLocalStorage(HOMEPAGE_CHART_FILTER, null);\n  const initialFilter = filterStore || TableTabTypes.EXAMPLES;\n  const filteredExamples = _filter(examples, (obj) => 'viz_type' in obj);\n  const { state: { loading, resourceCollection: charts, bulkSelectEnabled }, setResourceCollection: setCharts, hasPerm, refreshData, fetchData } = useListViewResource('chart', t('chart'), addDangerToast, true, initialFilter === 'Mine' ? mine : filteredExamples, [], false);\n  const chartIds = useMemo(() => charts.map((c) => c.id), [charts]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('chart', chartIds, addDangerToast);\n  const { sliceCurrentlyEditing, openChartEditModal, handleChartUpdated, closeChartEditModal } = useChartEditModal(setCharts, charts);\n  const [chartFilter, setChartFilter] = useState(initialFilter);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if (loaded || chartFilter === 'Favorite') {\n      getData(chartFilter);\n    }\n    setLoaded(true);\n  }, [chartFilter]);\n  const handleBulkChartExport = (chartsToExport) => {\n    const ids = chartsToExport.map(({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const getFilters = (filterName) => {\n    const filters = [];\n    if (filterName === 'Mine') {\n      filters.push({\n        id: 'created_by',\n        operator: 'rel_o_m',\n        value: `${user == null ? void 0 : user.userId}` });\n\n    } else\n    if (filterName === 'Favorite') {\n      filters.push({\n        id: 'id',\n        operator: 'chart_is_favorite',\n        value: true });\n\n    } else\n    if (filterName === 'Examples') {\n      filters.push({\n        id: 'created_by',\n        operator: 'rel_o_m',\n        value: 0 });\n\n    }\n    return filters;\n  };\n  const getData = (filter) => fetchData({\n    pageIndex: 0,\n    pageSize: PAGE_SIZE,\n    sortBy: [\n    {\n      id: 'changed_on_delta_humanized',\n      desc: true }],\n\n\n    filters: getFilters(filter) });\n\n  const menuTabs = [\n  {\n    name: 'Favorite',\n    label: t('Favorite'),\n    onClick: () => {\n      setChartFilter(TableTabTypes.FAVORITE);\n      setInLocalStorage(HOMEPAGE_CHART_FILTER, TableTabTypes.FAVORITE);\n    } },\n\n  {\n    name: 'Mine',\n    label: t('Mine'),\n    onClick: () => {\n      setChartFilter(TableTabTypes.MINE);\n      setInLocalStorage(HOMEPAGE_CHART_FILTER, TableTabTypes.MINE);\n    } }];\n\n\n  if (examples) {\n    menuTabs.push({\n      name: 'Examples',\n      label: t('Examples'),\n      onClick: () => {\n        setChartFilter(TableTabTypes.EXAMPLES);\n        setInLocalStorage(HOMEPAGE_CHART_FILTER, TableTabTypes.EXAMPLES);\n      } });\n\n  }\n  if (loading)\n  return ___EmotionJSX(LoadingCards, { cover: showThumbnails });\n  return ___EmotionJSX(ErrorBoundary, null,\n  sliceCurrentlyEditing && ___EmotionJSX(PropertiesModal, { onHide: closeChartEditModal, onSave: handleChartUpdated, show: true, slice: sliceCurrentlyEditing }),\n\n  ___EmotionJSX(SubMenu, { activeChild: chartFilter, tabs: menuTabs, buttons: [\n    {\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }),\n      t('Chart')),\n\n      buttonStyle: 'tertiary',\n      onClick: () => {\n        window.location.assign('/chart/add');\n      } },\n\n    {\n      name: 'View All Â»',\n      buttonStyle: 'link',\n      onClick: () => {\n        const target = chartFilter === 'Favorite' ?\n        `/chart/list/?filters=(favorite:(label:${t('Yes')},value:!t))` :\n        '/chart/list/';\n        history.push(target);\n      } }] }),\n\n\n  charts != null && charts.length ? ___EmotionJSX(CardContainer, { showThumbnails: showThumbnails },\n  charts.map((e) => ___EmotionJSX(ChartCard, { key: `${e.id}`, openChartEditModal: openChartEditModal, chartFilter: chartFilter, chart: e, userId: user == null ? void 0 : user.userId, hasPerm: hasPerm, showThumbnails: showThumbnails, bulkSelectEnabled: bulkSelectEnabled, refreshData: refreshData, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, favoriteStatus: favoriteStatus[e.id], saveFavoriteStatus: saveFavoriteStatus, handleBulkChartExport: handleBulkChartExport }))) :\n  ___EmotionJSX(EmptyState, { tableName: \"CHARTS\", tab: chartFilter }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(ChartTable);","map":null,"metadata":{},"sourceType":"module"}