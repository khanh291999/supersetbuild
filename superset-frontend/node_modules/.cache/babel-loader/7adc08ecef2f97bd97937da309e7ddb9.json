{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState, useCallback, useEffect } from 'react';\nimport Modal from 'src/components/Modal';\nimport { Form, Row, Col, Input, TextArea } from 'src/common/components';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport rison from 'rison';\nimport { t, SupersetClient, styled } from '@superset-ui/core';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FormItem = Form.Item;\nconst StyledFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\nconst StyledHelpBlock = styled.span`\n  margin-bottom: 0;\n`;\nexport default function PropertiesModal({ slice, onHide, onSave, show }) {\n  const [submitting, setSubmitting] = useState(false);\n  const [form] = Form.useForm();\n  // values of form inputs\n  const [name, setName] = useState(slice.slice_name || '');\n  const [selectedOwners, setSelectedOwners] = useState(null);\n  function showError({ error, statusText, message }) {\n    let errorText = error || statusText || t('An error has occurred');\n    if (message === 'Forbidden') {\n      errorText = t('You do not have permission to edit this chart');\n    }\n    Modal.error({\n      title: 'Error',\n      content: errorText,\n      okButtonProps: { danger: true, className: 'btn-danger' } });\n\n  }\n  const fetchChartOwners = useCallback(async function fetchChartOwners() {\n    try {\n      const response = await SupersetClient.get({\n        endpoint: `/api/v1/chart/${slice.slice_id}` });\n\n      const chart = response.json.result;\n      setSelectedOwners(chart.owners.map((owner) => ({\n        value: owner.id,\n        label: `${owner.first_name} ${owner.last_name}` })));\n\n    }\n    catch (response) {\n      const clientError = await getClientErrorObject(response);\n      showError(clientError);\n    }\n  }, [slice.slice_id]);\n  const loadOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/chart/related/owners?q=${query}` }).\n    then((response) => ({\n      data: response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text })),\n\n      totalCount: response.json.count }));\n\n  }, []);\n  const onSubmit = async (values) => {\n    setSubmitting(true);\n    const { certified_by: certifiedBy, certification_details: certificationDetails, description, cache_timeout: cacheTimeout } = values;\n    const payload = {\n      slice_name: name || null,\n      description: description || null,\n      cache_timeout: cacheTimeout || null,\n      certified_by: certifiedBy || null,\n      certification_details: certifiedBy && certificationDetails ? certificationDetails : null };\n\n    if (selectedOwners) {\n      payload.owners = selectedOwners.map((o) => o.value);\n    }\n    try {\n      const res = await SupersetClient.put({\n        endpoint: `/api/v1/chart/${slice.slice_id}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload) });\n\n      // update the redux state\n      const updatedChart = {\n        ...res.json.result,\n        id: slice.slice_id };\n\n      onSave(updatedChart);\n      onHide();\n    }\n    catch (res) {\n      const clientError = await getClientErrorObject(res);\n      showError(clientError);\n    }\n    setSubmitting(false);\n  };\n  const ownersLabel = t('Owners');\n  // get the owners of this slice\n  useEffect(() => {\n    fetchChartOwners();\n  }, [fetchChartOwners]);\n  // update name after it's changed in another modal\n  useEffect(() => {\n    setName(slice.slice_name || '');\n  }, [slice.slice_name]);\n  return ___EmotionJSX(Modal, { show: show, onHide: onHide, title: \"Edit Chart Properties\", footer: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(Button, { htmlType: \"button\", buttonSize: \"small\", onClick: onHide, cta: true },\n    t('Cancel')),\n\n    ___EmotionJSX(Button, { htmlType: \"submit\", buttonSize: \"small\", buttonStyle: \"primary\", onClick: form.submit, disabled: submitting || !name, cta: true },\n    t('Save'))),\n\n    responsive: true, wrapProps: { 'data-test': 'properties-edit-modal' } },\n  ___EmotionJSX(Form, { form: form, onFinish: onSubmit, layout: \"vertical\", initialValues: {\n      name: slice.slice_name || '',\n      description: slice.description || '',\n      cache_timeout: slice.cache_timeout != null ? slice.cache_timeout : '',\n      certified_by: slice.certified_by || '',\n      certification_details: slice.certified_by && slice.certification_details ?\n      slice.certification_details :\n      '' } },\n\n  ___EmotionJSX(Row, { gutter: 16 },\n  ___EmotionJSX(Col, { xs: 24, md: 12 },\n  ___EmotionJSX(\"h3\", null, t('Basic information')),\n  ___EmotionJSX(FormItem, { label: t('Name'), required: true },\n  ___EmotionJSX(Input, { name: \"name\", type: \"text\", value: name, onChange: (event) => {var _event$target$value;return setName((_event$target$value = event.target.value) != null ? _event$target$value : '');} })),\n\n  ___EmotionJSX(FormItem, null,\n  ___EmotionJSX(StyledFormItem, { label: t('Description'), name: \"description\" },\n  ___EmotionJSX(TextArea, { rows: 3, style: { maxWidth: '100%' } })),\n\n  ___EmotionJSX(StyledHelpBlock, { className: \"help-block\" },\n  t('The description can be displayed as widget headers in the dashboard view. Supports markdown.'))),\n\n\n  ___EmotionJSX(\"h3\", null, t('Certification')),\n  ___EmotionJSX(FormItem, null,\n  ___EmotionJSX(StyledFormItem, { label: t('Certified by'), name: \"certified_by\" },\n  ___EmotionJSX(Input, null)),\n\n  ___EmotionJSX(StyledHelpBlock, { className: \"help-block\" },\n  t('Person or group that has certified this chart.'))),\n\n\n  ___EmotionJSX(FormItem, null,\n  ___EmotionJSX(StyledFormItem, { label: t('Certification details'), name: \"certification_details\" },\n  ___EmotionJSX(Input, null)),\n\n  ___EmotionJSX(StyledHelpBlock, { className: \"help-block\" },\n  t('Any additional detail to show in the certification tooltip.')))),\n\n\n\n  ___EmotionJSX(Col, { xs: 24, md: 12 },\n  ___EmotionJSX(\"h3\", null, t('Configuration')),\n  ___EmotionJSX(FormItem, null,\n  ___EmotionJSX(StyledFormItem, { label: t('Cache timeout'), name: \"cacheTimeout\" },\n  ___EmotionJSX(Input, null)),\n\n  ___EmotionJSX(StyledHelpBlock, { className: \"help-block\" },\n  t(\"Duration (in seconds) of the caching timeout for this chart. Note this defaults to the dataset's timeout if undefined.\"))),\n\n\n  ___EmotionJSX(\"h3\", { style: { marginTop: '1em' } }, t('Access')),\n  ___EmotionJSX(FormItem, { label: ownersLabel },\n  ___EmotionJSX(Select, { ariaLabel: ownersLabel, mode: \"multiple\", name: \"owners\", value: selectedOwners || [], onChange: setSelectedOwners, options: loadOptions, disabled: !selectedOwners, allowClear: true }),\n  ___EmotionJSX(StyledHelpBlock, { className: \"help-block\" },\n  t('A list of users who can alter the chart. Searchable by name or username.')))))));\n\n\n\n\n\n\n}","map":null,"metadata":{},"sourceType":"module"}