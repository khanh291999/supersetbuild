{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState } from 'react';\nimport rison from 'rison';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { Link, useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createFetchRelated, createErrorHandler } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Button from 'src/components/Button';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport AnnotationLayerModal from './AnnotationLayerModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst MOMENT_FORMAT = 'MMM DD, YYYY';\nfunction AnnotationLayersList({ addDangerToast, addSuccessToast, user }) {\n  const { state: { loading, resourceCount: layersCount, resourceCollection: layers, bulkSelectEnabled }, hasPerm, fetchData, refreshData, toggleBulkSelect } = useListViewResource('annotation_layer', t('Annotation layers'), addDangerToast);\n  const [annotationLayerModalOpen, setAnnotationLayerModalOpen] = useState(false);\n  const [currentAnnotationLayer, setCurrentAnnotationLayer] = useState(null);\n  const [layerCurrentlyDeleting, setLayerCurrentlyDeleting] = useState(null);\n  const handleLayerDelete = ({ id, name }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/annotation_layer/${id}` }).\n    then(() => {\n      refreshData();\n      setLayerCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', name));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', name, errMsg))));\n  };\n  const handleBulkLayerDelete = (layersToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/annotation_layer/?q=${rison.encode(layersToDelete.map(({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected layers: %s', errMsg))));\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  function handleAnnotationLayerEdit(layer) {\n    setCurrentAnnotationLayer(layer);\n    setAnnotationLayerModalOpen(true);\n  }\n  const initialSort = [{ id: 'name', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'name',\n    Header: t('Name'),\n    Cell: ({ row: { original: { id, name } } }) => {\n      let hasHistory = true;\n      try {\n        useHistory();\n      }\n      catch (err) {\n        // If error is thrown, we know not to use <Link> in render\n        hasHistory = false;\n      }\n      if (hasHistory) {\n        return ___EmotionJSX(Link, { to: `/annotationmodelview/${id}/annotation` }, name);\n      }\n      return ___EmotionJSX(\"a\", { href: `/annotationmodelview/${id}/annotation` }, name);\n    } },\n\n  {\n    accessor: 'descr',\n    Header: t('Description') },\n\n  {\n    Cell: ({ row: { original: { changed_on: changedOn } } }) => {\n      const date = new Date(changedOn);\n      const utc = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n      return moment(utc).format(MOMENT_FORMAT);\n    },\n    Header: t('Last modified'),\n    accessor: 'changed_on',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { created_on: createdOn } } }) => {\n      const date = new Date(createdOn);\n      const utc = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n      return moment(utc).format(MOMENT_FORMAT);\n    },\n    Header: t('Created on'),\n    accessor: 'created_on',\n    size: 'xl' },\n\n  {\n    accessor: 'created_by',\n    disableSortBy: true,\n    Header: t('Created by'),\n    Cell: ({ row: { original: { created_by: createdBy } } }) => createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleAnnotationLayerEdit(original);\n      const handleDelete = () => setLayerCurrentlyDeleting(original);\n      const actions = [\n      canEdit ?\n      {\n        label: 'edit-action',\n        tooltip: t('Edit template'),\n        placement: 'bottom',\n        icon: 'Edit',\n        onClick: handleEdit } :\n\n      null,\n      canDelete ?\n      {\n        label: 'delete-action',\n        tooltip: t('Delete template'),\n        placement: 'bottom',\n        icon: 'Trash',\n        onClick: handleDelete } :\n\n      null].\n      filter((item) => !!item);\n      return ___EmotionJSX(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true,\n    hidden: !canEdit && !canDelete,\n    size: 'xl' }],\n\n  [canDelete, canCreate]);\n  const subMenuButtons = [];\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Annotation layer')),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        handleAnnotationLayerEdit(null);\n      } });\n\n  }\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary' });\n\n  }\n  const filters = useMemo(() => [\n  {\n    Header: t('Created by'),\n    id: 'created_by',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('annotation_layer', 'created_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true },\n\n  {\n    Header: t('Search'),\n    id: 'name',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  []);\n  const EmptyStateButton = ___EmotionJSX(Button, { buttonStyle: \"primary\", onClick: () => {\n      handleAnnotationLayerEdit(null);\n    } },\n  ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Annotation layer')));\n\n\n  const emptyState = {\n    message: t('No annotation layers yet'),\n    slot: EmptyStateButton };\n\n  const onLayerAdd = (id) => {\n    window.location.href = `/annotationmodelview/${id}/annotation`;\n  };\n  const onModalHide = () => {\n    refreshData();\n    setAnnotationLayerModalOpen(false);\n  };\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { name: t('Annotation layers'), buttons: subMenuButtons }),\n  ___EmotionJSX(AnnotationLayerModal, { addDangerToast: addDangerToast, layer: currentAnnotationLayer, onLayerAdd: onLayerAdd, onHide: onModalHide, show: annotationLayerModalOpen }),\n  layerCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('This action will permanently delete the layer.'), onConfirm: () => {\n      if (layerCurrentlyDeleting) {\n        handleLayerDelete(layerCurrentlyDeleting);\n      }\n    }, onHide: () => setLayerCurrentlyDeleting(null), open: true, title: t('Delete Layer?') }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected layers?'), onConfirm: handleBulkLayerDelete },\n  (confirmDelete) => {\n    const bulkActions = canDelete ?\n    [\n    {\n      key: 'delete',\n      name: t('Delete'),\n      onSelect: confirmDelete,\n      type: 'danger' }] :\n\n\n    [];\n    return ___EmotionJSX(ListView, { className: \"annotation-layers-list-view\", columns: columns, count: layersCount, data: layers, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, emptyState: emptyState });\n  }));\n\n\n}\nexport default withToasts(AnnotationLayersList);","map":null,"metadata":{},"sourceType":"module"}