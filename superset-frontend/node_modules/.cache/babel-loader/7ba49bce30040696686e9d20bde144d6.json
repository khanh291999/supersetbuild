{"ast":null,"code":"import _URLSearchParams from \"@babel/runtime-corejs3/core-js-stable/url-search-params\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { URL_PARAMS } from 'src/constants';\nimport replaceUndefinedByNull from './replaceUndefinedByNull';\nimport serializeActiveFilterValues from './serializeActiveFilterValues';\nexport default function getDashboardUrl({ pathname, filters = {}, hash = '', standalone, dataMask }) {\n  const newSearchParams = new _URLSearchParams();\n  // convert flattened { [id_column]: values } object\n  // to nested filter object\n  newSearchParams.set(URL_PARAMS.preselectFilters.name, JSON.stringify(serializeActiveFilterValues(filters)));\n  if (standalone) {\n    newSearchParams.set(URL_PARAMS.standalone.name, standalone.toString());\n  }\n  if (dataMask) {\n    newSearchParams.set(URL_PARAMS.nativeFilters.name, rison.encode(replaceUndefinedByNull(dataMask)));\n  }\n  const hashSection = hash ? `#${hash}` : '';\n  return `${pathname}?${newSearchParams.toString()}${hashSection}`;\n}","map":null,"metadata":{},"sourceType":"module"}