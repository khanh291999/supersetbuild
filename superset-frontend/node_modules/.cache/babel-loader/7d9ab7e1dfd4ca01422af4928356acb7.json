{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getNumberFormatter, NumberFormats, styled, t } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Slider } from 'src/common/components';\nimport { rgba } from 'emotion-rgba';\nimport { StatusMessage, StyledFormItem, FilterPluginStyle } from '../common';\nimport { getRangeExtraFormData } from '../../utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Wrapper = styled.div`\n  ${({ theme, validateStatus }) => {var _theme$colors, _theme$colors2, _theme$colors$validat, _theme$colors$validat2, _theme$colors3, _theme$colors$validat3, _theme$colors$validat4;return `\n    border: 1px solid transparent;\n    &:focus {\n      border: 1px solid\n        ${(_theme$colors = theme.colors[validateStatus || 'primary']) == null ? void 0 : _theme$colors.base};\n      outline: 0;\n      box-shadow: 0 0 0 3px\n        ${rgba((_theme$colors2 = theme.colors[validateStatus || 'primary']) == null ? void 0 : _theme$colors2.base, 0.2)};\n    }\n    & .ant-slider {\n      margin-top: ${theme.gridUnit}px;\n      margin-bottom: ${theme.gridUnit * 5}px;\n\n      & .ant-slider-track {\n        background-color: ${validateStatus && ((_theme$colors$validat = theme.colors[validateStatus]) == null ? void 0 : _theme$colors$validat.light1)};\n      }\n      & .ant-slider-handle {\n        border: ${validateStatus && `2px solid ${(_theme$colors$validat2 = theme.colors[validateStatus]) == null ? void 0 : _theme$colors$validat2.light1}`};\n        &:focus {\n          box-shadow: 0 0 0 3px\n            ${rgba((_theme$colors3 = theme.colors[validateStatus || 'primary']) == null ? void 0 : _theme$colors3.base, 0.2)};\n        }\n      }\n      &:hover {\n        & .ant-slider-track {\n          background-color: ${validateStatus && ((_theme$colors$validat3 = theme.colors[validateStatus]) == null ? void 0 : _theme$colors$validat3.base)};\n        }\n        & .ant-slider-handle {\n          border: ${validateStatus && `2px solid ${(_theme$colors$validat4 = theme.colors[validateStatus]) == null ? void 0 : _theme$colors$validat4.base}`};\n        }\n      }\n    }\n  `;}}\n`;\nexport default function RangeFilterPlugin(props) {\n  const { data, formData, height, width, setDataMask, setFocusedFilter, unsetFocusedFilter, filterState } = props;\n  const numberFormatter = getNumberFormatter(NumberFormats.SMART_NUMBER);\n  const [row] = data;\n  // @ts-ignore\n  const { min, max } = row;\n  const { groupby, defaultValue, inputRef } = formData;\n  const [col = ''] = groupby || [];\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : [min, max]);\n  const [marks, setMarks] = useState({});\n  const getBounds = (value) => {\n    const [lowerRaw, upperRaw] = value;\n    return {\n      lower: lowerRaw > min ? lowerRaw : null,\n      upper: upperRaw < max ? upperRaw : null };\n\n  };\n  const getLabel = (lower, upper) => {\n    if (lower !== null && upper !== null) {\n      return `${numberFormatter(lower)} ≤ x ≤ ${numberFormatter(upper)}`;\n    }\n    if (lower !== null) {\n      return `x ≥ ${numberFormatter(lower)}`;\n    }\n    if (upper !== null) {\n      return `x ≤ ${numberFormatter(upper)}`;\n    }\n    return '';\n  };\n  const getMarks = (lower, upper) => {\n    const newMarks = {};\n    if (lower !== null) {\n      newMarks[lower] = numberFormatter(lower);\n    }\n    if (upper !== null) {\n      newMarks[upper] = numberFormatter(upper);\n    }\n    return newMarks;\n  };\n  const handleAfterChange = (value) => {\n    setValue(value);\n    const { lower, upper } = getBounds(value);\n    setMarks(getMarks(lower, upper));\n    setDataMask({\n      extraFormData: getRangeExtraFormData(col, lower, upper),\n      filterState: {\n        value: lower !== null || upper !== null ? value : null,\n        label: getLabel(lower, upper) } });\n\n\n  };\n  const handleChange = (value) => {\n    setValue(value);\n  };\n  useEffect(() => {var _filterState$value;\n    // when switch filter type and queriesData still not updated we need ignore this case (in FilterBar)\n    if ((row == null ? void 0 : row.min) === undefined && (row == null ? void 0 : row.max) === undefined) {\n      return;\n    }\n    handleAfterChange((_filterState$value = filterState.value) != null ? _filterState$value : [min, max]);\n  }, [JSON.stringify(filterState.value), JSON.stringify(data)]);\n  const formItemData = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = ___EmotionJSX(StatusMessage, { status: filterState.validateStatus },\n    filterState.validateMessage);\n\n  }\n  return ___EmotionJSX(FilterPluginStyle, { height: height, width: width },\n  Number.isNaN(Number(min)) || Number.isNaN(Number(max)) ? ___EmotionJSX(\"h4\", null, t('Chosen non-numeric column')) : ___EmotionJSX(StyledFormItem, formItemData,\n  ___EmotionJSX(Wrapper, { tabIndex: -1, ref: inputRef, validateStatus: filterState.validateStatus, onFocus: setFocusedFilter, onBlur: unsetFocusedFilter, onMouseEnter: setFocusedFilter, onMouseLeave: unsetFocusedFilter },\n  ___EmotionJSX(Slider, { range: true, min: min, max: max, value: value != null ? value : [min, max], onAfterChange: handleAfterChange, onChange: handleChange, tipFormatter: (value) => numberFormatter(value), marks: marks }))));\n\n\n\n}","map":null,"metadata":{},"sourceType":"module"}