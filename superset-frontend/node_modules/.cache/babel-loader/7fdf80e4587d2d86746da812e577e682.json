{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport React from 'react';\nimport { Checkbox } from 'src/common/components';\nimport { getChartControlPanelRegistry, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormItem } from 'src/components/Form';\nimport { doesColumnMatchFilterType, getControlItems, setNativeFilterFieldValues } from './utils';\nimport { StyledFormItem, StyledLabel, StyledRowFormItem } from './FiltersConfigForm';\nimport { ColumnSelect } from './ColumnSelect';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\nexport default function getControlItemsMap({ datasetId, disabled, forceUpdate, form, filterId, filterType, filterToEdit, formFilter, removed }) {var _getControlItems;\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  const controlItems = (_getControlItems = getControlItems(controlPanelRegistry.get(filterType))) != null ? _getControlItems : [];\n  const mapControlItems = {};\n  const mapMainControlItems = {};\n  controlItems.\n  filter((mainControlItem) => (mainControlItem == null ? void 0 : mainControlItem.name) === 'groupby').\n  forEach((mainControlItem) => {var _filterToEdit$control, _filterToEdit$control2, _mainControlItem$conf, _filterToEdit$targets, _filterToEdit$targets2, _mainControlItem$conf2, _mainControlItem$conf3, _mainControlItem$conf4, _mainControlItem$conf5;\n    const initialValue = (_filterToEdit$control = filterToEdit == null ? void 0 : (_filterToEdit$control2 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control2[mainControlItem.name]) != null ? _filterToEdit$control :\n    mainControlItem == null ? void 0 : (_mainControlItem$conf = mainControlItem.config) == null ? void 0 : _mainControlItem$conf.default;\n    const initColumn = filterToEdit == null ? void 0 : (_filterToEdit$targets = filterToEdit.targets[0]) == null ? void 0 : (_filterToEdit$targets2 = _filterToEdit$targets.column) == null ? void 0 : _filterToEdit$targets2.name;\n    const element = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'requiredFirst', mainControlItem.name], hidden: true, initialValue: (mainControlItem == null ? void 0 : (_mainControlItem$conf2 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf2.requiredFirst) && (\n      filterToEdit == null ? void 0 : filterToEdit.requiredFirst) }),\n    ___EmotionJSX(StyledFormItem\n    // don't show the column select unless we have a dataset\n    , { name: ['filters', filterId, 'column'], initialValue: initColumn, label: ___EmotionJSX(StyledLabel, null,\n      t(`${(_mainControlItem$conf3 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf3.label}`) || t('Column')),\n      rules: [\n      {\n        required: ((_mainControlItem$conf4 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf4.required) && !removed,\n        message: t('Column is required') }] },\n\n\n    ___EmotionJSX(ColumnSelect, { mode: ((_mainControlItem$conf5 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf5.multiple) && 'multiple', form: form, filterId: filterId, datasetId: datasetId, filterValues: (column) => doesColumnMatchFilterType((formFilter == null ? void 0 : formFilter.filterType) || '', column), onChange: () => {\n        // We need reset default value when when column changed\n        setNativeFilterFieldValues(form, filterId, {\n          defaultDataMask: null });\n\n        forceUpdate();\n      } })));\n\n\n    mapMainControlItems[mainControlItem.name] = {\n      element,\n      checked: initialValue };\n\n  });\n  controlItems.\n  filter((controlItem) => {var _controlItem$config;return (controlItem == null ? void 0 : (_controlItem$config = controlItem.config) == null ? void 0 : _controlItem$config.renderTrigger) &&\n    controlItem.name !== 'sortAscending';}).\n  forEach((controlItem) => {var _filterToEdit$control3, _filterToEdit$control4, _controlItem$config2, _controlItem$config3;\n    const initialValue = (_filterToEdit$control3 = filterToEdit == null ? void 0 : (_filterToEdit$control4 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control4[controlItem.name]) != null ? _filterToEdit$control3 :\n    controlItem == null ? void 0 : (_controlItem$config2 = controlItem.config) == null ? void 0 : _controlItem$config2.default;\n    const element = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'requiredFirst', controlItem.name], hidden: true, initialValue: (controlItem == null ? void 0 : (_controlItem$config3 = controlItem.config) == null ? void 0 : _controlItem$config3.requiredFirst) && (filterToEdit == null ? void 0 : filterToEdit.requiredFirst) }),\n    ___EmotionJSX(Tooltip, { key: controlItem.name, placement: \"left\", title: controlItem.config.affectsDataMask &&\n      disabled &&\n      t('Populate \"Default value\" to enable this control') },\n    ___EmotionJSX(StyledRowFormItem, { key: controlItem.name, name: ['filters', filterId, 'controlValues', controlItem.name], initialValue: initialValue, valuePropName: \"checked\", colon: false },\n    ___EmotionJSX(Checkbox, { disabled: controlItem.config.affectsDataMask && disabled, onChange: ({ target: { checked } }) => {\n        if (controlItem.config.requiredFirst) {\n          setNativeFilterFieldValues(form, filterId, {\n            requiredFirst: {\n              ...(formFilter == null ? void 0 : formFilter.requiredFirst),\n              [controlItem.name]: checked } });\n\n\n        }\n        if (controlItem.config.resetConfig) {\n          setNativeFilterFieldValues(form, filterId, {\n            defaultDataMask: null });\n\n        }\n        forceUpdate();\n      } },\n    controlItem.config.label, \"\\xA0\",\n    controlItem.config.description && ___EmotionJSX(InfoTooltipWithTrigger, { placement: \"top\", label: controlItem.config.name, tooltip: controlItem.config.description })))));\n\n\n\n\n    mapControlItems[controlItem.name] = { element, checked: initialValue };\n  });\n  return {\n    controlItems: mapControlItems,\n    mainControlItems: mapMainControlItems };\n\n}","map":null,"metadata":{},"sourceType":"module"}