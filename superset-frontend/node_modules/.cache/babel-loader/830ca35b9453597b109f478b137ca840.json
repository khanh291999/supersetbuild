{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextArea } from 'src/common/components';\nimport { t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport { TextAreaEditor } from 'src/components/AsyncAceEditor';\nimport ModalTrigger from 'src/components/ModalTrigger';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n  height: PropTypes.number,\n  minLines: PropTypes.number,\n  maxLines: PropTypes.number,\n  offerEditInModal: PropTypes.bool,\n  language: PropTypes.oneOf([\n  null,\n  'json',\n  'html',\n  'sql',\n  'markdown',\n  'javascript']),\n\n  aboveEditorSection: PropTypes.node,\n  readOnly: PropTypes.bool };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  initialValue: '',\n  height: 250,\n  minLines: 3,\n  maxLines: 10,\n  offerEditInModal: true,\n  readOnly: false };\n\n\nexport default class TextAreaControl extends React.Component {\n  onControlChange(event) {\n    const { value } = event.target;\n    this.props.onChange(value);\n  }\n\n  renderEditor(inModal = false) {\n    const minLines = inModal ? 40 : this.props.minLines || 12;\n    if (this.props.language) {\n      const style = { border: '1px solid #CCC' };\n      if (this.props.readOnly) {\n        style.backgroundColor = '#f2f2f2';\n      }\n      return (\n        ___EmotionJSX(TextAreaEditor, _extends({\n          mode: this.props.language,\n          style: style,\n          minLines: minLines,\n          maxLines: inModal ? 1000 : this.props.maxLines,\n          onChange: this.props.onChange,\n          width: \"100%\",\n          height: `${minLines}em`,\n          editorProps: { $blockScrolling: true },\n          defaultValue: this.props.initialValue,\n          readOnly: this.props.readOnly,\n          key: this.props.name },\n        this.props)));\n\n\n    }\n    return (\n      ___EmotionJSX(TextArea, {\n        placeholder: t('textarea'),\n        onChange: this.onControlChange.bind(this),\n        defaultValue: this.props.initialValue,\n        disabled: this.props.readOnly,\n        style: { height: this.props.height } }));\n\n\n  }\n\n  renderModalBody() {\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"div\", null, this.props.aboveEditorSection),\n      this.renderEditor(true)));\n\n\n  }\n\n  render() {\n    const controlHeader = ___EmotionJSX(ControlHeader, this.props);\n    return (\n      ___EmotionJSX(\"div\", null,\n      controlHeader,\n      this.renderEditor(),\n      this.props.offerEditInModal &&\n      ___EmotionJSX(ModalTrigger, {\n        modalTitle: controlHeader,\n        triggerNode:\n        ___EmotionJSX(Button, { buttonSize: \"small\", className: \"m-t-5\" },\n        t('Edit'), \" \", ___EmotionJSX(\"strong\", null, this.props.language), ' ',\n        t('in modal')),\n\n\n        modalBody: this.renderModalBody(true),\n        responsive: true })));\n\n\n\n\n  }}\n\n\nTextAreaControl.propTypes = propTypes;\nTextAreaControl.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}