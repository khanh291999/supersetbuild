{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport Card from 'src/components/Card';\nimport ProgressBar from 'src/components/ProgressBar';\nimport Label from 'src/components/Label';\nimport { t, useTheme } from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport { fDuration } from 'src/modules/dates';\nimport Icons from 'src/components/Icons';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ResultSet from '../ResultSet';\nimport ModalTrigger from '../../../components/ModalTrigger';\nimport HighlightedSql from '../HighlightedSql';\nimport { StaticPosition, verticalAlign, StyledTooltip } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  columns: PropTypes.array,\n  actions: PropTypes.object,\n  queries: PropTypes.array,\n  onUserClicked: PropTypes.func,\n  onDbClicked: PropTypes.func,\n  displayLimit: PropTypes.number.isRequired };\n\nconst defaultProps = {\n  columns: ['started', 'duration', 'rows'],\n  queries: [],\n  onUserClicked: () => {},\n  onDbClicked: () => {} };\n\n\nconst openQuery = (id) => {\n  const url = `/superset/sqllab?queryId=${id}`;\n  window.open(url);\n};\n\nconst QueryTable = (props) => {\n  const theme = useTheme();\n  const statusAttributes = {\n    success: {\n      config: {\n        icon: ___EmotionJSX(Icons.Check, { iconColor: theme.colors.success.base }),\n        label: t('Success') } },\n\n\n    failed: {\n      config: {\n        icon: ___EmotionJSX(Icons.XSmall, { iconColor: theme.colors.error.base }),\n        label: t('Failed') } },\n\n\n    stopped: {\n      config: {\n        icon: ___EmotionJSX(Icons.XSmall, { iconColor: theme.colors.error.base }),\n        label: t('Failed') } },\n\n\n    running: {\n      config: {\n        icon: ___EmotionJSX(Icons.Running, { iconColor: theme.colors.primary.base }),\n        label: t('Running') } },\n\n\n    fetching: {\n      config: {\n        icon: ___EmotionJSX(Icons.Queued, { iconColor: theme.colors.primary.base }),\n        label: t('fetching') } },\n\n\n    timed_out: {\n      config: {\n        icon: ___EmotionJSX(Icons.Offline, { iconColor: theme.colors.grayscale.light1 }),\n        label: t('Offline') } },\n\n\n    scheduled: {\n      config: {\n        icon: ___EmotionJSX(Icons.Queued, { iconColor: theme.colors.grayscale.base }),\n        label: t('Scheduled') } },\n\n\n    pending: {\n      config: {\n        icon: ___EmotionJSX(Icons.Queued, { iconColor: theme.colors.grayscale.base }),\n        label: t('Scheduled') } },\n\n\n    error: {\n      config: {\n        icon: ___EmotionJSX(Icons.Error, { iconColor: theme.colors.error.base }),\n        label: t('Unknown Status') } } };\n\n\n\n\n  const setHeaders = (column) => {\n    if (column === 'sql') {\n      return column.toUpperCase();\n    }\n    return column.charAt(0).toUpperCase().concat(column.slice(1));\n  };\n  const columns = useMemo(\n  () =>\n  props.columns.map((column) => ({\n    accessor: column,\n    Header: () => setHeaders(column),\n    disableSortBy: true })),\n\n  [props.columns]);\n\n\n  const user = useSelector(({ sqlLab: { user } }) => user);\n\n  const data = useMemo(() => {\n    const restoreSql = (query) => {\n      props.actions.queryEditorSetSql({ id: query.sqlEditorId }, query.sql);\n    };\n\n    const openQueryInNewTab = (query) => {\n      props.actions.cloneQueryToNewTab(query, true);\n    };\n\n    const openAsyncResults = (query, displayLimit) => {\n      props.actions.fetchQueryResults(query, displayLimit);\n    };\n\n    const clearQueryResults = (query) => {\n      props.actions.clearQueryResults(query);\n    };\n\n    const removeQuery = (query) => {\n      props.actions.removeQuery(query);\n    };\n\n    return props.queries.\n    map((query) => {\n      const q = { ...query };\n      const status = statusAttributes[q.state] || statusAttributes.error;\n\n      if (q.endDttm) {\n        q.duration = fDuration(q.startDttm, q.endDttm);\n      }\n      const time = moment(q.startDttm).format().split('T');\n      q.time =\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", null,\n      time[0], \" \", ___EmotionJSX(\"br\", null), \" \", time[1]));\n\n\n\n      q.user =\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"link\",\n        onClick: () => props.onUserClicked(q.userId) },\n\n      q.user);\n\n\n      q.db =\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"link\",\n        onClick: () => props.onDbClicked(q.dbId) },\n\n      q.db);\n\n\n      q.started = moment(q.startDttm).format('HH:mm:ss');\n      q.querylink =\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"link\",\n        onClick: () => openQuery(q.queryId) },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-external-link m-r-3\" }),\n      t('Edit'));\n\n\n      q.sql =\n      ___EmotionJSX(Card, { css: [StaticPosition, process.env.NODE_ENV === \"production\" ? \"\" : \";label:q-sql;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"] },\n      ___EmotionJSX(HighlightedSql, {\n        sql: q.sql,\n        rawSql: q.executedSql,\n        shrink: true,\n        maxWidth: 60 }));\n\n\n\n      if (q.resultsKey) {\n        q.output =\n        ___EmotionJSX(ModalTrigger, {\n          className: \"ResultsModal\",\n          triggerNode:\n          ___EmotionJSX(Label, { type: \"info\", className: \"pointer\" },\n          t('View results')),\n\n\n          modalTitle: t('Data preview'),\n          beforeOpen: () => openAsyncResults(query, props.displayLimit),\n          onExit: () => clearQueryResults(query),\n          modalBody:\n          ___EmotionJSX(ResultSet, {\n            showSql: true,\n            user: user,\n            query: query,\n            actions: props.actions,\n            height: 400,\n            displayLimit: props.displayLimit }),\n\n\n          responsive: true });\n\n\n      } else {\n        // if query was run using ctas and force_ctas_schema was set\n        // tempTable will have the schema\n        const schemaUsed =\n        q.ctas && q.tempTable && q.tempTable.includes('.') ? '' : q.schema;\n        q.output = [schemaUsed, q.tempTable].filter((v) => v).join('.');\n      }\n      q.progress =\n      q.state === 'success' ?\n      ___EmotionJSX(ProgressBar, {\n        percent: parseInt(q.progress.toFixed(0), 10),\n        striped: true,\n        showInfo: false }) :\n\n\n      ___EmotionJSX(ProgressBar, {\n        percent: parseInt(q.progress.toFixed(0), 10),\n        striped: true });\n\n\n      q.state =\n      ___EmotionJSX(Tooltip, { title: status.config.label, placement: \"bottom\" },\n      ___EmotionJSX(\"span\", null, status.config.icon));\n\n\n      q.actions =\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(StyledTooltip, {\n        onClick: () => restoreSql(query),\n        tooltip: t(\n        'Overwrite text in the editor with a query on this table'),\n\n        placement: \"top\" },\n\n      ___EmotionJSX(Icons.Edit, { iconSize: \"small\" })),\n\n      ___EmotionJSX(StyledTooltip, {\n        onClick: () => openQueryInNewTab(query),\n        tooltip: t('Run query in a new tab'),\n        placement: \"top\" },\n\n      ___EmotionJSX(Icons.PlusCircleOutlined, {\n        iconSize: \"x-small\",\n        css: verticalAlign })),\n\n\n      ___EmotionJSX(StyledTooltip, {\n        tooltip: t('Remove query from log'),\n        onClick: () => removeQuery(query) },\n\n      ___EmotionJSX(Icons.Trash, { iconSize: \"x-small\" })));\n\n\n\n      return q;\n    }).\n    reverse();\n  }, [props]);\n\n  return (\n    ___EmotionJSX(\"div\", { className: \"QueryTable\" },\n    ___EmotionJSX(TableView, {\n      columns: columns,\n      data: data,\n      className: \"table-condensed\",\n      pageSize: 50 })));\n\n\n\n};\n\nQueryTable.propTypes = propTypes;\nQueryTable.defaultProps = defaultProps;\n\nexport default QueryTable;","map":null,"metadata":{},"sourceType":"module"}