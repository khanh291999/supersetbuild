{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport React, { useEffect } from 'react';\nimport { Empty } from 'src/common/components';\nimport Alert from 'src/components/Alert';\nimport EmptyImage from 'src/assets/images/empty.svg';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport { TableCollection, Pagination } from 'src/components/dataViewCommon';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport { ListViewError, useListViewState } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${({ theme }) => theme.gridUnit * 4}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n      & .controls {\n        display: flex;\n        flex-wrap: wrap;\n        column-gap: ${({ theme }) => theme.gridUnit * 6}px;\n        row-gap: ${({ theme }) => theme.gridUnit * 4}px;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .ant-empty {\n      .ant-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\nconst BulkSelectWrapper = styled(Alert)`\n  border-radius: 0;\n  margin-bottom: 0;\n  color: #3d3d3d;\n  background-color: ${({ theme }) => theme.colors.primary.light4};\n\n  .selectedCopy {\n    display: inline-block;\n    padding: ${({ theme }) => theme.gridUnit * 2}px 0;\n  }\n\n  .deselect-all {\n    color: #1985a0;\n    margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .divider {\n    margin: ${({ theme: { gridUnit } }) => `${-gridUnit * 2}px 0 ${-gridUnit * 2}px ${gridUnit * 4}px`};\n    width: 1px;\n    height: ${({ theme }) => theme.gridUnit * 8}px;\n    box-shadow: inset -1px 0px 0px #dadada;\n    display: inline-flex;\n    vertical-align: middle;\n    position: relative;\n  }\n\n  .ant-alert-close-icon {\n    margin-top: ${({ theme }) => theme.gridUnit * 1.5}px;\n  }\n`;\nconst bulkSelectColumnConfig = {\n  Cell: ({ row }) => ___EmotionJSX(IndeterminateCheckbox, _extends({}, row.getToggleRowSelectedProps(), { id: row.id })),\n  Header: ({ getToggleAllRowsSelectedProps }) => ___EmotionJSX(IndeterminateCheckbox, _extends({}, getToggleAllRowsSelectedProps(), { id: \"header-toggle-all\" })),\n  id: 'selection',\n  size: 'sm' };\n\nconst ViewModeContainer = styled.div`\n  padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n  margin-top: ${({ theme }) => theme.gridUnit * 5 + 1}px;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${({ theme }) => theme.gridUnit / 2}px;\n    padding: ${({ theme }) => theme.gridUnit}px;\n    padding-bottom: ${({ theme }) => theme.gridUnit * 0.5}px;\n\n    &:first-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  .active {\n    background-color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      color: ${({ theme }) => theme.colors.grayscale.light5};\n    }\n  }\n`;\nconst EmptyWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 40}px 0;\n\n  &.table {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n  }\n`;\nconst ViewModeToggle = ({ mode, setMode }) => ___EmotionJSX(ViewModeContainer, null,\n___EmotionJSX(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n    e.currentTarget.blur();\n    setMode('card');\n  }, className: cx('toggle-button', { active: mode === 'card' }) },\n___EmotionJSX(Icons.CardView, null)),\n\n___EmotionJSX(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n    e.currentTarget.blur();\n    setMode('table');\n  }, className: cx('toggle-button', { active: mode === 'table' }) },\n___EmotionJSX(Icons.ListView, null)));\n\n\nfunction ListView({ columns, data, count, pageSize: initialPageSize, fetchData, loading, initialSort = [], className = '', filters = [], bulkActions = [], bulkSelectEnabled = false, disableBulkSelect = () => {}, renderBulkSelectCopy = (selected) => t('%s Selected', selected.length), renderCard, showThumbnails, cardSortSelectOptions, defaultViewMode = 'card', highlightRowId, emptyState = {} }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, viewMode } } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode });\n\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = columns.reduce((acc, col) => ({ ...acc, [col.id || col.accessor]: true }), {});\n    filters.forEach((f) => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(`Invalid filter config, ${f.id} is not present in columns`);\n      }\n    });\n  }\n  const cardViewEnabled = Boolean(renderCard);\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled)\n    toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n  return ___EmotionJSX(ListViewStyles, null,\n  ___EmotionJSX(\"div\", { className: `superset-list-view ${className}` },\n  ___EmotionJSX(\"div\", { className: \"header\" },\n  cardViewEnabled && ___EmotionJSX(ViewModeToggle, { mode: viewMode, setMode: setViewMode }),\n  ___EmotionJSX(\"div\", { className: \"controls\" },\n  filterable && ___EmotionJSX(FilterControls, { filters: filters, internalFilters: internalFilters, updateFilterValue: applyFilterValue }),\n  viewMode === 'card' && cardSortSelectOptions && ___EmotionJSX(CardSortSelect, { initialSort: initialSort, onChange: fetchData, options: cardSortSelectOptions, pageIndex: pageIndex, pageSize: pageSize }))),\n\n\n  ___EmotionJSX(\"div\", { className: `body ${rows.length === 0 ? 'empty' : ''}` },\n  bulkSelectEnabled && ___EmotionJSX(BulkSelectWrapper, { type: \"info\", closable: true, showIcon: false, onClose: disableBulkSelect, message: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"div\", { className: \"selectedCopy\" },\n    renderBulkSelectCopy(selectedFlatRows)),\n\n    Boolean(selectedFlatRows.length) && ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"deselect-all\", onClick: () => toggleAllRowsSelected(false) },\n    t('Deselect all')),\n\n    ___EmotionJSX(\"div\", { className: \"divider\" }),\n    bulkActions.map((action) => ___EmotionJSX(Button, { key: action.key, buttonStyle: action.type, cta: true, onClick: () => action.onSelect(selectedFlatRows.map((r) => r.original)) },\n    action.name)))) }),\n\n\n\n  viewMode === 'card' && ___EmotionJSX(CardCollection, { bulkSelectEnabled: bulkSelectEnabled, prepareRow: prepareRow, renderCard: renderCard, rows: rows, loading: loading, showThumbnails: showThumbnails }),\n  viewMode === 'table' && ___EmotionJSX(TableCollection, { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, prepareRow: prepareRow, headerGroups: headerGroups, rows: rows, columns: columns, loading: loading, highlightRowId: highlightRowId }),\n  !loading && rows.length === 0 && ___EmotionJSX(EmptyWrapper, { className: viewMode },\n  ___EmotionJSX(Empty, { image: ___EmotionJSX(EmptyImage, null), description: emptyState.message || t('No Data') },\n  emptyState.slot || null)))),\n\n\n\n\n\n  rows.length > 0 && ___EmotionJSX(\"div\", { className: \"pagination-container\" },\n  ___EmotionJSX(Pagination, { totalPages: pageCount || 0, currentPage: pageCount ? pageIndex + 1 : 0, onChange: (p) => gotoPage(p - 1), hideFirstAndLastPageLinks: true }),\n  ___EmotionJSX(\"div\", { className: \"row-count-container\" },\n  !loading &&\n  t('%s-%s of %s', pageSize * pageIndex + (rows.length && 1), pageSize * pageIndex + rows.length, count))));\n\n\n\n}\nexport default ListView;","map":null,"metadata":{},"sourceType":"module"}