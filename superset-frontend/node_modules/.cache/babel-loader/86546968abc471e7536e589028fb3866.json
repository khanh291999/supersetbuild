{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Dashboard from 'src/dashboard/components/Dashboard';\nimport { addSliceToDashboard, removeSliceFromDashboard } from 'src/dashboard/actions/dashboardState';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\nimport { triggerQuery } from 'src/chart/chartAction';\nimport { logEvent } from 'src/logger/actions';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getAllActiveFilters, getRelevantDataMask } from 'src/dashboard/util/activeAllDashboardFilters';\nimport { clearDataMaskState } from '../../dataMask/actions';\nfunction mapStateToProps(state) {var _dashboardInfo$metada, _dashboardInfo$metada2;\n  const { datasources, sliceEntities, charts, dataMask, dashboardInfo, dashboardState, dashboardLayout, impressionId, nativeFilters } = state;\n  return {\n    initMessages: dashboardInfo.common.flash_messages,\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardInfo,\n    dashboardState,\n    charts,\n    datasources,\n    // filters prop: a map structure for all the active filter_box's values and scope in this dashboard,\n    // for each filter field. map key is [chartId_column]\n    // When dashboard is first loaded into browser,\n    // its value is from preselect_filters that dashboard owner saved in dashboard's meta data\n    // When user start interacting with dashboard, it will be user picked values from all filter_box\n    activeFilters: {\n      ...getActiveFilters(),\n      ...getAllActiveFilters({\n        // eslint-disable-next-line camelcase\n        chartConfiguration: (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration,\n        nativeFilters: nativeFilters.filters,\n        dataMask,\n        layout: dashboardLayout.present }) },\n\n\n    chartConfiguration: (_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.chart_configuration,\n    ownDataCharts: getRelevantDataMask(dataMask, 'ownState'),\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId };\n\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      setDatasources,\n      clearDataMaskState,\n      addSliceToDashboard,\n      removeSliceFromDashboard,\n      triggerQuery,\n      logEvent },\n    dispatch) };\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":null,"metadata":{},"sourceType":"module"}