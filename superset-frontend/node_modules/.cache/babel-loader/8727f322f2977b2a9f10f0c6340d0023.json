{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'src/components/Button';\nimport { t, styled, css } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Icons from 'src/components/Icons';\nimport TableSelector from 'src/components/TableSelector';\nimport { IconTooltip } from 'src/components/IconTooltip';\nimport TableElement from '../TableElement';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  queryEditor: PropTypes.object.isRequired,\n  height: PropTypes.number,\n  tables: PropTypes.array,\n  actions: PropTypes.object,\n  database: PropTypes.object,\n  offline: PropTypes.bool };\n\n\nconst defaultProps = {\n  actions: {},\n  height: 500,\n  offline: false,\n  tables: [] };\n\n\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\n\nconst StyledScrollbarContent = styled.div`\n  height: ${(props) => props.contentHeight}px;\n`;\n\nexport default class SqlEditorLeftBar extends React.PureComponent {\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    renderExpandIconWithTooltip = ({ isActive }) =>\n    ___EmotionJSX(IconTooltip, {\n      css: css`\n        transform: rotate(90deg);\n      `,\n      \"aria-label\": \"Collapse\",\n      tooltip: t(`${isActive ? 'Collapse' : 'Expand'} table preview`) },\n\n    ___EmotionJSX(Icons.RightOutlined, {\n      iconSize: \"s\",\n      css: css`\n          transform: ${isActive ? 'rotateY(180deg)' : ''};\n        ` }));this.resetState = this.resetState.bind(this);this.onSchemaChange = this.onSchemaChange.bind(this);this.onSchemasLoad = this.onSchemasLoad.bind(this);this.onTablesLoad = this.onTablesLoad.bind(this);this.onDbChange = this.onDbChange.bind(this);this.getDbList = this.getDbList.bind(this);this.onTableChange = this.onTableChange.bind(this);this.onToggleTable = this.onToggleTable.bind(this);}onSchemaChange(schema) {this.props.actions.queryEditorSetSchema(this.props.queryEditor, schema);}onSchemasLoad(schemas) {this.props.actions.queryEditorSetSchemaOptions(this.props.queryEditor, schemas);}onTablesLoad(tables) {this.props.actions.queryEditorSetTableOptions(this.props.queryEditor, tables);}onDbChange(db) {this.props.actions.queryEditorSetDb(this.props.queryEditor, db.id);this.props.actions.queryEditorSetFunctionNames(this.props.queryEditor, db.id);}onTableChange(tableName, schemaName) {if (tableName && schemaName) {this.props.actions.addTable(this.props.queryEditor, tableName, schemaName);}}onToggleTable(tables) {this.props.tables.forEach((table) => {if (!tables.includes(table.id.toString()) && table.expanded) {this.props.actions.collapseTable(table);} else if (tables.includes(table.id.toString()) && !table.expanded) {this.props.actions.expandTable(table);}});}getDbList(dbs) {this.props.actions.setDatabases(dbs);}dbMutator(data) {const options = data.result.map((db) => ({ value: db.id, label: db.database_name }));this.props.actions.setDatabases(data.result);if (data.result.length === 0) {this.props.actions.addDangerToast(t(\"It seems you don't have access to any database\"));}return options;}resetState() {this.props.actions.resetState();}changeTable(tableOpt) {if (!tableOpt) {return;}const schemaName = tableOpt.value.schema;const tableName = tableOpt.value.table;this.props.actions.queryEditorSetSchema(this.props.queryEditor, schemaName);this.props.actions.addTable(this.props.queryEditor, tableName, schemaName);}\n\n\n\n\n  render() {\n    const shouldShowReset = window.location.search === '?reset=1';\n    const tableMetaDataHeight = this.props.height - 130; // 130 is the height of the selects above\n    const qe = this.props.queryEditor;\n    return (\n      ___EmotionJSX(\"div\", { className: \"SqlEditorLeftBar\" },\n      ___EmotionJSX(TableSelector, {\n        database: this.props.database,\n        dbId: qe.dbId,\n        getDbList: this.getDbList,\n        handleError: this.props.actions.addDangerToast,\n        onDbChange: this.onDbChange,\n        onSchemaChange: this.onSchemaChange,\n        onSchemasLoad: this.onSchemasLoad,\n        onTableChange: this.onTableChange,\n        onTablesLoad: this.onTablesLoad,\n        schema: qe.schema,\n        sqlLabMode: true }),\n\n      ___EmotionJSX(\"div\", { className: \"divider\" }),\n      ___EmotionJSX(StyledScrollbarContainer, null,\n      ___EmotionJSX(StyledScrollbarContent, { contentHeight: tableMetaDataHeight },\n      ___EmotionJSX(Collapse, {\n        activeKey: this.props.tables.\n        filter(({ expanded }) => expanded).\n        map(({ id }) => id),\n        css: (theme) => css`\n                .ant-collapse-item {\n                  margin-bottom: ${theme.gridUnit * 3}px;\n                }\n                .ant-collapse-header {\n                  padding: 0px !important;\n                  display: flex;\n                  align-items: center;\n                }\n                .ant-collapse-content-box {\n                  padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n                }\n                .ant-collapse-arrow {\n                  top: ${theme.gridUnit * 2}px !important;\n                  color: ${theme.colors.primary.dark1} !important;\n                  &: hover {\n                    color: ${theme.colors.primary.dark2} !important;\n                  }\n                }\n              `,\n        expandIconPosition: \"right\",\n        ghost: true,\n        onChange: this.onToggleTable,\n        expandIcon: this.renderExpandIconWithTooltip },\n\n      this.props.tables.map((table) =>\n      ___EmotionJSX(TableElement, {\n        table: table,\n        key: table.id,\n        actions: this.props.actions }))))),\n\n\n\n\n\n      shouldShowReset &&\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"danger\",\n        onClick: this.resetState },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-bomb\" }), \" \", t('Reset state'))));\n\n\n\n\n  }}\n\n\nSqlEditorLeftBar.propTypes = propTypes;\nSqlEditorLeftBar.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}