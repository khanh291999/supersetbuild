{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { t } from '@superset-ui/core';\nimport getControlsForVizType from 'src/utils/getControlsForVizType';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ModalTrigger from '../ModalTrigger';\nimport TableView from '../TableView';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  origFormData: PropTypes.object.isRequired,\n  currentFormData: PropTypes.object.isRequired };\n\n\nfunction alterForComparison(value) {\n  // Considering `[]`, `{}`, `null` and `undefined` as identical\n  // for this purpose\n  if (value === undefined || value === null || value === '') {\n    return null;\n  }\n  if (typeof value === 'object') {\n    if (Array.isArray(value) && value.length === 0) {\n      return null;\n    }\n    const keys = Object.keys(value);\n    if (keys && keys.length === 0) {\n      return null;\n    }\n  }\n  return value;\n}\n\nexport default class AlteredSliceTag extends React.Component {\n  constructor(props) {\n    super(props);\n    const diffs = this.getDiffs(props);\n    const controlsMap = getControlsForVizType(this.props.origFormData.viz_type);\n    const rows = this.getRowsFromDiffs(diffs, controlsMap);\n\n    this.state = { rows, hasDiffs: !_isEmpty(diffs), controlsMap };\n  }\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    // Update differences if need be\n    if (_isEqual(this.props, newProps)) {\n      return;\n    }\n    const diffs = this.getDiffs(newProps);\n    this.setState((prevState) => ({\n      rows: this.getRowsFromDiffs(diffs, prevState.controlsMap),\n      hasDiffs: !_isEmpty(diffs) }));\n\n  }\n\n  getRowsFromDiffs(diffs, controlsMap) {\n    return Object.entries(diffs).map(([key, diff]) => ({\n      control: controlsMap[key] && controlsMap[key].label || key,\n      before: this.formatValue(diff.before, key, controlsMap),\n      after: this.formatValue(diff.after, key, controlsMap) }));\n\n  }\n\n  getDiffs(props) {\n    // Returns all properties that differ in the\n    // current form data and the saved form data\n    const ofd = props.origFormData;\n    const cfd = props.currentFormData;\n\n    const fdKeys = Object.keys(cfd);\n    const diffs = {};\n    fdKeys.forEach((fdKey) => {\n      if (!ofd[fdKey] && !cfd[fdKey]) {\n        return;\n      }\n      if (['filters', 'having', 'having_filters', 'where'].includes(fdKey)) {\n        return;\n      }\n      if (!this.isEqualish(ofd[fdKey], cfd[fdKey])) {\n        diffs[fdKey] = { before: ofd[fdKey], after: cfd[fdKey] };\n      }\n    });\n    return diffs;\n  }\n\n  isEqualish(val1, val2) {\n    return _isEqual(alterForComparison(val1), alterForComparison(val2));\n  }\n\n  formatValue(value, key, controlsMap) {var _controlsMap$key, _controlsMap$key2, _controlsMap$key3;\n    // Format display value based on the control type\n    // or the value type\n    if (value === undefined) {\n      return 'N/A';\n    }\n    if (value === null) {\n      return 'null';\n    }\n    if (((_controlsMap$key = controlsMap[key]) == null ? void 0 : _controlsMap$key.type) === 'AdhocFilterControl') {\n      if (!value.length) {\n        return '[]';\n      }\n      return value.\n      map((v) => {\n        const filterVal =\n        v.comparator && v.comparator.constructor === Array ?\n        `[${v.comparator.join(', ')}]` :\n        v.comparator;\n        return `${v.subject} ${v.operator} ${filterVal}`;\n      }).\n      join(', ');\n    }\n    if (((_controlsMap$key2 = controlsMap[key]) == null ? void 0 : _controlsMap$key2.type) === 'BoundsControl') {\n      return `Min: ${value[0]}, Max: ${value[1]}`;\n    }\n    if (((_controlsMap$key3 = controlsMap[key]) == null ? void 0 : _controlsMap$key3.type) === 'CollectionControl') {\n      return value.map((v) => safeStringify(v)).join(', ');\n    }\n    if (typeof value === 'boolean') {\n      return value ? 'true' : 'false';\n    }\n    if (value.constructor === Array) {\n      return value.length ? value.join(', ') : '[]';\n    }\n    if (typeof value === 'string' || typeof value === 'number') {\n      return value;\n    }\n    return safeStringify(value);\n  }\n\n  renderModalBody() {\n    const columns = [\n    {\n      accessor: 'control',\n      Header: 'Control' },\n\n    {\n      accessor: 'before',\n      Header: 'Before' },\n\n    {\n      accessor: 'after',\n      Header: 'After' }];\n\n\n\n    return (\n      ___EmotionJSX(TableView, {\n        columns: columns,\n        data: this.state.rows,\n        pageSize: 50,\n        className: \"table-condensed\" }));\n\n\n  }\n\n  renderTriggerNode() {\n    return (\n      ___EmotionJSX(Tooltip, { id: \"difference-tooltip\", title: t('Click to see difference') },\n      ___EmotionJSX(\"span\", {\n        className: \"label label-warning m-l-5\",\n        style: { fontSize: '12px' } },\n\n      t('Altered'))));\n\n\n\n  }\n\n  render() {\n    // Return nothing if there are no differences\n    if (!this.state.hasDiffs) {\n      return null;\n    }\n    // Render the label-warning 'Altered' tag which the user may\n    // click to open a modal containing a table summarizing the\n    // differences in the slice\n    return (\n      ___EmotionJSX(ModalTrigger, {\n        triggerNode: this.renderTriggerNode(),\n        modalTitle: t('Chart changes'),\n        modalBody: this.renderModalBody(),\n        responsive: true }));\n\n\n  }}\n\n\nAlteredSliceTag.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}