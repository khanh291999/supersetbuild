{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Checkbox } from 'src/common/components';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  min-height: ${({ theme }) => theme.gridUnit * 10}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2 + 2}px;\n\n  .checkbox {\n    margin-bottom: ${({ theme, checked }) => checked ? theme.gridUnit : 0}px;\n  }\n\n  & > div {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\nconst CollapsibleControl = (props) => {\n  const { checked, disabled, title, tooltip, children, onChange = () => {}, initialValue = false } = props;\n  const [isChecked, setIsChecked] = useState(initialValue);\n  useEffect(() => {\n    // if external `checked` changed to `undefined`, it means that we work now in uncontrolled mode with local state\n    // and we need ignore external value\n    if (checked !== undefined) {\n      setIsChecked(checked);\n    }\n  }, [checked]);\n  return ___EmotionJSX(StyledContainer, { checked: isChecked },\n  ___EmotionJSX(Checkbox, { className: \"checkbox\", checked: isChecked, disabled: disabled, onChange: (e) => {\n      const value = e.target.checked;\n      // external `checked` value has more priority then local state\n      if (checked === undefined) {\n        // uncontrolled mode\n        setIsChecked(value);\n      }\n      onChange(value);\n    } },\n  ___EmotionJSX(React.Fragment, null,\n  title, \"\\xA0\",\n  tooltip && ___EmotionJSX(InfoTooltipWithTrigger, { placement: \"top\", tooltip: tooltip }))),\n\n\n  isChecked && children);\n\n};\nexport { CollapsibleControl };","map":null,"metadata":{},"sourceType":"module"}