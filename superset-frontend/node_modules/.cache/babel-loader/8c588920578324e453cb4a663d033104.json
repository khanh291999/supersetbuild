{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useDispatch, useSelector } from 'react-redux';\nimport EditableTitle from 'src/components/EditableTitle';\nimport SliceHeaderControls from 'src/dashboard/components/SliceHeaderControls';\nimport FiltersBadge from 'src/dashboard/components/FiltersBadge';\nimport Icons from 'src/components/Icons';\nimport FilterIndicator from 'src/dashboard/components/FiltersBadge/FilterIndicator';\nimport { clearDataMask } from 'src/dataMask/actions';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst annotationsLoading = t('Annotation layers are still loading.');\nconst annotationsError = t('One ore more annotation layers failed loading.');\nconst CrossFilterIcon = styled(Icons.CursorTarget)`\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary.base};\n  height: 22px;\n  width: 22px;\n`;\nconst SliceHeader = ({ innerRef = null, forceRefresh = () => ({}), updateSliceName = () => ({}), toggleExpandSlice = () => ({}), logExploreChart = () => ({}), exploreUrl = '#', exportCSV = () => ({}), editMode = false, annotationQuery = {}, annotationError = {}, cachedDttm = null, updatedDttm = null, isCached = [], isExpanded = false, sliceName = '', supersetCanExplore = false, supersetCanShare = false, supersetCanCSV = false, sliceCanEdit = false, exportFullCSV, slice, componentId, dashboardId, addSuccessToast, addDangerToast, handleToggleFullSize, isFullSize, chartStatus, formData }) => {\n  const dispatch = useDispatch();\n  // TODO: change to indicator field after it will be implemented\n  const crossFilterValue = useSelector((state) => {var _state$dataMask$slice, _state$dataMask$slice2;return (_state$dataMask$slice = state.dataMask[slice == null ? void 0 : slice.slice_id]) == null ? void 0 : (_state$dataMask$slice2 = _state$dataMask$slice.filterState) == null ? void 0 : _state$dataMask$slice2.value;});\n  const indicator = useMemo(() => ({\n    value: crossFilterValue,\n    name: t('Emitted values') }),\n  [crossFilterValue]);\n  return ___EmotionJSX(\"div\", { className: \"chart-header\", ref: innerRef },\n  ___EmotionJSX(\"div\", { className: \"header-title\" },\n  ___EmotionJSX(EditableTitle, { title: sliceName || (\n    editMode ?\n    '---' // this makes an empty title clickable\n    : ''), canEdit: editMode, emptyText: \"\", onSaveTitle: updateSliceName, showTooltip: false }),\n  !!Object.values(annotationQuery).length && ___EmotionJSX(Tooltip, { id: \"annotations-loading-tooltip\", placement: \"top\", title: annotationsLoading },\n  ___EmotionJSX(\"i\", { role: \"img\", \"aria-label\": annotationsLoading, className: \"fa fa-refresh warning\" })),\n\n  !!Object.values(annotationError).length && ___EmotionJSX(Tooltip, { id: \"annoation-errors-tooltip\", placement: \"top\", title: annotationsError },\n  ___EmotionJSX(\"i\", { role: \"img\", \"aria-label\": annotationsError, className: \"fa fa-exclamation-circle danger\" }))),\n\n\n  ___EmotionJSX(\"div\", { className: \"header-controls\" },\n  !editMode && ___EmotionJSX(React.Fragment, null,\n  crossFilterValue && ___EmotionJSX(Tooltip, { placement: \"top\", title: ___EmotionJSX(FilterIndicator, { indicator: indicator, text: t('Click to clear emitted filters') }) },\n  ___EmotionJSX(CrossFilterIcon, { onClick: () => dispatch(clearDataMask(slice == null ? void 0 : slice.slice_id)) })),\n\n  ___EmotionJSX(FiltersBadge, { chartId: slice.slice_id }),\n  ___EmotionJSX(SliceHeaderControls, { slice: slice, isCached: isCached, isExpanded: isExpanded, cachedDttm: cachedDttm, updatedDttm: updatedDttm, toggleExpandSlice: toggleExpandSlice, forceRefresh: forceRefresh, logExploreChart: logExploreChart, exploreUrl: exploreUrl, exportCSV: exportCSV, exportFullCSV: exportFullCSV, supersetCanExplore: supersetCanExplore, supersetCanShare: supersetCanShare, supersetCanCSV: supersetCanCSV, sliceCanEdit: sliceCanEdit, componentId: componentId, dashboardId: dashboardId, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, handleToggleFullSize: handleToggleFullSize, isFullSize: isFullSize, chartStatus: chartStatus, formData: formData }))));\n\n\n\n};\nexport default SliceHeader;","map":null,"metadata":{},"sourceType":"module"}