{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nADD_FILTER,\nREMOVE_FILTER,\nCHANGE_FILTER,\nUPDATE_DIRECT_PATH_TO_FILTER,\nUPDATE_LAYOUT_COMPONENTS,\nUPDATE_DASHBOARD_FILTERS_SCOPE } from\n'../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [] };\n\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {} };\n\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [ADD_FILTER]() {\n      const { chartId, component, form_data } = action;\n      const { columns, labels } = getFilterConfigsFromFormdata(form_data);\n      const scopes = Object.keys(columns).reduce(\n      (map, column) => ({\n        ...map,\n        [column]: DASHBOARD_FILTER_SCOPE_GLOBAL }),\n\n      {});\n\n      const directPathToFilter = component ?\n      (component.parents || []).slice().concat(component.id) :\n      [];\n\n      const newFilter = {\n        ...dashboardFilter,\n        chartId,\n        componentId: component.id,\n        datasourceId: form_data.datasource,\n        filterName: component.meta.sliceName,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes,\n        isInstantFilter: !!form_data.instant_filtering,\n        isDateFilter: Object.keys(columns).includes(TIME_RANGE) };\n\n\n      return newFilter;\n    },\n\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n      (columns, name) => {\n        // override existed column value, or add new column name\n        if (!merge || !(name in columns)) {\n          return {\n            ...columns,\n            [name]: newSelectedValues[name] };\n\n        }\n\n        return {\n          ...columns,\n          [name]: [...columns[name], ...newSelectedValues[name]] };\n\n      },\n      { ...state.columns });\n\n\n      return {\n        ...state,\n        columns: updatedColumns };\n\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path };\n\n    } };\n\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components });\n\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n    (map, entry) => {\n      const [filterKey, { scope, immune }] = entry;\n      const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n      const scopes = {\n        ...map[chartId].scopes,\n        [column]: {\n          scope,\n          immune } };\n\n\n      return {\n        ...map,\n        [chartId]: {\n          ...map[chartId],\n          scopes } };\n\n\n    },\n    dashboardFilters);\n\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === REMOVE_FILTER) {\n    const { chartId } = action;\n    const { [chartId]: deletedFilter, ...updatedFilters } = dashboardFilters;\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n      dashboardFilters[action.chartId]) };\n\n\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n}","map":null,"metadata":{},"sourceType":"module"}