{"ast":null,"code":"/**\n * Find Option value that matches a possibly string value.\n *\n * Translate possible string values to `OptionType` objects, fallback to value\n * itself if cannot be found in the options list.\n *\n * Always returns an array.\n */\nexport function findValue(value, options = [], valueKey = 'value') {\n  if (value === null || value === undefined || value === '') {\n    return [];\n  }\n  const isGroup = Array.isArray((options[0] || {}).options);\n  const flatOptions = isGroup ?\n  options.flatMap((x) => x.options || []) :\n  options;\n  const find = (val) => {\n    const realVal = (value || {}).hasOwnProperty(valueKey) ?\n    val[valueKey] :\n    val;\n    return flatOptions.find((x) => x === realVal || x[valueKey] === realVal) || val;\n  };\n  // If value is a single string, must return an Array so `cleanValue` won't be\n  // empty: https://github.com/JedWatson/react-select/blob/32ad5c040bdd96cd1ca71010c2558842d684629c/packages/react-select/src/utils.js#L64\n  return (Array.isArray(value) ? value : [value]).map(find);\n}\nexport function hasOption(search, options) {\n  const searchOption = search.trim().toLowerCase();\n  return options.find((opt) => {\n    const { label, value } = opt;\n    const labelText = String(label);\n    const valueText = String(value);\n    return valueText.toLowerCase() === searchOption ||\n    labelText.toLowerCase() === searchOption;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}