{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { useEffect, useState } from 'react';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { useFilters, useNativeFiltersDataMask } from '../nativeFilters/FilterBar/state';\n// eslint-disable-next-line import/prefer-default-export\nexport const useNativeFilters = () => {var _getUrlParam;\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [dashboardFiltersOpen, setDashboardFiltersOpen] = useState((_getUrlParam = getUrlParam(URL_PARAMS.showFilters)) != null ? _getUrlParam : true);\n  const showNativeFilters = useSelector((state) => {var _state$dashboardInfo$;return (_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.show_native_filters;});\n  const canEdit = useSelector(({ dashboardInfo }) => dashboardInfo.dash_edit_perm);\n  const filters = useFilters();\n  const filterValues = Object.values(filters);\n  const nativeFiltersEnabled = showNativeFilters &&\n  isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) && (\n  canEdit || !canEdit && filterValues.length !== 0);\n  const requiredFirstFilter = filterValues.filter((filter) => filter.requiredFirst);\n  const dataMask = useNativeFiltersDataMask();\n  const showDashboard = isInitialized ||\n  !nativeFiltersEnabled ||\n  !(nativeFiltersEnabled &&\n  requiredFirstFilter.length &&\n  requiredFirstFilter.find(({ id }) => {var _dataMask$id, _dataMask$id$filterSt;return ((_dataMask$id = dataMask[id]) == null ? void 0 : (_dataMask$id$filterSt = _dataMask$id.filterState) == null ? void 0 : _dataMask$id$filterSt.value) === undefined;}));\n  const toggleDashboardFiltersOpen = (visible) => {\n    setDashboardFiltersOpen(visible != null ? visible : !dashboardFiltersOpen);\n  };\n  useEffect(() => {\n    if (filterValues.length === 0 &&\n    dashboardFiltersOpen &&\n    nativeFiltersEnabled) {\n      toggleDashboardFiltersOpen(false);\n    }\n  }, [filterValues.length]);\n  useEffect(() => {\n    if (showDashboard) {\n      setIsInitialized(true);\n    }\n  }, [showDashboard]);\n  return {\n    showDashboard,\n    dashboardFiltersOpen,\n    toggleDashboardFiltersOpen,\n    nativeFiltersEnabled };\n\n};","map":null,"metadata":{},"sourceType":"module"}