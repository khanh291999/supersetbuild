{"ast":null,"code":"import { FeatureFlag, isFeatureEnabled } from '../featureFlags';\nimport { getInitialDataMask } from './reducer';\nexport const CLEAR_DATA_MASK_STATE = 'CLEAR_DATA_MASK_STATE';\nexport const UPDATE_DATA_MASK = 'UPDATE_DATA_MASK';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE = 'SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL = 'SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL';\nexport function setDataMaskForFilterConfigComplete(filterConfig, filters) {\n  return {\n    type: SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE,\n    filterConfig,\n    filters };\n\n}\nexport function updateDataMask(filterId, dataMask) {\n  // Only apply data mask if one of the relevant features is enabled\n  const isFeatureFlagActive = isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) ||\n  isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS);\n  return {\n    type: UPDATE_DATA_MASK,\n    filterId,\n    dataMask: isFeatureFlagActive ? dataMask : {} };\n\n}\nexport function clearDataMask(filterId) {\n  return updateDataMask(filterId, getInitialDataMask(filterId));\n}\nexport function clearDataMaskState() {\n  return {\n    type: CLEAR_DATA_MASK_STATE };\n\n}","map":null,"metadata":{},"sourceType":"module"}