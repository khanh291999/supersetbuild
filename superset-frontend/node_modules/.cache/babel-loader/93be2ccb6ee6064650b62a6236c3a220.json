{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { sqlaAutoGeneratedMetricRegex } from 'src/explore/constants';\n\nexport const EXPRESSION_TYPES = {\n  SIMPLE: 'SIMPLE',\n  SQL: 'SQL' };\n\n\nfunction inferSqlExpressionColumn(adhocMetric) {\n  if (\n  adhocMetric.sqlExpression &&\n  sqlaAutoGeneratedMetricRegex.test(adhocMetric.sqlExpression))\n  {\n    const indexFirstCloseParen = adhocMetric.sqlExpression.indexOf(')');\n    const indexPairedOpenParen = adhocMetric.sqlExpression.\n    substring(0, indexFirstCloseParen).\n    lastIndexOf('(');\n    if (indexFirstCloseParen > 0 && indexPairedOpenParen > 0) {\n      return adhocMetric.sqlExpression.substring(\n      indexPairedOpenParen + 1,\n      indexFirstCloseParen);\n\n    }\n  }\n  return null;\n}\n\nfunction inferSqlExpressionAggregate(adhocMetric) {\n  if (\n  adhocMetric.sqlExpression &&\n  sqlaAutoGeneratedMetricRegex.test(adhocMetric.sqlExpression))\n  {\n    const indexFirstOpenParen = adhocMetric.sqlExpression.indexOf('(');\n    if (indexFirstOpenParen > 0) {\n      return adhocMetric.sqlExpression.substring(0, indexFirstOpenParen);\n    }\n  }\n  return null;\n}\n\nexport default class AdhocMetric {\n  constructor(adhocMetric) {\n    this.expressionType = adhocMetric.expressionType || EXPRESSION_TYPES.SIMPLE;\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      // try to be clever in the case of transitioning from Sql expression back to simple expression\n      const inferredColumn = inferSqlExpressionColumn(adhocMetric);\n      this.column =\n      adhocMetric.column ||\n      inferredColumn && { column_name: inferredColumn };\n      this.aggregate =\n      adhocMetric.aggregate || inferSqlExpressionAggregate(adhocMetric);\n      this.sqlExpression = null;\n    } else if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      this.sqlExpression = adhocMetric.sqlExpression;\n      this.column = null;\n      this.aggregate = null;\n    }\n    this.isNew = !!adhocMetric.isNew;\n    this.hasCustomLabel = !!(adhocMetric.hasCustomLabel && adhocMetric.label);\n    this.label = this.hasCustomLabel ?\n    adhocMetric.label :\n    this.getDefaultLabel();\n\n    this.optionName =\n    adhocMetric.optionName ||\n    `metric_${Math.random().\n    toString(36).\n    substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n  }\n\n  getDefaultLabel() {\n    const label = this.translateToSql(true);\n    return label.length < 43 ? label : `${label.substring(0, 40)}...`;\n  }\n\n  translateToSql(useVerboseName = false) {\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {var _this$column, _this$column2;\n      const aggregate = this.aggregate || '';\n      // eslint-disable-next-line camelcase\n      const column =\n      useVerboseName && (_this$column = this.column) != null && _this$column.verbose_name ?\n      `(${this.column.verbose_name})` :\n      (_this$column2 = this.column) != null && _this$column2.column_name ?\n      `(${this.column.column_name})` :\n      '';\n      return aggregate + column;\n    }\n    if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return this.sqlExpression;\n    }\n    return '';\n  }\n\n  duplicateWith(nextFields) {\n    return new AdhocMetric({\n      ...this,\n      // all duplicate metrics are not considered new by default\n      isNew: false,\n      // but still overriddable by nextFields\n      ...nextFields });\n\n  }\n\n  equals(adhocMetric) {\n    return (\n      adhocMetric.label === this.label &&\n      adhocMetric.expressionType === this.expressionType &&\n      adhocMetric.sqlExpression === this.sqlExpression &&\n      adhocMetric.aggregate === this.aggregate &&\n      (adhocMetric.column && adhocMetric.column.column_name) === (\n      this.column && this.column.column_name));\n\n  }\n\n  isValid() {\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      return !!(this.column && this.aggregate);\n    }\n    if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return !!this.sqlExpression;\n    }\n    return false;\n  }\n\n  inferSqlExpressionAggregate() {\n    return inferSqlExpressionAggregate(this);\n  }\n\n  inferSqlExpressionColumn() {\n    return inferSqlExpressionColumn(this);\n  }}","map":null,"metadata":{},"sourceType":"module"}