{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport DatasourceModal from 'src/datasource/DatasourceModal';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport AddDatasetModal from './AddDatasetModal';\nimport { PAGE_SIZE, SORT_BY, PASSWORDS_NEEDED_MESSAGE, CONFIRM_OVERWRITE_MESSAGE } from './constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nconst DatasetList = ({ addDangerToast, addSuccessToast, user }) => {\n  const { state: { loading, resourceCount: datasetCount, resourceCollection: datasets, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dataset', t('dataset'), addDangerToast);\n  const [datasetAddModalOpen, setDatasetAddModalOpen] = useState(false);\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState(null);\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] = useState(null);\n  const [importingDataset, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canExport = hasPerm('can_read');\n  const initialSort = SORT_BY;\n  const openDatasetEditModal = useCallback(({ id }) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${id}` }).\n\n    then(({ json = {} }) => {\n      const addCertificationFields = json.result.columns.map((column) => {\n        const { certification: { details = '', certified_by = '' } = {} } = JSON.parse(column.extra || '{}') || {};\n        return {\n          ...column,\n          certification_details: details || '',\n          certified_by: certified_by || '',\n          is_certified: details || certified_by };\n\n      });\n      // eslint-disable-next-line no-param-reassign\n      json.result.columns = [...addCertificationFields];\n      setDatasetCurrentlyEditing(json.result);\n    }).\n    catch(() => {\n      addDangerToast(t('An error occurred while fetching dataset related data'));\n    });\n  }, [addDangerToast]);\n  const openDatasetDeleteModal = (dataset) => SupersetClient.get({\n    endpoint: `/api/v1/dataset/${dataset.id}/related_objects` }).\n\n  then(({ json = {} }) => {\n    setDatasetCurrentlyDeleting({\n      ...dataset,\n      chart_count: json.charts.count,\n      dashboard_count: json.dashboards.count });\n\n  }).\n  catch(createErrorHandler((errMsg) => t('An error occurred while fetching dataset related data: %s', errMsg)));\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { kind } } }) => {\n      if (kind === 'physical') {\n        return ___EmotionJSX(Tooltip, { id: \"physical-dataset-tooltip\", title: t('Physical dataset') },\n        ___EmotionJSX(Icons.DatasetPhysical, null));\n\n      }\n      return ___EmotionJSX(Tooltip, { id: \"virtual-dataset-tooltip\", title: t('Virtual dataset') },\n      ___EmotionJSX(Icons.DatasetVirtual, null));\n\n    },\n    accessor: 'kind_icon',\n    disableSortBy: true,\n    size: 'xs' },\n\n  {\n    Cell: ({ row: { original: { extra, table_name: datasetTitle, description, explore_url: exploreURL } } }) => {\n      const titleLink = ___EmotionJSX(\"a\", { href: exploreURL }, datasetTitle);\n      try {\n        const parsedExtra = JSON.parse(extra);\n        return ___EmotionJSX(FlexRowContainer, null,\n        (parsedExtra == null ? void 0 : parsedExtra.certification) && ___EmotionJSX(CertifiedIcon, { certifiedBy: parsedExtra.certification.certified_by, details: parsedExtra.certification.details, size: \"l\" }),\n        (parsedExtra == null ? void 0 : parsedExtra.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: parsedExtra.warning_markdown, size: \"l\" }),\n        titleLink,\n        description && ___EmotionJSX(InfoTooltip, { tooltip: description, viewBox: \"0 -1 24 24\" }));\n\n      }\n      catch {\n        return titleLink;\n      }\n    },\n    Header: t('Name'),\n    accessor: 'table_name' },\n\n  {\n    Cell: ({ row: { original: { kind } } }) => {var _kind$;return ((_kind$ = kind[0]) == null ? void 0 : _kind$.toUpperCase()) + kind.slice(1);},\n    Header: t('Type'),\n    accessor: 'kind',\n    disableSortBy: true,\n    size: 'md' },\n\n  {\n    Header: t('Database'),\n    accessor: 'database.database_name',\n    size: 'lg' },\n\n  {\n    Header: t('Schema'),\n    accessor: 'schema',\n    size: 'lg' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" }, changedOn),\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_by_name: changedByName } } }) => changedByName,\n    Header: t('Modified by'),\n    accessor: 'changed_by.first_name',\n    size: 'xl' },\n\n  {\n    accessor: 'database',\n    disableSortBy: true,\n    hidden: true },\n\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => ___EmotionJSX(FacePile, { users: owners }),\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true,\n    size: 'lg' },\n\n  {\n    accessor: 'sql',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => openDatasetEditModal(original);\n      const handleDelete = () => openDatasetDeleteModal(original);\n      const handleExport = () => handleBulkDatasetExport([original]);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDelete },\n      ___EmotionJSX(Icons.Trash, null))),\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete,\n    disableSortBy: true }],\n\n  [canEdit, canDelete, canExport, openDatasetEditModal]);\n  const filterTypes = useMemo(() => [\n  {\n    Header: t('Owner'),\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.relationManyMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'owners', createErrorHandler((errMsg) => t('An error occurred while fetching dataset owner values: %s', errMsg)), user),\n    paginate: true },\n\n  {\n    Header: t('Database'),\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'database', createErrorHandler((errMsg) => t('An error occurred while fetching datasets: %s', errMsg))),\n    paginate: true },\n\n  {\n    Header: t('Schema'),\n    id: 'schema',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('dataset', 'schema', createErrorHandler((errMsg) => t('An error occurred while fetching schema values: %s', errMsg))),\n    paginate: true },\n\n  {\n    Header: t('Type'),\n    id: 'sql',\n    input: 'select',\n    operator: FilterOperator.datasetIsNullOrEmpty,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: 'Virtual', value: false },\n    { label: 'Physical', value: true }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'table_name',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  []);\n  const menuData = {\n    activeChild: 'Datasets',\n    ...commonMenuData };\n\n  const buttonArr = [];\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary' });\n\n  }\n  if (canCreate) {\n    buttonArr.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dataset'), ' '),\n\n      onClick: () => setDatasetAddModalOpen(true),\n      buttonStyle: 'primary' });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      buttonArr.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import datasets'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, null)),\n\n        buttonStyle: 'link',\n        onClick: openDatasetImportModal });\n\n    }\n  }\n  menuData.buttons = buttonArr;\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n  const handleDatasetDelete = ({ id, table_name: tableName }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}` }).\n    then(() => {\n      refreshData();\n      setDatasetCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', tableName));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', tableName, errMsg))));\n  };\n  const handleBulkDatasetDelete = (datasetsToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(datasetsToDelete.map(({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected datasets: %s', errMsg))));\n  };\n  const handleBulkDatasetExport = (datasetsToExport) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  ___EmotionJSX(AddDatasetModal, { show: datasetAddModalOpen, onHide: () => setDatasetAddModalOpen(false), onDatasetAdd: refreshData }),\n  datasetCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.', datasetCurrentlyDeleting.table_name, datasetCurrentlyDeleting.chart_count, datasetCurrentlyDeleting.dashboard_count), onConfirm: () => {\n      if (datasetCurrentlyDeleting) {\n        handleDatasetDelete(datasetCurrentlyDeleting);\n      }\n    }, onHide: closeDatasetDeleteModal, open: true, title: t('Delete Dataset?') }),\n  datasetCurrentlyEditing && ___EmotionJSX(DatasourceModal, { datasource: datasetCurrentlyEditing, onDatasourceSave: refreshData, onHide: closeDatasetEditModal, show: true }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected datasets?'), onConfirm: handleBulkDatasetDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        onSelect: confirmDelete,\n        type: 'danger' });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkDatasetExport });\n\n    }\n    return ___EmotionJSX(ListView, { className: \"dataset-list-view\", columns: columns, data: datasets, count: datasetCount, pageSize: PAGE_SIZE, fetchData: fetchData, filters: filterTypes, loading: loading, initialSort: initialSort, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, renderBulkSelectCopy: (selected) => {\n        const { virtualCount, physicalCount } = selected.reduce((acc, e) => {\n          if (e.original.kind === 'physical')\n          acc.physicalCount += 1;else\n          if (e.original.kind === 'virtual') {\n            acc.virtualCount += 1;\n          }\n          return acc;\n        }, { virtualCount: 0, physicalCount: 0 });\n        if (!selected.length) {\n          return t('0 Selected');\n        }\n        if (virtualCount && !physicalCount) {\n          return t('%s Selected (Virtual)', selected.length, virtualCount);\n        }\n        if (physicalCount && !virtualCount) {\n          return t('%s Selected (Physical)', selected.length, physicalCount);\n        }\n        return t('%s Selected (%s Physical, %s Virtual)', selected.length, physicalCount, virtualCount);\n      } });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"dataset\", resourceLabel: t('dataset'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDatasetImport, show: importingDataset, onHide: closeDatasetImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n};\nexport default withToasts(DatasetList);","map":null,"metadata":{},"sourceType":"module"}