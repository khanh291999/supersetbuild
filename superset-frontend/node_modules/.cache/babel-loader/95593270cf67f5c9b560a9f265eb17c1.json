{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select } from 'src/components';\nimport { styled, t } from '@superset-ui/core';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\n\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';\nimport AdhocFilter, {\nEXPRESSION_TYPES,\nCLAUSES } from\n'src/explore/components/controls/FilterControl/AdhocFilter';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  adhocFilter: PropTypes.instanceOf(AdhocFilter).isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(\n  PropTypes.oneOfType([\n  columnType,\n  PropTypes.shape({ saved_metric_name: PropTypes.string.isRequired }),\n  adhocMetricType])).\n\n  isRequired,\n  height: PropTypes.number.isRequired,\n  activeKey: PropTypes.string.isRequired };\n\n\nconst StyledSelect = styled(Select)`\n  ${({ theme }) => `\n    width: ${theme.gridUnit * 30}px;\n    marginRight: ${theme.gridUnit}px;\n  `}\n`;\n\nexport default class AdhocFilterEditPopoverSqlTabContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSqlExpressionChange = this.onSqlExpressionChange.bind(this);\n    this.onSqlExpressionClauseChange = this.onSqlExpressionClauseChange.bind(\n    this);\n\n    this.handleAceEditorRef = this.handleAceEditorRef.bind(this);\n\n    this.selectProps = {\n      ariaLabel: t('Select column') };\n\n  }\n\n  componentDidUpdate() {\n    if (this.aceEditorRef) {\n      this.aceEditorRef.editor.resize();\n    }\n  }\n\n  onSqlExpressionClauseChange(clause) {\n    this.props.onChange(\n    this.props.adhocFilter.duplicateWith({\n      clause,\n      expressionType: EXPRESSION_TYPES.SQL }));\n\n\n  }\n\n  onSqlExpressionChange(sqlExpression) {\n    this.props.onChange(\n    this.props.adhocFilter.duplicateWith({\n      sqlExpression,\n      expressionType: EXPRESSION_TYPES.SQL }));\n\n\n  }\n\n  handleAceEditorRef(ref) {\n    if (ref) {\n      this.aceEditorRef = ref;\n    }\n  }\n\n  render() {\n    const { adhocFilter, height, options } = this.props;\n\n    const clauseSelectProps = {\n      placeholder: t('choose WHERE or HAVING...'),\n      value: adhocFilter.clause,\n      onChange: this.onSqlExpressionClauseChange };\n\n    const keywords = sqlKeywords.concat(\n    options.\n    map((option) => {\n      if (option.column_name) {\n        return {\n          name: option.column_name,\n          value: option.column_name,\n          score: 50,\n          meta: 'option' };\n\n      }\n      return null;\n    }).\n    filter(Boolean));\n\n    const selectOptions = Object.keys(CLAUSES).map((clause) => ({\n      label: clause,\n      value: clause }));\n\n\n    return (\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(\"div\", { className: \"filter-edit-clause-section\" },\n      ___EmotionJSX(StyledSelect, _extends({\n        options: selectOptions },\n      this.selectProps,\n      clauseSelectProps)),\n\n      ___EmotionJSX(\"span\", { className: \"filter-edit-clause-info\" },\n      ___EmotionJSX(\"strong\", null, \"WHERE\"), \" \", t('Filters by columns'),\n      ___EmotionJSX(\"br\", null),\n      ___EmotionJSX(\"strong\", null, \"HAVING\"), \" \", t('Filters by metrics'))),\n\n\n      ___EmotionJSX(\"div\", { css: (theme) => ({ marginTop: theme.gridUnit * 4 }) },\n      ___EmotionJSX(SQLEditor, {\n        ref: this.handleAceEditorRef,\n        keywords: keywords,\n        height: `${height - 130}px`,\n        onChange: this.onSqlExpressionChange,\n        width: \"100%\",\n        showGutter: false,\n        value: adhocFilter.sqlExpression || adhocFilter.translateToSql(),\n        editorProps: { $blockScrolling: true },\n        enableLiveAutocompletion: true,\n        className: \"filter-sql-editor\",\n        wrapEnabled: true }))));\n\n\n\n\n  }}\n\nAdhocFilterEditPopoverSqlTabContent.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}