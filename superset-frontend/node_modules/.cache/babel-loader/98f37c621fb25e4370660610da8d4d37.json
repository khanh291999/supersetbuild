{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport cx from 'classnames';\n\nimport { componentShape } from '../../util/propShapes';\nimport { dragConfig, dropConfig } from './dragDroppableConfig';\nimport {\nDROP_TOP,\nDROP_RIGHT,\nDROP_BOTTOM,\nDROP_LEFT } from\n'../../util/getDropPosition';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  children: PropTypes.func,\n  className: PropTypes.string,\n  component: componentShape.isRequired,\n  parentComponent: componentShape,\n  depth: PropTypes.number.isRequired,\n  disableDragDrop: PropTypes.bool,\n  orientation: PropTypes.oneOf(['row', 'column']),\n  index: PropTypes.number.isRequired,\n  style: PropTypes.object,\n  onDrop: PropTypes.func,\n  editMode: PropTypes.bool.isRequired,\n  useEmptyDragPreview: PropTypes.bool,\n\n  // from react-dnd\n  isDragging: PropTypes.bool.isRequired,\n  isDraggingOver: PropTypes.bool.isRequired,\n  isDraggingOverShallow: PropTypes.bool.isRequired,\n  droppableRef: PropTypes.func.isRequired,\n  dragSourceRef: PropTypes.func.isRequired,\n  dragPreviewRef: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  className: null,\n  style: null,\n  parentComponent: null,\n  disableDragDrop: false,\n  children() {},\n  onDrop() {},\n  orientation: 'row',\n  useEmptyDragPreview: false };\n\n\n// export unwrapped component for testing\nexport class UnwrappedDragDroppable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropIndicator: null // this gets set/modified by the react-dnd HOCs\n    };\n    this.setRef = this.setRef.bind(this);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  setRef(ref) {\n    this.ref = ref;\n    // this is needed for a custom drag preview\n    if (this.props.useEmptyDragPreview) {\n      this.props.dragPreviewRef(getEmptyImage(), {\n        // IE fallback: specify that we'd rather screenshot the node\n        // when it already knows it's being dragged so we can hide it with CSS.\n        captureDraggingState: true });\n\n    } else {\n      this.props.dragPreviewRef(ref);\n    }\n    this.props.droppableRef(ref);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      orientation,\n      dragSourceRef,\n      disableDragDrop,\n      isDragging,\n      isDraggingOver,\n      style,\n      editMode } =\n    this.props;\n\n    const { dropIndicator } = this.state;\n    const dropIndicatorProps =\n    isDraggingOver && dropIndicator && !disableDragDrop ?\n    {\n      className: cx(\n      'drop-indicator',\n      dropIndicator === DROP_TOP && 'drop-indicator--top',\n      dropIndicator === DROP_BOTTOM && 'drop-indicator--bottom',\n      dropIndicator === DROP_LEFT && 'drop-indicator--left',\n      dropIndicator === DROP_RIGHT && 'drop-indicator--right') } :\n\n\n    null;\n\n    const childProps = editMode ?\n    {\n      dragSourceRef,\n      dropIndicatorProps } :\n\n    {};\n\n    return (\n      ___EmotionJSX(\"div\", {\n        style: style,\n        ref: this.setRef,\n\n        className: cx(\n        'dragdroppable',\n        orientation === 'row' && 'dragdroppable-row',\n        orientation === 'column' && 'dragdroppable-column',\n        isDragging && 'dragdroppable--dragging',\n        className) },\n\n\n      children(childProps)));\n\n\n  }}\n\n\nUnwrappedDragDroppable.propTypes = propTypes;\nUnwrappedDragDroppable.defaultProps = defaultProps;\n\n// note that the composition order here determines using\n// component.method() vs decoratedComponentInstance.method() in the drag/drop config\nexport default DragSource(...dragConfig)(\nDropTarget(...dropConfig)(UnwrappedDragDroppable));","map":null,"metadata":{},"sourceType":"module"}