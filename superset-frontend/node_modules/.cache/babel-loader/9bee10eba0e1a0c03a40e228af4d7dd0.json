{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { t } from '@superset-ui/core';\nimport { setNativeFilterFieldValues, useForceUpdate } from './utils';\n// When some fields in form changed we need re-fetch data for Filter defaultValue\n// eslint-disable-next-line import/prefer-default-export\nexport const useBackendFormUpdate = (form, filterId) => {var _formFilter$dataset;\n  const forceUpdate = useForceUpdate();\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n  useEffect(() => {\n    setNativeFilterFieldValues(form, filterId, {\n      isDataDirty: true,\n      defaultValueQueriesData: null });\n\n    forceUpdate();\n  }, [\n  form,\n  formFilter == null ? void 0 : formFilter.filterType,\n  formFilter == null ? void 0 : formFilter.column,\n  formFilter == null ? void 0 : (_formFilter$dataset = formFilter.dataset) == null ? void 0 : _formFilter$dataset.value,\n  JSON.stringify(formFilter == null ? void 0 : formFilter.adhoc_filters),\n  formFilter == null ? void 0 : formFilter.time_range,\n  forceUpdate,\n  filterId]);\n\n};\nexport const useDefaultValue = (formFilter, filterToEdit) => {var _formFilter$controlVa, _formFilter$controlVa2;\n  const enableEmptyFilter = !!(formFilter != null && (_formFilter$controlVa = formFilter.controlValues) != null && _formFilter$controlVa.enableEmptyFilter);\n  const defaultToFirstItem = !!(formFilter != null && (_formFilter$controlVa2 = formFilter.controlValues) != null && _formFilter$controlVa2.defaultToFirstItem);\n  const [hasDefaultValue, setHasPartialDefaultValue] = useState(false);\n  const [isRequired, setIsRequired] = useState(enableEmptyFilter);\n  const [defaultValueTooltip, setDefaultValueTooltip] = useState('');\n  const setHasDefaultValue = (value = false) => {\n    const required = enableEmptyFilter && !defaultToFirstItem;\n    setIsRequired(required);\n    setHasPartialDefaultValue(required ? true : value);\n  };\n  useEffect(() => {var _formFilter$defaultDa, _formFilter$defaultDa2;\n    setHasDefaultValue(defaultToFirstItem ?\n    false :\n    !!(formFilter != null && (_formFilter$defaultDa = formFilter.defaultDataMask) != null && (_formFilter$defaultDa2 = _formFilter$defaultDa.filterState) != null && _formFilter$defaultDa2.value));\n    // TODO: this logic should be unhardcoded\n  }, [defaultToFirstItem, enableEmptyFilter]);\n  useEffect(() => {var _filterToEdit$default, _filterToEdit$default2;\n    setHasDefaultValue(defaultToFirstItem ?\n    false :\n    !!(filterToEdit != null && (_filterToEdit$default = filterToEdit.defaultDataMask) != null && (_filterToEdit$default2 = _filterToEdit$default.filterState) != null && _filterToEdit$default2.value));\n  }, []);\n  useEffect(() => {\n    let tooltip = '';\n    if (defaultToFirstItem) {\n      tooltip = t('Default value set automatically when \"Default to first item\" is checked');\n    } else\n    if (isRequired) {\n      tooltip = t('Default value must be set when \"Required\" is checked');\n    } else\n    if (hasDefaultValue) {\n      tooltip = t('Default value must be set when \"Filter has default value\" is checked');\n    }\n    setDefaultValueTooltip(tooltip);\n  }, [hasDefaultValue, isRequired, defaultToFirstItem]);\n  return [hasDefaultValue, isRequired, defaultValueTooltip, setHasDefaultValue];\n};","map":null,"metadata":{},"sourceType":"module"}