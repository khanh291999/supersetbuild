{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { now } from 'src/modules/dates';\nimport * as actions from './chartAction';\nexport const chart = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  sliceFormData: null,\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0 };\n\nexport default function chartReducer(charts = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart };\n\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController };\n\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t('An error occurred while rendering the visualization: %s', action.error) };\n\n    },\n    [actions.CHART_UPDATE_FAILED](state) {var _action$queriesRespon, _action$queriesRespon2, _action$queriesRespon3, _action$queriesRespon4;\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse ? (_action$queriesRespon =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon2 = _action$queriesRespon[0]) == null ? void 0 : _action$queriesRespon2.error :\n        t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse ? (_action$queriesRespon3 =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon4 = _action$queriesRespon3[0]) == null ? void 0 : _action$queriesRespon4.stacktrace :\n        null };\n\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading' };\n\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {\n      if (state.annotationQuery &&\n      state.annotationQuery[action.annotation.name]) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryController };\n\n      return {\n        ...state,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data };\n\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse ?\n        action.queryResponse.error :\n        t('Network error.') };\n\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    } };\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    delete charts[action.key];\n    return charts;\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId };\n\n    delete charts[key];\n    return charts;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return { ...action.data.charts };\n  }\n  if (action.type === DatasourcesAction.SET_DATASOURCES) {\n    return Object.fromEntries(Object.entries(charts).map(([chartId, chart]) => [\n    chartId,\n    // if render has failed, clear error message,\n    // which will trigger a re-render\n    chart.chartStatus === 'failed' ?\n    {\n      ...chart,\n      chartStatus: '',\n      chartStackTrace: null,\n      chartAlert: null } :\n\n    chart]));\n\n  }\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]) };\n\n  }\n  return charts;\n}","map":null,"metadata":{},"sourceType":"module"}