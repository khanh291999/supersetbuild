{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t } from '@superset-ui/core';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE } from 'src/dashboard/util/componentTypes';\nimport { buildTree } from './utils';\n// eslint-disable-next-line import/prefer-default-export\nexport function useFilterScopeTree(currentChartId, initiallyExcludedCharts = [], buildTreeLeafTitle = (label) => label) {\n  const layout = useSelector(({ dashboardLayout: { present } }) => present);\n  const charts = useSelector(({ charts }) => charts);\n  const tree = {\n    children: [],\n    key: DASHBOARD_ROOT_ID,\n    type: DASHBOARD_ROOT_TYPE,\n    title: t('All panels') };\n\n  // We need to get only nodes that have charts as children or grandchildren\n  const validNodes = useMemo(() => Object.values(layout).reduce((acc, cur) => {\n    const { id, parents = [], type, meta } = cur;\n    if (type === CHART_TYPE && currentChartId !== (meta == null ? void 0 : meta.chartId)) {\n      return [...new Set([...acc, ...parents, id])];\n    }\n    return acc;\n  }, []), [layout, currentChartId]);\n  useMemo(() => {\n    buildTree(layout[DASHBOARD_ROOT_ID], tree, layout, charts, validNodes, initiallyExcludedCharts, buildTreeLeafTitle);\n  }, [layout, tree, charts, initiallyExcludedCharts, buildTreeLeafTitle]);\n  return { treeData: [tree], layout };\n}","map":null,"metadata":{},"sourceType":"module"}