{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport { t } from '@superset-ui/core';\nimport { areObjectsEqual } from 'src/reduxUtils';\nexport const generateFiltersSetId = () => `FILTERS_SET-${shortid.generate()}`;\nexport const APPLY_FILTERS_HINT = t('Please apply filter changes');\nexport const getFilterValueForDisplay = (value) => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'string' || typeof value === 'number') {\n    return `${value}`;\n  }\n  if (Array.isArray(value)) {\n    return value.join(', ');\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n  return t('Unknown value');\n};\nexport const findExistingFilterSet = ({ filterSetFilterValues, dataMaskSelected }) => filterSetFilterValues.find(({ dataMask: dataMaskFromFilterSet = {} }) => {\n  const dataMaskSelectedEntries = Object.entries(dataMaskSelected);\n  return dataMaskSelectedEntries.every(([id, filterFromSelectedFilters]) => {var _dataMaskFromFilterSe;\n    const isEqual = areObjectsEqual(filterFromSelectedFilters.filterState, dataMaskFromFilterSet == null ? void 0 : (_dataMaskFromFilterSe = dataMaskFromFilterSet[id]) == null ? void 0 : _dataMaskFromFilterSe.filterState);\n    const hasSamePropsNumber = dataMaskSelectedEntries.length ===\n    Object.keys(dataMaskFromFilterSet != null ? dataMaskFromFilterSet : {}).length;\n    return isEqual && hasSamePropsNumber;\n  });\n});","map":null,"metadata":{},"sourceType":"module"}