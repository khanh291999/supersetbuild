{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { styled } from '@superset-ui/core';\nimport cx from 'classnames';\n\nimport { Row } from 'antd';\nimport { Menu } from 'src/common/components';\nimport Button from 'src/components/Button';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledHeader = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  .header {\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n    margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    text-align: left;\n    font-size: 18px;\n    padding: ${({ theme }) => theme.gridUnit * 3}px;\n    display: inline-block;\n    line-height: ${({ theme }) => theme.gridUnit * 9}px;\n  }\n  .nav-right {\n    display: flex;\n    align-items: center;\n    padding: 14px 0;\n    margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    float: right;\n    position: absolute;\n    right: 0;\n  }\n  .nav-right-collapse {\n    display: flex;\n    align-items: center;\n    padding: 14px 0;\n    margin-right: 0;\n    float: left;\n    padding-left: 10px;\n  }\n  .menu {\n    background-color: white;\n    .ant-menu-horizontal {\n      line-height: inherit;\n      .ant-menu-item {\n        &:hover {\n          border-bottom: none;\n        }\n      }\n    }\n    .ant-menu {\n      padding: ${({ theme }) => theme.gridUnit * 4}px 0px;\n    }\n  }\n\n  .ant-menu-horizontal:not(.ant-menu-dark) > .ant-menu-item {\n    margin: 0 ${({ theme }) => theme.gridUnit + 1}px;\n  }\n\n  .menu .ant-menu-item {\n    li {\n      a,\n      div {\n        font-size: ${({ theme }) => theme.typography.sizes.s}px;\n        color: ${({ theme }) => theme.colors.secondary.dark1};\n\n        a {\n          margin: 0;\n          padding: ${({ theme }) => theme.gridUnit * 4}px;\n          line-height: ${({ theme }) => theme.gridUnit * 5}px;\n        }\n      }\n\n      &.no-router a {\n        padding: ${({ theme }) => theme.gridUnit * 2}px\n          ${({ theme }) => theme.gridUnit * 4}px;\n      }\n    }\n    li.active > a,\n    li.active > div,\n    li > a:hover,\n    li > a:focus,\n    li > div:hover {\n      background: ${({ theme }) => theme.colors.secondary.light4};\n      border-bottom: none;\n      border-radius: ${({ theme }) => theme.borderRadius}px;\n      margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n      text-decoration: none;\n    }\n  }\n\n  .btn-link {\n    padding: 10px 0;\n  }\n  .ant-menu-horizontal {\n    border: none;\n  }\n  @media (max-width: 767px) {\n    .header,\n    .nav-right {\n      position: relative;\n      margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\nconst SubMenuComponent = (props) => {var _props$tabs, _props$buttons;\n  const [showMenu, setMenu] = useState('horizontal');\n  const [navRightStyle, setNavRightStyle] = useState('nav-right');\n  let hasHistory = true;\n  // If no parent <Router> component exists, useHistory throws an error\n  try {\n    useHistory();\n  }\n  catch (err) {\n    // If error is thrown, we know not to use <Link> in render\n    hasHistory = false;\n  }\n  useEffect(() => {\n    function handleResize() {\n      if (window.innerWidth <= 767)\n      setMenu('inline');else\n\n      setMenu('horizontal');\n      if (props.buttons &&\n      props.buttons.length >= 3 &&\n      window.innerWidth >= 795) {\n        setNavRightStyle('nav-right');\n      } else\n      if (props.buttons &&\n      props.buttons.length >= 3 &&\n      window.innerWidth <= 795) {\n        setNavRightStyle('nav-right-collapse');\n      }\n    }\n    handleResize();\n    const resize = _debounce(handleResize, 10);\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [props.buttons]);\n  return ___EmotionJSX(StyledHeader, null,\n  ___EmotionJSX(Row, { className: \"menu\", role: \"navigation\" },\n  props.name && ___EmotionJSX(\"div\", { className: \"header\" }, props.name),\n  ___EmotionJSX(Menu, { mode: showMenu, style: { backgroundColor: 'transparent' } }, (_props$tabs =\n  props.tabs) == null ? void 0 : _props$tabs.map((tab) => {\n    if ((props.usesRouter || hasHistory) && !!tab.usesRouter) {\n      return ___EmotionJSX(Menu.Item, { key: tab.label },\n      ___EmotionJSX(\"li\", { role: \"tab\", className: tab.name === props.activeChild ? 'active' : '' },\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Link, { to: tab.url || '' }, tab.label))));\n\n\n\n    }\n    return ___EmotionJSX(Menu.Item, { key: tab.label },\n    ___EmotionJSX(\"li\", { className: cx('no-router', {\n        active: tab.name === props.activeChild }),\n      role: \"tab\" },\n    ___EmotionJSX(\"a\", { href: tab.url, onClick: tab.onClick },\n    tab.label)));\n\n\n\n  })),\n\n  ___EmotionJSX(\"div\", { className: navRightStyle }, (_props$buttons =\n  props.buttons) == null ? void 0 : _props$buttons.map((btn, i) => ___EmotionJSX(Button, { key: i, buttonStyle: btn.buttonStyle, onClick: btn.onClick },\n  btn.name)))),\n\n\n\n  props.children);\n\n};\nexport default SubMenuComponent;","map":null,"metadata":{},"sourceType":"module"}