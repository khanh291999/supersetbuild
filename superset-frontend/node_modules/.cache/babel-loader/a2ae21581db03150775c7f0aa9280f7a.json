{"ast":null,"code":"function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n/* eslint-disable no-underscore-dangle */\nimport { SyncRegistry, OverwritePolicy } from '@encodable/registry';\nimport ChildRegistry from './ChildRegistry';\nimport wrapColorScheme from './wrappers/wrapColorScheme';\nexport default class ColorSchemeRegistry extends SyncRegistry {\n  constructor({\n    name = 'ColorScheme',\n    overwritePolicy = OverwritePolicy.WARN,\n    setFirstItemAsDefault = true,\n    ...rest } =\n  {}) {\n    super({\n      name,\n      overwritePolicy,\n      setFirstItemAsDefault,\n      ...rest });\n\n\n    _defineProperty(this, \"categorical\", void 0);\n\n    _defineProperty(this, \"sequential\", void 0);\n\n    _defineProperty(this, \"diverging\", void 0);\n\n    _defineProperty(this, \"wrappers\", void 0);\n\n    this.categorical = new ChildRegistry(this, {\n      name: 'categorical' });\n\n    this.sequential = new ChildRegistry(this, {\n      name: 'sequential' });\n\n    this.diverging = new ChildRegistry(this, {\n      name: 'diverging' });\n\n    this.wrappers = new SyncRegistry();\n  }\n\n  get(schemeId) {\n    const targetKey = schemeId != null ? schemeId : this.getDefaultKey();\n\n    if (typeof targetKey === 'undefined') {\n      return undefined;\n    }\n\n    const value = super.get(targetKey);\n\n    if (typeof value === 'undefined') {\n      return value;\n    }\n\n    if (this.wrappers.has(targetKey)) {\n      return this.wrappers.get(schemeId);\n    }\n\n    const wrapper = wrapColorScheme(value);\n    this.wrappers.registerValue(targetKey, wrapper);\n    return wrapper;\n  }\n\n  clear() {\n    super.clear();\n\n    this.categorical._clear();\n\n    this.sequential._clear();\n\n    this.diverging._clear();\n\n    return this;\n  }\n\n  remove(schemeId) {\n    super.remove(schemeId);\n\n    this.categorical._remove(schemeId);\n\n    this.sequential._remove(schemeId);\n\n    this.diverging._remove(schemeId);\n\n    return this;\n  }\n\n  register(scheme) {\n    if (Array.isArray(scheme)) {\n      scheme.forEach((v) => {\n        this.registerValue(v.id, v);\n      });\n      return this;\n    }\n\n    return this.registerValue(scheme.id, scheme);\n  }\n\n  registerValue(schemeId, scheme) {\n    switch (scheme.type) {\n      case 'categorical':\n        super.registerValue(schemeId, scheme);\n\n        this.categorical._registerValue(schemeId, scheme);\n\n        break;\n\n      case 'sequential':\n        super.registerValue(schemeId, scheme);\n\n        this.sequential._registerValue(schemeId, scheme);\n\n        break;\n\n      case 'diverging':\n        super.registerValue(schemeId, scheme);\n\n        this.diverging._registerValue(schemeId, scheme);\n\n        break;\n\n      default:}\n\n\n    return this;\n  }\n\n  registerLoader(schemeId, loader) {\n    const value = loader();\n\n    switch (value.type) {\n      case 'categorical':\n        super.registerLoader(schemeId, loader);\n\n        this.categorical._registerLoader(schemeId, loader);\n\n        break;\n\n      case 'sequential':\n        super.registerLoader(schemeId, loader);\n\n        this.sequential._registerLoader(schemeId, loader);\n\n        break;\n\n      case 'diverging':\n        super.registerLoader(schemeId, loader);\n\n        this.diverging._registerLoader(schemeId, loader);\n\n        break;\n\n      default:}\n\n\n    return this;\n  }}","map":null,"metadata":{},"sourceType":"module"}