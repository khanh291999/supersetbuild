{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select } from 'src/components/Select';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nexport default class OnPasteSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onPaste = this.onPaste.bind(this);\n  }\n\n  onPaste(evt) {\n    if (!this.props.isMulti) {\n      return;\n    }\n    evt.preventDefault();\n    const clipboard = evt.clipboardData.getData('Text');\n    if (!clipboard) {\n      return;\n    }\n    const regex = `[${this.props.separator}]+`;\n    const values = clipboard.split(new RegExp(regex)).map((v) => v.trim());\n    const validator = this.props.isValidNewOption;\n    const selected = this.props.value || [];\n    const existingOptions = {};\n    const existing = {};\n    this.props.options.forEach((v) => {\n      existingOptions[v[this.props.valueKey]] = 1;\n    });\n    let options = [];\n    selected.forEach((v) => {\n      options.push({ [this.props.labelKey]: v, [this.props.valueKey]: v });\n      existing[v] = 1;\n    });\n    options = options.concat(\n    values.\n    filter((v) => {\n      const notExists = !existing[v];\n      existing[v] = 1;\n      return (\n        notExists && (\n        validator ? validator({ [this.props.labelKey]: v }) : !!v));\n\n    }).\n    map((v) => {\n      const opt = { [this.props.labelKey]: v, [this.props.valueKey]: v };\n      if (!existingOptions[v]) {\n        this.props.options.unshift(opt);\n      }\n      return opt;\n    }));\n\n    if (options.length) {\n      if (this.props.onChange) {\n        this.props.onChange(options);\n      }\n    }\n  }\n\n  render() {\n    const { selectWrap: SelectComponent, ...restProps } = this.props;\n    return ___EmotionJSX(SelectComponent, _extends({}, restProps, { onPaste: this.onPaste }));\n  }}\n\n\nOnPasteSelect.propTypes = {\n  separator: PropTypes.array,\n  selectWrap: PropTypes.elementType,\n  selectRef: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  options: PropTypes.array,\n  isMulti: PropTypes.bool,\n  value: PropTypes.any,\n  isValidNewOption: PropTypes.func,\n  noResultsText: PropTypes.string,\n  forceOverflow: PropTypes.bool };\n\nOnPasteSelect.defaultProps = {\n  separator: [',', '\\n', '\\t', ';'],\n  selectWrap: Select,\n  valueKey: 'value',\n  labelKey: 'label',\n  options: [],\n  isMulti: false };","map":null,"metadata":{},"sourceType":"module"}