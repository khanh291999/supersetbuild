{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport Split from 'react-split';\nimport { t, styled, supersetTheme, withTheme } from '@superset-ui/core';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport StyledModal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport {\nDropdown,\nMenu as AntdMenu,\nMenu,\nSwitch,\nInput } from\n'src/common/components';\nimport Icons from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport {\naddQueryEditor,\nCtasEnum,\nestimateQueryCost,\npersistEditorHeight,\npostStopQuery,\nqueryEditorSetAutorun,\nqueryEditorSetQueryLimit,\nqueryEditorSetSql,\nqueryEditorSetTemplateParams,\nrunQuery,\nsaveQuery,\nscheduleQuery,\nsetActiveSouthPaneTab,\nupdateSavedQuery,\nvalidateQuery } from\n'src/SqlLab/actions/sqlLab';\nimport {\nSTATE_TYPE_MAP,\nSQL_EDITOR_GUTTER_HEIGHT,\nSQL_EDITOR_GUTTER_MARGIN,\nSQL_TOOLBAR_HEIGHT } from\n'src/SqlLab/constants';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport ConnectedSouthPane from '../SouthPane/state';\nimport SaveQuery from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst LIMIT_DROPDOWN = [10, 100, 1000, 10000, 100000];\nconst SQL_EDITOR_PADDING = 10;\nconst INITIAL_NORTH_PERCENT = 30;\nconst INITIAL_SOUTH_PERCENT = 70;\nconst SET_QUERY_EDITOR_SQL_DEBOUNCE_MS = 2000;\nconst VALIDATION_DEBOUNCE_MS = 600;\nconst WINDOW_RESIZE_THROTTLE_MS = 100;\n\nconst LimitSelectStyled = styled.span`\n  .ant-dropdown-trigger {\n    align-items: center;\n    color: black;\n    display: flex;\n    font-size: 12px;\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    text-decoration: none;\n    span {\n      display: inline-block;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      &:last-of-type: {\n        margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n      }\n    }\n  }\n`;\n\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background-color: @lightest;\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${supersetTheme.colors.grayscale.light2};\n  border-top: 0;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n`;\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  database: PropTypes.object,\n  latestQuery: PropTypes.object,\n  tables: PropTypes.array.isRequired,\n  editorQueries: PropTypes.array.isRequired,\n  dataPreviewQueries: PropTypes.array.isRequired,\n  queryEditorId: PropTypes.string.isRequired,\n  hideLeftBar: PropTypes.bool,\n  defaultQueryLimit: PropTypes.number.isRequired,\n  maxRow: PropTypes.number.isRequired,\n  displayLimit: PropTypes.number.isRequired,\n  saveQueryWarning: PropTypes.string,\n  scheduleQueryWarning: PropTypes.string };\n\n\nconst defaultProps = {\n  database: null,\n  latestQuery: null,\n  hideLeftBar: false,\n  scheduleQueryWarning: null };\n\n\nclass SqlEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    handleToggleAutocompleteEnabled = () => {\n      this.setState((prevState) => ({\n        autocompleteEnabled: !prevState.autocompleteEnabled }));\n\n    };this.state = { autorun: props.queryEditor.autorun, ctas: '', northPercent: props.queryEditor.northPercent || INITIAL_NORTH_PERCENT, southPercent: props.queryEditor.southPercent || INITIAL_SOUTH_PERCENT, sql: props.queryEditor.sql, autocompleteEnabled: true, showCreateAsModal: false, createAs: '' };this.sqlEditorRef = /*#__PURE__*/React.createRef();this.northPaneRef = /*#__PURE__*/React.createRef();this.elementStyle = this.elementStyle.bind(this);this.onResizeStart = this.onResizeStart.bind(this);this.onResizeEnd = this.onResizeEnd.bind(this);this.canValidateQuery = this.canValidateQuery.bind(this);this.runQuery = this.runQuery.bind(this);this.stopQuery = this.stopQuery.bind(this);this.onSqlChanged = this.onSqlChanged.bind(this);this.setQueryEditorSql = this.setQueryEditorSql.bind(this);this.setQueryEditorSqlWithDebounce = debounce(this.setQueryEditorSql.bind(this), SET_QUERY_EDITOR_SQL_DEBOUNCE_MS);this.queryPane = this.queryPane.bind(this);this.renderQueryLimit = this.renderQueryLimit.bind(this);this.getAceEditorAndSouthPaneHeights = this.getAceEditorAndSouthPaneHeights.bind(this);this.getSqlEditorHeight = this.getSqlEditorHeight.bind(this);this.requestValidation = debounce(this.requestValidation.bind(this), VALIDATION_DEBOUNCE_MS);this.getQueryCostEstimate = this.getQueryCostEstimate.bind(this);this.handleWindowResize = throttle(this.handleWindowResize.bind(this), WINDOW_RESIZE_THROTTLE_MS);this.onBeforeUnload = this.onBeforeUnload.bind(this);this.renderDropdown = this.renderDropdown.bind(this);}UNSAFE_componentWillMount() {if (this.state.autorun) {this.setState({ autorun: false });this.props.queryEditorSetAutorun(this.props.queryEditor, false);this.startQuery();}}componentDidMount() {// We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({ height: this.getSqlEditorHeight() });window.addEventListener('resize', this.handleWindowResize);window.addEventListener('beforeunload', this.onBeforeUnload); // setup hotkeys\n    const hotkeys = this.getHotkeyConfig();hotkeys.forEach((keyConfig) => {Mousetrap.bind([keyConfig.key], keyConfig.func);});}componentWillUnmount() {window.removeEventListener('resize', this.handleWindowResize);window.removeEventListener('beforeunload', this.onBeforeUnload);}onResizeStart() {// Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    document.getElementsByClassName('ace_content')[0].style.height = '100%';}onResizeEnd([northPercent, southPercent]) {this.setState({ northPercent, southPercent });if (this.northPaneRef.current && this.northPaneRef.current.clientHeight) {this.props.persistEditorHeight(this.props.queryEditor, northPercent, southPercent);}}onBeforeUnload(event) {var _this$props$database, _this$props$database$, _this$props$latestQue;if ((_this$props$database = this.props.database) != null && (_this$props$database$ = _this$props$database.extra_json) != null && _this$props$database$.cancel_query_on_windows_unload && ((_this$props$latestQue = this.props.latestQuery) == null ? void 0 : _this$props$latestQue.state) === 'running') {event.preventDefault();this.stopQuery();}}onSqlChanged(sql) {this.setState({ sql });this.setQueryEditorSqlWithDebounce(sql); // Request server-side validation of the query text\n    if (this.canValidateQuery()) {// NB. requestValidation is debounced\n      this.requestValidation();}} // One layer of abstraction for easy spying in unit tests\n  getSqlEditorHeight() {return this.sqlEditorRef.current ? this.sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2 : 0;} // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  getAceEditorAndSouthPaneHeights(height, northPercent, southPercent) {return { aceEditorHeight: height * northPercent / 100 - (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) - SQL_TOOLBAR_HEIGHT, southPaneHeight: height * southPercent / 100 - (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) };}getHotkeyConfig() {// Get the user's OS\n    const userOS = detectOS();return [{ name: 'runQuery1', key: 'ctrl+r', descr: t('Run query'), func: () => {if (this.state.sql.trim() !== '') {this.runQuery();}} }, { name: 'runQuery2', key: 'ctrl+enter', descr: t('Run query'), func: () => {if (this.state.sql.trim() !== '') {this.runQuery();}} }, { name: 'newTab', key: userOS === 'Windows' ? 'ctrl+q' : 'ctrl+t', descr: t('New tab'), func: () => {this.props.addQueryEditor({ ...this.props.queryEditor, title: t('Untitled query'), sql: '' });} }, { name: 'stopQuery', key: 'ctrl+x', descr: t('Stop query'), func: this.stopQuery }];}setQueryEditorSql(sql) {this.props.queryEditorSetSql(this.props.queryEditor, sql);}setQueryLimit(queryLimit) {this.props.queryEditorSetQueryLimit(this.props.queryEditor, queryLimit);}getQueryCostEstimate() {if (this.props.database) {const qe = this.props.queryEditor;const query = { dbId: qe.dbId, sql: qe.selectedText ? qe.selectedText : this.state.sql, sqlEditorId: qe.id, schema: qe.schema, templateParams: qe.templateParams };this.props.estimateQueryCost(query);}}handleWindowResize() {this.setState({ height: this.getSqlEditorHeight() });}elementStyle(dimension, elementSize, gutterSize) {return { [dimension]: `calc(${elementSize}% - ${gutterSize + SQL_EDITOR_GUTTER_MARGIN}px)` };}\n\n  requestValidation() {\n    if (this.props.database) {\n      const qe = this.props.queryEditor;\n      const query = {\n        dbId: qe.dbId,\n        sql: this.state.sql,\n        sqlEditorId: qe.id,\n        schema: qe.schema,\n        templateParams: qe.templateParams };\n\n      this.props.validateQuery(query);\n    }\n  }\n\n  canValidateQuery() {\n    // Check whether or not we can validate the current query based on whether\n    // or not the backend has a validator configured for it.\n    const validatorMap = window.featureFlags.SQL_VALIDATORS_BY_ENGINE;\n    if (this.props.database && validatorMap != null) {\n      return validatorMap.hasOwnProperty(this.props.database.backend);\n    }\n    return false;\n  }\n\n  runQuery() {\n    if (this.props.database) {\n      this.startQuery();\n    }\n  }\n\n  convertToNumWithSpaces(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n  }\n\n  startQuery(ctas = false, ctas_method = CtasEnum.TABLE) {\n    const qe = this.props.queryEditor;\n    const query = {\n      dbId: qe.dbId,\n      sql: qe.selectedText ? qe.selectedText : this.state.sql,\n      sqlEditorId: qe.id,\n      tab: qe.title,\n      schema: qe.schema,\n      tempTable: ctas ? this.state.ctas : '',\n      templateParams: qe.templateParams,\n      queryLimit: qe.queryLimit || this.props.defaultQueryLimit,\n      runAsync: this.props.database ?\n      this.props.database.allow_run_async :\n      false,\n      ctas,\n      ctas_method,\n      updateTabState: !qe.selectedText };\n\n    this.props.runQuery(query);\n    this.props.setActiveSouthPaneTab('Results');\n  }\n\n  stopQuery() {\n    if (\n    this.props.latestQuery &&\n    ['running', 'pending'].indexOf(this.props.latestQuery.state) >= 0)\n    {\n      this.props.postStopQuery(this.props.latestQuery);\n    }\n  }\n\n  createTableAs() {\n    this.startQuery(true, CtasEnum.TABLE);\n    this.setState({ showCreateAsModal: false, ctas: '' });\n  }\n\n  createViewAs() {\n    this.startQuery(true, CtasEnum.VIEW);\n    this.setState({ showCreateAsModal: false, ctas: '' });\n  }\n\n  ctasChanged(event) {\n    this.setState({ ctas: event.target.value });\n  }\n\n  queryPane() {\n    const hotkeys = this.getHotkeyConfig();\n    const {\n      aceEditorHeight,\n      southPaneHeight } =\n    this.getAceEditorAndSouthPaneHeights(\n    this.state.height,\n    this.state.northPercent,\n    this.state.southPercent);\n\n    return (\n      ___EmotionJSX(Split, {\n        expandToMin: true,\n        className: \"queryPane\",\n        sizes: [this.state.northPercent, this.state.southPercent],\n        elementStyle: this.elementStyle,\n        minSize: 200,\n        direction: \"vertical\",\n        gutterSize: SQL_EDITOR_GUTTER_HEIGHT,\n        onDragStart: this.onResizeStart,\n        onDragEnd: this.onResizeEnd },\n\n      ___EmotionJSX(\"div\", { ref: this.northPaneRef, className: \"north-pane\" },\n      ___EmotionJSX(AceEditorWrapper, {\n        actions: this.props.actions,\n        autocomplete: this.state.autocompleteEnabled,\n        onBlur: this.setQueryEditorSql,\n        onChange: this.onSqlChanged,\n        queryEditor: this.props.queryEditor,\n        sql: this.props.queryEditor.sql,\n        schemas: this.props.queryEditor.schemaOptions,\n        tables: this.props.queryEditor.tableOptions,\n        functionNames: this.props.queryEditor.functionNames,\n        extendedTables: this.props.tables,\n        height: `${aceEditorHeight}px`,\n        hotkeys: hotkeys }),\n\n      this.renderEditorBottomBar(hotkeys)),\n\n      ___EmotionJSX(ConnectedSouthPane, {\n        editorQueries: this.props.editorQueries,\n        latestQueryId: this.props.latestQuery && this.props.latestQuery.id,\n        dataPreviewQueries: this.props.dataPreviewQueries,\n        actions: this.props.actions,\n        height: southPaneHeight,\n        displayLimit: this.props.displayLimit,\n        defaultQueryLimit: this.props.defaultQueryLimit })));\n\n\n\n  }\n\n  renderDropdown() {var _this$props$latestQue2;\n    const qe = this.props.queryEditor;\n    const successful = ((_this$props$latestQue2 = this.props.latestQuery) == null ? void 0 : _this$props$latestQue2.state) === 'success';\n    const scheduleToolTip = successful ?\n    t('Schedule the query periodically') :\n    t('You must run the query successfully first');\n    return (\n      ___EmotionJSX(Menu, { onClick: this.handleMenuClick, style: { width: 176 } },\n      ___EmotionJSX(Menu.Item, { style: { display: 'flex', justifyContent: 'space-between' } },\n      ' ',\n      ___EmotionJSX(\"span\", null, t('Autocomplete')), ' ',\n      ___EmotionJSX(Switch, {\n        checked: this.state.autocompleteEnabled,\n        onChange: this.handleToggleAutocompleteEnabled,\n        name: \"autocomplete-switch\" }),\n      ' '),\n\n      isFeatureEnabled(FeatureFlag.ENABLE_TEMPLATE_PROCESSING) &&\n      ___EmotionJSX(Menu.Item, null,\n      ___EmotionJSX(TemplateParamsEditor, {\n        language: \"json\",\n        onChange: (params) => {\n          this.props.actions.queryEditorSetTemplateParams(qe, params);\n        },\n        code: qe.templateParams })),\n\n\n\n      isFeatureEnabled(FeatureFlag.SCHEDULED_QUERIES) &&\n      ___EmotionJSX(Menu.Item, null,\n      ___EmotionJSX(ScheduleQueryButton, {\n        defaultLabel: qe.title,\n        sql: qe.sql,\n        onSchedule: this.props.actions.scheduleQuery,\n        schema: qe.schema,\n        dbId: qe.dbId,\n        scheduleQueryWarning: this.props.scheduleQueryWarning,\n        tooltip: scheduleToolTip,\n        disabled: !successful }))));\n\n\n\n\n\n  }\n\n  renderQueryLimit() {\n    // Adding SQL_MAX_ROW value to dropdown\n    const { maxRow } = this.props;\n    LIMIT_DROPDOWN.push(maxRow);\n\n    return (\n      ___EmotionJSX(AntdMenu, null,\n      [...new Set(LIMIT_DROPDOWN)].map((limit) =>\n      ___EmotionJSX(AntdMenu.Item, {\n        key: `${limit}`,\n        onClick: () => this.setQueryLimit(limit) },\n\n\n      ___EmotionJSX(\"a\", { role: \"button\", styling: \"link\" },\n      this.convertToNumWithSpaces(limit)),\n      ' '))));\n\n\n\n\n  }\n\n  renderEditorBottomBar() {var _this$props$latestQue3;\n    const { queryEditor: qe } = this.props;\n\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } =\n    this.props.database || {};\n\n    const showMenu = allowCTAS || allowCVAS;\n    const { theme } = this.props;\n    const runMenuBtn =\n    ___EmotionJSX(Menu, null,\n    allowCTAS &&\n    ___EmotionJSX(Menu.Item, {\n      onClick: () => {\n        this.setState({\n          showCreateAsModal: true,\n          createAs: CtasEnum.TABLE });\n\n      },\n      key: \"1\" },\n\n    t('CREATE TABLE AS')),\n\n\n    allowCVAS &&\n    ___EmotionJSX(Menu.Item, {\n      onClick: () => {\n        this.setState({\n          showCreateAsModal: true,\n          createAs: CtasEnum.VIEW });\n\n      },\n      key: \"2\" },\n\n    t('CREATE VIEW AS')));\n\n\n\n\n    return (\n      ___EmotionJSX(StyledToolbar, { className: \"sql-toolbar\", id: \"js-sql-toolbar\" },\n      ___EmotionJSX(\"div\", { className: \"leftItems\" },\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(RunQueryActionButton, {\n        allowAsync:\n        this.props.database ?\n        this.props.database.allow_run_async :\n        false,\n\n        queryState: (_this$props$latestQue3 = this.props.latestQuery) == null ? void 0 : _this$props$latestQue3.state,\n        runQuery: this.runQuery,\n        selectedText: qe.selectedText,\n        stopQuery: this.stopQuery,\n        sql: this.state.sql,\n        overlayCreateAsMenu: showMenu ? runMenuBtn : null })),\n\n\n      isFeatureEnabled(FeatureFlag.ESTIMATE_QUERY_COST) &&\n      this.props.database &&\n      this.props.database.allows_cost_estimate &&\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(EstimateQueryCostButton, {\n        dbId: qe.dbId,\n        schema: qe.schema,\n        sql: qe.sql,\n        getEstimate: this.getQueryCostEstimate,\n        queryCostEstimate: qe.queryCostEstimate,\n        selectedText: qe.selectedText,\n        tooltip: t('Estimate the cost before running a query') })),\n\n\n\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(LimitSelectStyled, null,\n      ___EmotionJSX(Dropdown, { overlay: this.renderQueryLimit(), trigger: \"click\" },\n      ___EmotionJSX(\"a\", { onClick: (e) => e.preventDefault() },\n      ___EmotionJSX(\"span\", null, \"LIMIT:\"),\n      ___EmotionJSX(\"span\", null,\n      this.convertToNumWithSpaces(\n      this.props.queryEditor.queryLimit ||\n      this.props.defaultQueryLimit)),\n\n\n      ___EmotionJSX(Icons.TriangleDown, { iconColor: theme.colors.grayscale.base }))))),\n\n\n\n\n      this.props.latestQuery &&\n      ___EmotionJSX(Timer, {\n        startTime: this.props.latestQuery.startDttm,\n        endTime: this.props.latestQuery.endDttm,\n        state: STATE_TYPE_MAP[this.props.latestQuery.state],\n        isRunning: this.props.latestQuery.state === 'running' })),\n\n\n\n      ___EmotionJSX(\"div\", { className: \"rightItems\" },\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(SaveQuery, {\n        query: qe,\n        defaultLabel: qe.title || qe.description,\n        onSave: this.props.actions.saveQuery,\n        onUpdate: this.props.actions.updateSavedQuery,\n        saveQueryWarning: this.props.saveQueryWarning })),\n\n\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(ShareSqlLabQuery, { queryEditor: qe })),\n\n      ___EmotionJSX(Dropdown, { overlay: this.renderDropdown(), trigger: \"click\" },\n      ___EmotionJSX(Icons.MoreHoriz, { iconColor: theme.colors.grayscale.base })))));\n\n\n\n\n  }\n\n  render() {\n    const createViewModalTitle =\n    this.state.createAs === CtasEnum.VIEW ?\n    'CREATE VIEW AS' :\n    'CREATE TABLE AS';\n\n    const createModalPlaceHolder =\n    this.state.createAs === CtasEnum.VIEW ?\n    'Specify name to CREATE VIEW AS schema in: public' :\n    'Specify name to CREATE TABLE AS schema in: public';\n\n    const leftBarStateClass = this.props.hideLeftBar ?\n    'schemaPane-exit-done' :\n    'schemaPane-enter-done';\n    return (\n      ___EmotionJSX(\"div\", { ref: this.sqlEditorRef, className: \"SqlEditor\" },\n      ___EmotionJSX(CSSTransition, {\n        classNames: \"schemaPane\",\n        in: !this.props.hideLeftBar,\n        timeout: 300 },\n\n      ___EmotionJSX(\"div\", { className: `schemaPane ${leftBarStateClass}` },\n      ___EmotionJSX(SqlEditorLeftBar, {\n        database: this.props.database,\n        queryEditor: this.props.queryEditor,\n        tables: this.props.tables,\n        actions: this.props.actions }))),\n\n\n\n      this.queryPane(),\n      ___EmotionJSX(StyledModal, {\n        visible: this.state.showCreateAsModal,\n        title: t(createViewModalTitle),\n        onHide: () => {\n          this.setState({ showCreateAsModal: false });\n        },\n        footer:\n        ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(Button, {\n          onClick: () => this.setState({ showCreateAsModal: false }) }, \"Cancel\"),\n\n\n\n        this.state.createAs === CtasEnum.TABLE &&\n        ___EmotionJSX(Button, {\n          buttonStyle: \"primary\",\n          disabled: this.state.ctas.length === 0,\n          onClick: this.createTableAs.bind(this) }, \"Create\"),\n\n\n\n\n        this.state.createAs === CtasEnum.VIEW &&\n        ___EmotionJSX(Button, {\n          buttonStyle: \"primary\",\n          disabled: this.state.ctas.length === 0,\n          onClick: this.createViewAs.bind(this) }, \"Create\")) },\n\n\n\n\n\n\n\n      ___EmotionJSX(\"span\", null, \"Name\"),\n      ___EmotionJSX(Input, {\n        placeholder: createModalPlaceHolder,\n        onChange: this.ctasChanged.bind(this) }))));\n\n\n\n\n  }}\n\nSqlEditor.defaultProps = defaultProps;\nSqlEditor.propTypes = propTypes;\n\nfunction mapStateToProps(state, props) {\n  const { sqlLab } = state;\n  const queryEditor = sqlLab.queryEditors.find(\n  (editor) => editor.id === props.queryEditorId);\n\n\n  return { sqlLab, ...props, queryEditor };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n  {\n    addQueryEditor,\n    estimateQueryCost,\n    persistEditorHeight,\n    postStopQuery,\n    queryEditorSetAutorun,\n    queryEditorSetQueryLimit,\n    queryEditorSetSql,\n    queryEditorSetTemplateParams,\n    runQuery,\n    saveQuery,\n    scheduleQuery,\n    setActiveSouthPaneTab,\n    updateSavedQuery,\n    validateQuery },\n\n  dispatch);\n\n}\n\nconst themedSqlEditor = withTheme(SqlEditor);\nexport default connect(mapStateToProps, mapDispatchToProps)(themedSqlEditor);","map":null,"metadata":{},"sourceType":"module"}