{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { t, supersetTheme, ThemeProvider } from '@superset-ui/core';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport throttle from 'lodash/throttle';\nimport ToastContainer from 'src/components/MessageToasts/ToastContainer';\nimport {\nLOCALSTORAGE_MAX_USAGE_KB,\nLOCALSTORAGE_WARNING_THRESHOLD,\nLOCALSTORAGE_WARNING_MESSAGE_THROTTLE_MS } from\n'src/SqlLab/constants';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\nimport TabbedSqlEditors from '../TabbedSqlEditors';\nimport QueryAutoRefresh from '../QueryAutoRefresh';\nimport QuerySearch from '../QuerySearch';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hash: window.location.hash };\n\n\n    this.showLocalStorageUsageWarning = throttle(\n    this.showLocalStorageUsageWarning,\n    LOCALSTORAGE_WARNING_MESSAGE_THROTTLE_MS,\n    { trailing: false });\n\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', this.onHashChanged.bind(this));\n  }\n\n  componentDidUpdate() {\n    if (\n    this.props.localStorageUsageInKilobytes >=\n    LOCALSTORAGE_WARNING_THRESHOLD * LOCALSTORAGE_MAX_USAGE_KB)\n    {\n      this.showLocalStorageUsageWarning(\n      this.props.localStorageUsageInKilobytes);\n\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('hashchange', this.onHashChanged.bind(this));\n  }\n\n  onHashChanged() {\n    this.setState({ hash: window.location.hash });\n  }\n\n  showLocalStorageUsageWarning(currentUsage) {\n    this.props.actions.addDangerToast(\n    t(\n    \"SQL Lab uses your browser's local storage to store queries and results.\" +\n    `\\n Currently, you are using ${currentUsage.toFixed(\n    2)\n    } KB out of ${LOCALSTORAGE_MAX_USAGE_KB} KB. storage space.` +\n    '\\n To keep SQL Lab from crashing, please delete some query tabs.' +\n    '\\n You can re-access these queries by using the Save feature before you delete the tab. ' +\n    'Note that you will need to close other SQL Lab windows before you do this.'));\n\n\n  }\n\n  render() {\n    let content;\n    if (this.state.hash && this.state.hash === '#search') {\n      if (isFeatureEnabled(FeatureFlag.ENABLE_REACT_CRUD_VIEWS)) {\n        return window.location.replace('/superset/sqllab/history/');\n      }\n      content =\n      ___EmotionJSX(QuerySearch, {\n        actions: this.props.actions,\n        displayLimit: this.props.common.conf.DISPLAY_MAX_ROW });\n\n\n    } else {\n      content =\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(QueryAutoRefresh, null),\n      ___EmotionJSX(TabbedSqlEditors, null));\n\n\n    }\n    return (\n      ___EmotionJSX(ThemeProvider, { theme: supersetTheme },\n      ___EmotionJSX(\"div\", { className: \"App SqlLab\" },\n      content,\n      ___EmotionJSX(ToastContainer, null))));\n\n\n\n  }}\n\n\nApp.propTypes = {\n  actions: PropTypes.object,\n  common: PropTypes.object,\n  localStorageUsageInKilobytes: PropTypes.number.isRequired };\n\n\nfunction mapStateToProps(state) {\n  const { common, localStorageUsageInKilobytes } = state;\n  return {\n    common,\n    localStorageUsageInKilobytes };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch) };\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":null,"metadata":{},"sourceType":"module"}