{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default class WithPopoverMenu extends React.PureComponent {\n\n\n\n\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props);this.container = void 0;\n    this.state = {\n      isFocused: props.isFocused };\n\n    this.setRef = this.setRef.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.editMode && nextProps.isFocused && !this.state.isFocused) {\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState({ isFocused: true });\n    } else\n    if (this.state.isFocused && !nextProps.editMode) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState({ isFocused: false });\n    }\n  }\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClick);\n    document.removeEventListener('drag', this.handleClick);\n  }\n  setRef(ref) {\n    this.container = ref;\n  }\n  handleClick(event) {\n    if (!this.props.editMode) {\n      return;\n    }\n    const { onChangeFocus, shouldFocus: shouldFocusFunc, disableClick } = this.props;\n    const shouldFocus = shouldFocusFunc(event, this.container);\n    if (!disableClick && shouldFocus && !this.state.isFocused) {\n      // if not focused, set focus and add a window event listener to capture outside clicks\n      // this enables us to not set a click listener for ever item on a dashboard\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: true }));\n      if (onChangeFocus) {\n        onChangeFocus(true);\n      }\n    } else\n    if (!shouldFocus && this.state.isFocused) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: false }));\n      if (onChangeFocus) {\n        onChangeFocus(false);\n      }\n    }\n  }\n  render() {var _menuItems$length;\n    const { children, menuItems, editMode, style } = this.props;\n    const { isFocused } = this.state;\n    return ___EmotionJSX(\"div\", { ref: this.setRef, onClick: this.handleClick, role: \"none\", className: cx('with-popover-menu', editMode && isFocused && 'with-popover-menu--focused'), style: style },\n    children,\n    editMode && isFocused && ((_menuItems$length = menuItems == null ? void 0 : menuItems.length) != null ? _menuItems$length : 0) > 0 && ___EmotionJSX(\"div\", { className: \"popover-menu\" },\n    menuItems.map((node, i) => ___EmotionJSX(\"div\", { className: \"menu-item\", key: `menu-item-${i}` },\n    node))));\n\n\n\n  }}WithPopoverMenu.defaultProps = { children: null, disableClick: false, onChangeFocus: null, menuItems: [], isFocused: false, shouldFocus: (event, container) => {var _event$target$parentN;return (container == null ? void 0 : container.contains(event.target)) || event.target.id === 'menu-item' || ((_event$target$parentN = event.target.parentNode) == null ? void 0 : _event$target$parentN.id) === 'menu-item';}, style: null };","map":null,"metadata":{},"sourceType":"module"}