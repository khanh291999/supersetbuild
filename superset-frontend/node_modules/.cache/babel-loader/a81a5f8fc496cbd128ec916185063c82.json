{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, Dropdown } from 'src/common/components';\nimport Button from 'src/components/Button';\nimport { t, styled } from '@superset-ui/core';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { CssEditor as AceCssEditor } from 'src/components/AsyncAceEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst StyledWrapper = styled.div`\n  ${({ theme }) => `\n    .css-editor-header {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      margin-bottom: ${theme.gridUnit * 2}px;\n\n      h5 {\n        margin-top: ${theme.gridUnit}px;\n      }\n    }\n    .css-editor {\n      border: 1px solid ${theme.colors.grayscale.light1};\n    }\n  `}\n`;\n\nconst propTypes = {\n  initialCss: PropTypes.string,\n  triggerNode: PropTypes.node.isRequired,\n  onChange: PropTypes.func,\n  templates: PropTypes.array };\n\n\nconst defaultProps = {\n  initialCss: '',\n  onChange: () => {} };\n\n\nclass CssEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.initialCss };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeCssTemplate = this.changeCssTemplate.bind(this);\n  }\n\n  componentDidMount() {\n    AceCssEditor.preload();\n  }\n\n  changeCss(css) {\n    this.setState({ css }, () => {\n      this.props.onChange(css);\n    });\n  }\n\n  changeCssTemplate({ key }) {\n    this.changeCss(key);\n  }\n\n  renderTemplateSelector() {\n    if (this.props.templates) {\n      const menu =\n      ___EmotionJSX(Menu, { onClick: this.changeCssTemplate },\n      this.props.templates.map((template) =>\n      ___EmotionJSX(Menu.Item, { key: template.css }, template.label)));\n\n\n\n\n      return (\n        ___EmotionJSX(Dropdown, { overlay: menu, placement: \"bottomRight\" },\n        ___EmotionJSX(Button, null, t('Load a CSS template'))));\n\n\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(ModalTrigger, {\n        triggerNode: this.props.triggerNode,\n        modalTitle: t('CSS'),\n        modalBody:\n        ___EmotionJSX(StyledWrapper, null,\n        ___EmotionJSX(\"div\", { className: \"css-editor-header\" },\n        ___EmotionJSX(\"h5\", null, t('Live CSS editor')),\n        this.renderTemplateSelector()),\n\n        ___EmotionJSX(AceCssEditor, {\n          className: \"css-editor\",\n          minLines: 12,\n          maxLines: 30,\n          onChange: this.changeCss,\n          height: \"200px\",\n          width: \"100%\",\n          editorProps: { $blockScrolling: true },\n          enableLiveAutocompletion: true,\n          value: this.state.css || '' })) }));\n\n\n\n\n\n  }}\n\n\nCssEditor.propTypes = propTypes;\nCssEditor.defaultProps = defaultProps;\n\nexport default CssEditor;","map":null,"metadata":{},"sourceType":"module"}