{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Split from 'react-split';\nimport { styled, SupersetClient, useTheme } from '@superset-ui/core';\nimport { useResizeDetector } from 'react-resize-detector';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport ChartContainer from 'src/chart/ChartContainer';\nimport {\ngetFromLocalStorage,\nsetInLocalStorage } from\n'src/utils/localStorageHelpers';\nimport ConnectedExploreChartHeader from './ExploreChartHeader';\nimport { DataTablesPane } from './DataTablesPane';\nimport { buildV1ChartDataPayload } from '../exploreUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  addHistory: PropTypes.func,\n  onQuery: PropTypes.func,\n  can_overwrite: PropTypes.bool.isRequired,\n  can_download: PropTypes.bool.isRequired,\n  datasource: PropTypes.object,\n  dashboardId: PropTypes.number,\n  column_formats: PropTypes.object,\n  containerId: PropTypes.string.isRequired,\n  height: PropTypes.string.isRequired,\n  width: PropTypes.string.isRequired,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  vizType: PropTypes.string.isRequired,\n  form_data: PropTypes.object,\n  ownState: PropTypes.object,\n  standalone: PropTypes.number,\n  timeout: PropTypes.number,\n  refreshOverlayVisible: PropTypes.bool,\n  chart: chartPropShape,\n  errorMessage: PropTypes.node,\n  triggerRender: PropTypes.bool };\n\n\nconst GUTTER_SIZE_FACTOR = 1.25;\n\nconst CHART_PANEL_PADDING_HORIZ = 30;\nconst CHART_PANEL_PADDING_VERTICAL = 15;\nconst HEADER_PADDING = 15;\n\nconst STORAGE_KEYS = {\n  sizes: 'chart_split_sizes' };\n\n\nconst INITIAL_SIZES = [90, 10];\nconst MIN_SIZES = [300, 50];\nconst DEFAULT_SOUTH_PANE_HEIGHT_PERCENT = 40;\n\nconst Styles = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  align-content: stretch;\n  overflow: auto;\n  box-shadow: none;\n  height: 100%;\n\n  & > div:last-of-type {\n    flex-basis: 100%;\n  }\n\n  .gutter {\n    border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    width: ${({ theme }) => theme.gridUnit * 9}px;\n    margin: ${({ theme }) => theme.gridUnit * GUTTER_SIZE_FACTOR}px auto;\n  }\n\n  .gutter.gutter-vertical {\n    cursor: row-resize;\n  }\n\n  .ant-collapse {\n    .ant-tabs {\n      height: 100%;\n      .ant-tabs-nav {\n        padding-left: ${({ theme }) => theme.gridUnit * 5}px;\n        margin: 0;\n      }\n      .ant-tabs-content-holder {\n        overflow: hidden;\n        .ant-tabs-content {\n          height: 100%;\n        }\n      }\n    }\n  }\n`;\n\nconst ExploreChartPanel = (props) => {\n  const theme = useTheme();\n  const gutterMargin = theme.gridUnit * GUTTER_SIZE_FACTOR;\n  const gutterHeight = theme.gridUnit * GUTTER_SIZE_FACTOR;\n  const { height: hHeight, ref: headerRef } = useResizeDetector({\n    refreshMode: 'debounce',\n    refreshRate: 300 });\n\n  const { width: chartPanelWidth, ref: chartPanelRef } = useResizeDetector({\n    refreshMode: 'debounce',\n    refreshRate: 300 });\n\n  const [splitSizes, setSplitSizes] = useState(\n  getFromLocalStorage(STORAGE_KEYS.sizes, INITIAL_SIZES));\n\n  const { slice } = props;\n  const updateQueryContext = useCallback(\n  async function fetchChartData() {\n    if (slice && slice.query_context === null) {\n      const queryContext = buildV1ChartDataPayload({\n        formData: slice.form_data,\n        force: false,\n        resultFormat: 'json',\n        resultType: 'full',\n        setDataMask: null,\n        ownState: null });\n\n\n      await SupersetClient.put({\n        endpoint: `/api/v1/chart/${slice.slice_id}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          query_context: JSON.stringify(queryContext),\n          query_context_generation: true }) });\n\n\n    }\n  },\n  [slice]);\n\n\n  useEffect(() => {\n    updateQueryContext();\n  }, [updateQueryContext]);\n\n  const calcSectionHeight = useCallback(\n  (percent) => {\n    let headerHeight;\n    if (props.standalone) {\n      headerHeight = 0;\n    } else if (hHeight) {\n      headerHeight = hHeight + HEADER_PADDING;\n    } else {\n      headerHeight = 50;\n    }\n    const containerHeight = parseInt(props.height, 10) - headerHeight;\n    return (\n      containerHeight * percent / 100 - (gutterHeight / 2 + gutterMargin));\n\n  },\n  [gutterHeight, gutterMargin, props.height, props.standalone, hHeight]);\n\n\n  const [tableSectionHeight, setTableSectionHeight] = useState(\n  calcSectionHeight(INITIAL_SIZES[1]));\n\n\n  const recalcPanelSizes = useCallback(\n  ([, southPercent]) => {\n    setTableSectionHeight(calcSectionHeight(southPercent));\n  },\n  [calcSectionHeight]);\n\n\n  useEffect(() => {\n    recalcPanelSizes(splitSizes);\n  }, [recalcPanelSizes, splitSizes]);\n\n  useEffect(() => {\n    setInLocalStorage(STORAGE_KEYS.sizes, splitSizes);\n  }, [splitSizes]);\n\n  const onDragEnd = (sizes) => {\n    setSplitSizes(sizes);\n  };\n\n  const onCollapseChange = (openPanelName) => {\n    let splitSizes;\n    if (!openPanelName) {\n      splitSizes = INITIAL_SIZES;\n    } else {\n      splitSizes = [\n      100 - DEFAULT_SOUTH_PANE_HEIGHT_PERCENT,\n      DEFAULT_SOUTH_PANE_HEIGHT_PERCENT];\n\n    }\n    setSplitSizes(splitSizes);\n  };\n  const renderChart = useCallback(() => {\n    const { chart, vizType } = props;\n    const newHeight =\n    vizType === 'filter_box' ?\n    calcSectionHeight(100) - CHART_PANEL_PADDING_VERTICAL :\n    calcSectionHeight(splitSizes[0]) - CHART_PANEL_PADDING_VERTICAL;\n    const chartWidth = chartPanelWidth - CHART_PANEL_PADDING_HORIZ;\n    return (\n      chartWidth > 0 &&\n      ___EmotionJSX(ChartContainer, {\n        width: Math.floor(chartWidth),\n        height: newHeight,\n        ownState: props.ownState,\n        annotationData: chart.annotationData,\n        chartAlert: chart.chartAlert,\n        chartStackTrace: chart.chartStackTrace,\n        chartId: chart.id,\n        chartStatus: chart.chartStatus,\n        triggerRender: props.triggerRender,\n        datasource: props.datasource,\n        errorMessage: props.errorMessage,\n        formData: props.form_data,\n        onQuery: props.onQuery,\n        queriesResponse: chart.queriesResponse,\n        refreshOverlayVisible: props.refreshOverlayVisible,\n        setControlValue: props.actions.setControlValue,\n        timeout: props.timeout,\n        triggerQuery: chart.triggerQuery,\n        vizType: props.vizType }));\n\n\n\n  }, [calcSectionHeight, chartPanelWidth, props, splitSizes]);\n\n  const panelBody = useMemo(\n  () =>\n  ___EmotionJSX(\"div\", { className: \"panel-body\", ref: chartPanelRef },\n  renderChart()),\n\n\n  [chartPanelRef, renderChart]);\n\n\n  const standaloneChartBody = useMemo(\n  () => ___EmotionJSX(\"div\", { ref: chartPanelRef }, renderChart()),\n  [chartPanelRef, renderChart]);\n\n\n  const [queryFormData, setQueryFormData] = useState(\n  props.chart.latestQueryFormData);\n\n\n  useEffect(() => {\n    // only update when `latestQueryFormData` changes AND `triggerRender`\n    // is false. No update should be done when only `triggerRender` changes,\n    // as this can trigger a query downstream based on incomplete form data.\n    // (`latestQueryFormData` is only updated when a a valid request has been\n    // triggered).\n    if (!props.triggerRender) {\n      setQueryFormData(props.chart.latestQueryFormData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.chart.latestQueryFormData]);\n\n  if (props.standalone) {\n    // dom manipulation hack to get rid of the boostrap theme's body background\n    const standaloneClass = 'background-transparent';\n    const bodyClasses = document.body.className.split(' ');\n    if (!bodyClasses.includes(standaloneClass)) {\n      document.body.className += ` ${standaloneClass}`;\n    }\n    return standaloneChartBody;\n  }\n\n  const header =\n  ___EmotionJSX(ConnectedExploreChartHeader, {\n    ownState: props.ownState,\n    actions: props.actions,\n    addHistory: props.addHistory,\n    can_overwrite: props.can_overwrite,\n    can_download: props.can_download,\n    dashboardId: props.dashboardId,\n    isStarred: props.isStarred,\n    slice: props.slice,\n    sliceName: props.sliceName,\n    table_name: props.table_name,\n    form_data: props.form_data,\n    timeout: props.timeout,\n    chart: props.chart,\n    user: props.user,\n    reports: props.reports });\n\n\n\n  const elementStyle = (dimension, elementSize, gutterSize) => ({\n    [dimension]: `calc(${elementSize}% - ${gutterSize + gutterMargin}px)` });\n\n\n  return (\n    ___EmotionJSX(Styles, { className: \"panel panel-default chart-container\", ref: chartPanelRef },\n    ___EmotionJSX(\"div\", { className: \"panel-heading\", ref: headerRef },\n    header),\n\n    props.vizType === 'filter_box' ?\n    panelBody :\n\n    ___EmotionJSX(Split, {\n      sizes: splitSizes,\n      minSize: MIN_SIZES,\n      direction: \"vertical\",\n      gutterSize: gutterHeight,\n      onDragEnd: onDragEnd,\n      elementStyle: elementStyle },\n\n    panelBody,\n    ___EmotionJSX(DataTablesPane, {\n      ownState: props.ownState,\n      queryFormData: queryFormData,\n      tableSectionHeight: tableSectionHeight,\n      onCollapseChange: onCollapseChange,\n      chartStatus: props.chart.chartStatus,\n      errorMessage: props.errorMessage,\n      queriesResponse: props.chart.queriesResponse }))));\n\n\n\n\n\n};\n\nExploreChartPanel.propTypes = propTypes;\n\nexport default ExploreChartPanel;","map":null,"metadata":{},"sourceType":"module"}