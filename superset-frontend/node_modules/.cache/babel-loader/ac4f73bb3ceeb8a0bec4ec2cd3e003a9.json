{"ast":null,"code":"import _debounce from \"lodash/debounce\";import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputNumber } from 'src/common/components';\nimport { t, styled } from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.array };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  value: [null, null] };\n\n\nconst StyledDiv = styled.div`\n  display: flex;\n`;\n\nconst MinInput = styled(InputNumber)`\n  flex: 1;\n  margin-right: ${({ theme }) => theme.gridUnit}px;\n`;\n\nconst MaxInput = styled(InputNumber)`\n  flex: 1;\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n\nexport default class BoundsControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minMax: [\n      Number.isNaN(this.props.value[0]) ? '' : props.value[0],\n      Number.isNaN(this.props.value[1]) ? '' : props.value[1]] };\n\n\n    this.onChange = _debounce(this.onChange.bind(this), 300);\n    this.onMinChange = this.onMinChange.bind(this);\n    this.onMaxChange = this.onMaxChange.bind(this);\n    this.update = this.update.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!_isEqual(prevProps.value, this.props.value)) {\n      this.update();\n    }\n  }\n\n  update() {\n    this.setState({\n      minMax: [\n      Number.isNaN(this.props.value[0]) ? '' : this.props.value[0],\n      Number.isNaN(this.props.value[1]) ? '' : this.props.value[1]] });\n\n\n  }\n\n  onMinChange(value) {\n    this.setState(\n    (prevState) => ({\n      minMax: [value, prevState.minMax[1]] }),\n\n    this.onChange);\n\n  }\n\n  onMaxChange(value) {\n    this.setState(\n    (prevState) => ({\n      minMax: [prevState.minMax[0], value] }),\n\n    this.onChange);\n\n  }\n\n  onChange() {\n    const mm = this.state.minMax;\n    const min = Number.isNaN(parseFloat(mm[0])) ? null : parseFloat(mm[0]);\n    const max = Number.isNaN(parseFloat(mm[1])) ? null : parseFloat(mm[1]);\n    this.props.onChange([min, max]);\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, this.props),\n      ___EmotionJSX(StyledDiv, null,\n      ___EmotionJSX(MinInput, {\n\n        placeholder: t('Min'),\n        onChange: this.onMinChange,\n        value: this.state.minMax[0] }),\n\n      ___EmotionJSX(MaxInput, {\n\n        placeholder: t('Max'),\n        onChange: this.onMaxChange,\n        value: this.state.minMax[1] }))));\n\n\n\n\n  }}\n\n\nBoundsControl.propTypes = propTypes;\nBoundsControl.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}