{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dialogClassName: PropTypes.string,\n  triggerNode: PropTypes.node.isRequired,\n  modalTitle: PropTypes.node,\n  modalBody: PropTypes.node, // not required because it can be generated by beforeOpen\n  modalFooter: PropTypes.node,\n  beforeOpen: PropTypes.func,\n  onExit: PropTypes.func,\n  isButton: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.string,\n  width: PropTypes.string,\n  maxWidth: PropTypes.string,\n  responsive: PropTypes.bool,\n  resizable: PropTypes.bool,\n  resizableConfig: PropTypes.object,\n  draggable: PropTypes.bool,\n  draggableConfig: PropTypes.object };\n\n\nconst defaultProps = {\n  beforeOpen: () => {},\n  onExit: () => {},\n  isButton: false,\n  className: '',\n  modalTitle: '',\n  resizable: false,\n  draggable: false };\n\n\nexport default class ModalTrigger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false };\n\n    this.open = this.open.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  close() {\n    this.setState(() => ({ showModal: false }));\n  }\n\n  open(e) {\n    e.preventDefault();\n    this.props.beforeOpen();\n    this.setState(() => ({ showModal: true }));\n  }\n\n  renderModal() {\n    return (\n      ___EmotionJSX(Modal, {\n        wrapClassName: this.props.dialogClassName,\n        className: this.props.className,\n        show: this.state.showModal,\n        onHide: this.close,\n        afterClose: this.props.onExit,\n        title: this.props.modalTitle,\n        footer: this.props.modalFooter,\n        hideFooter: !this.props.modalFooter,\n        width: this.props.width,\n        maxWidth: this.props.maxWidth,\n        responsive: this.props.responsive,\n        resizable: this.props.resizable,\n        resizableConfig: this.props.resizableConfig,\n        draggable: this.props.draggable,\n        draggableConfig: this.props.draggableConfig },\n\n      this.props.modalBody));\n\n\n  }\n\n  render() {\n    if (this.props.isButton) {\n      return (\n        ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(Button, {\n          className: \"modal-trigger\",\n\n          tooltip: this.props.tooltip,\n          onClick: this.open },\n\n        this.props.triggerNode),\n\n        this.renderModal()));\n\n\n    }\n    /* eslint-disable jsx-a11y/interactive-supports-focus */\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"span\", { onClick: this.open, role: \"button\" },\n      this.props.triggerNode),\n\n      this.renderModal()));\n\n\n  }}\n\n\nModalTrigger.propTypes = propTypes;\nModalTrigger.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}