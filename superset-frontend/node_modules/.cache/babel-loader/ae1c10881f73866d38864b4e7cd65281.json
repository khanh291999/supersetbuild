{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport Button from 'src/components/Button';\nimport Select from 'src/components/Select';\nimport { styled, t, SupersetClient } from '@superset-ui/core';\n\nimport Loading from 'src/components/Loading';\nimport { now, epochTimeXHoursAgo, epochTimeXDaysAgo, epochTimeXYearsAgo } from 'src/modules/dates';\nimport AsyncSelect from 'src/components/AsyncSelect';\nimport { STATUS_OPTIONS, TIME_OPTIONS } from 'src/SqlLab/constants';\nimport QueryTable from '../QueryTable';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TableWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  height: 100%;\n`;\nconst TableStyles = styled.div`\n  table {\n    background-color: ${({ theme }) => theme.colors.grayscale.light4};\n  }\n\n  .table > thead > tr > th {\n    border-bottom: ${({ theme }) => theme.gridUnit / 2}px solid\n      ${({ theme }) => theme.colors.grayscale.light2};\n    background: ${({ theme }) => theme.colors.grayscale.light4};\n  }\n`;\nconst StyledTableStylesContainer = styled.div`\n  overflow: auto;\n`;\nfunction QuerySearch({ actions, displayLimit }) {\n  const [databaseId, setDatabaseId] = useState('');\n  const [userId, setUserId] = useState('');\n  const [searchText, setSearchText] = useState('');\n  const [from, setFrom] = useState('28 days ago');\n  const [to, setTo] = useState('now');\n  const [status, setStatus] = useState('success');\n  const [queriesArray, setQueriesArray] = useState([]);\n  const [queriesLoading, setQueriesLoading] = useState(true);\n  const getTimeFromSelection = (selection) => {\n    switch (selection) {\n      case 'now':\n        return now();\n      case '1 hour ago':\n        return epochTimeXHoursAgo(1);\n      case '1 day ago':\n        return epochTimeXDaysAgo(1);\n      case '7 days ago':\n        return epochTimeXDaysAgo(7);\n      case '28 days ago':\n        return epochTimeXDaysAgo(28);\n      case '90 days ago':\n        return epochTimeXDaysAgo(90);\n      case '1 year ago':\n        return epochTimeXYearsAgo(1);\n      default:\n        return null;}\n\n  };\n  const insertParams = (baseUrl, params) => {\n    const validParams = params.filter(function (p) {\n      return p !== '';\n    });\n    return `${baseUrl}?${validParams.join('&')}`;\n  };\n  const refreshQueries = async () => {\n    setQueriesLoading(true);\n    const params = [\n    userId && `user_id=${userId}`,\n    databaseId && `database_id=${databaseId}`,\n    searchText && `search_text=${searchText}`,\n    status && `status=${status}`,\n    from && `from=${getTimeFromSelection(from)}`,\n    to && `to=${getTimeFromSelection(to)}`];\n\n    try {\n      const response = await SupersetClient.get({\n        endpoint: insertParams('/superset/search_queries', params) });\n\n      const queries = Object.values(response.json);\n      setQueriesArray(queries);\n    }\n    catch (err) {\n      actions.addDangerToast(t('An error occurred when refreshing queries'));\n    } finally\n    {\n      setQueriesLoading(false);\n    }\n  };\n  useEffect(() => {\n    refreshQueries();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const onUserClicked = (userId) => {\n    setUserId(userId);\n    refreshQueries();\n  };\n  const onDbClicked = (dbId) => {\n    setDatabaseId(dbId);\n    refreshQueries();\n  };\n  const onKeyDown = (event) => {\n    if (event.keyCode === 13) {\n      refreshQueries();\n    }\n  };\n  const onChange = (e) => {\n    e.persist();\n    const handleChange = _debounce((e) => {\n      setSearchText(e.target.value);\n    }, 200);\n    handleChange(e);\n  };\n  const userMutator = ({ result }) => result.map(({ value, text }) => ({\n    label: text,\n    value }));\n\n  const dbMutator = ({ result }) => {\n    const options = result.map(({ id, database_name }) => ({\n      value: id,\n      label: database_name }));\n\n    actions.setDatabases(result);\n    if (result.length === 0) {\n      actions.addDangerToast(t(\"It seems you don't have access to any database\"));\n    }\n    return options;\n  };\n  return ___EmotionJSX(TableWrapper, null,\n  ___EmotionJSX(\"div\", { id: \"search-header\", className: \"row space-1\" },\n  ___EmotionJSX(\"div\", { className: \"col-sm-2\" },\n  ___EmotionJSX(AsyncSelect, { dataEndpoint: \"api/v1/query/related/user\", mutator: userMutator, value: userId, onChange: (selected) => setUserId(selected == null ? void 0 : selected.value), placeholder: t('Filter by user') })),\n\n  ___EmotionJSX(\"div\", { className: \"col-sm-2\" },\n  ___EmotionJSX(AsyncSelect, { onChange: (db) => setDatabaseId(db == null ? void 0 : db.value), dataEndpoint: \"/api/v1/database/?q=(filters:!((col:expose_in_sqllab,opr:eq,value:!t)))\", value: databaseId, mutator: dbMutator, placeholder: t('Filter by database') })),\n\n  ___EmotionJSX(\"div\", { className: \"col-sm-4\" },\n  ___EmotionJSX(\"input\", { type: \"text\", onChange: onChange, onKeyDown: onKeyDown, className: \"form-control input-sm\", placeholder: t('Query search string') })),\n\n  ___EmotionJSX(\"div\", { className: \"col-sm-4 search-date-filter-container\" },\n  ___EmotionJSX(Select, { name: \"select-from\", placeholder: t('[From]-'), options: TIME_OPTIONS.slice(1, TIME_OPTIONS.length).map((xt) => ({\n      value: xt,\n      label: xt })),\n    value: from, autosize: false, onChange: (selected) => setFrom(selected == null ? void 0 : selected.value) }),\n\n  ___EmotionJSX(Select, { name: \"select-to\", placeholder: t('[To]-'), options: TIME_OPTIONS.map((xt) => ({ value: xt, label: xt })), value: to, autosize: false, onChange: (selected) => setTo(selected == null ? void 0 : selected.value) }),\n\n  ___EmotionJSX(Select, { name: \"select-status\", placeholder: t('Filter by status'), options: Object.keys(STATUS_OPTIONS).map((s) => ({\n      value: s,\n      label: s })),\n    value: status, isLoading: false, autosize: false, onChange: (selected) => setStatus(selected == null ? void 0 : selected.value) }),\n\n  ___EmotionJSX(Button, { buttonSize: \"small\", buttonStyle: \"success\", onClick: refreshQueries },\n  t('Search')))),\n\n\n\n  ___EmotionJSX(StyledTableStylesContainer, null,\n  queriesLoading ? ___EmotionJSX(Loading, null) : ___EmotionJSX(TableStyles, null,\n  ___EmotionJSX(QueryTable, { columns: [\n    'state',\n    'db',\n    'user',\n    'time',\n    'progress',\n    'rows',\n    'sql',\n    'querylink'],\n    onUserClicked: onUserClicked, onDbClicked: onDbClicked, queries: queriesArray, actions: actions, displayLimit: displayLimit }))));\n\n\n\n}\nexport default QuerySearch;","map":null,"metadata":{},"sourceType":"module"}