{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { setFilterSetsConfiguration } from 'src/dashboard/actions/nativeFilters';\nimport { areObjectsEqual } from 'src/reduxUtils';\nimport { findExistingFilterSet, generateFiltersSetId } from './utils';\nimport { useFilters, useNativeFiltersDataMask, useFilterSets } from '../state';\nimport Footer from './Footer';\nimport FilterSetUnit from './FilterSetUnit';\nimport { getFilterBarTestId } from '..';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FilterSetsWrapper = styled.div`\n  display: grid;\n  align-items: center;\n  justify-content: center;\n  grid-template-columns: 1fr;\n  padding: ${({ theme }) => theme.gridUnit * 2}px\n    ${({ theme }) => theme.gridUnit * 4}px;\n\n  & button.superset-button {\n    margin-left: 0;\n  }\n  & input {\n    width: 100%;\n  }\n`;\nconst FilterSetUnitWrapper = styled.div`\n  ${({ theme, 'data-selected': selected, onClick }) => `\n    display: grid;\n    align-items: center;\n    justify-content: center;\n    grid-template-columns: 1fr;\n    grid-gap: ${theme.gridUnit}px;\n    border-bottom: 1px solid ${theme.colors.grayscale.light2};\n    padding: ${theme.gridUnit * 2}px 0px};\n    cursor: ${!onClick ? 'auto' : 'pointer'};\n    background: ${selected ? theme.colors.primary.light5 : 'transparent'};\n  `}\n`;\nconst DEFAULT_FILTER_SET_NAME = t('New filter set');\nconst FilterSets = ({ dataMaskSelected, onEditFilterSet, disabled, onFilterSelectionChange, isFilterSetChanged }) => {\n  const dispatch = useDispatch();\n  const [filterSetName, setFilterSetName] = useState(DEFAULT_FILTER_SET_NAME);\n  const [editMode, setEditMode] = useState(false);\n  const dataMaskApplied = useNativeFiltersDataMask();\n  const filterSets = useFilterSets();\n  const filterSetFilterValues = Object.values(filterSets);\n  const filters = useFilters();\n  const filterValues = Object.values(filters);\n  const [selectedFiltersSetId, setSelectedFiltersSetId] = useState(null);\n  useEffect(() => {var _foundFilterSet$id;\n    if (isFilterSetChanged) {\n      return;\n    }\n    const foundFilterSet = findExistingFilterSet({\n      dataMaskSelected,\n      filterSetFilterValues });\n\n    setSelectedFiltersSetId((_foundFilterSet$id = foundFilterSet == null ? void 0 : foundFilterSet.id) != null ? _foundFilterSet$id : null);\n  }, [isFilterSetChanged, dataMaskSelected, filterSetFilterValues]);\n  const isFilterMissingOrContainsInvalidMetadata = (id, filterSet) => {var _filterSet$nativeFilt;return !filterValues.find((filter) => (filter == null ? void 0 : filter.id) === id) ||\n    !areObjectsEqual(filters[id], filterSet == null ? void 0 : (_filterSet$nativeFilt = filterSet.nativeFilters) == null ? void 0 : _filterSet$nativeFilt[id], {\n      ignoreUndefined: true });};\n\n  const takeFilterSet = (id, target) => {var _target$parentElement, _target$parentElement2, _target$parentElement3, _target$parentElement4, _target$parentElement5, _target$parentElement6, _Object$values;\n    const ignoreSelectorHeader = 'ant-collapse-header';\n    const ignoreSelectorDropdown = 'ant-dropdown-menu-item';\n    if (target != null && target.classList.contains(ignoreSelectorHeader) ||\n    target != null && target.classList.contains(ignoreSelectorDropdown) ||\n    target != null && (_target$parentElement = target.parentElement) != null && _target$parentElement.classList.contains(ignoreSelectorHeader) ||\n    target != null && (_target$parentElement2 = target.parentElement) != null && (_target$parentElement3 = _target$parentElement2.parentElement) != null && _target$parentElement3.classList.contains(ignoreSelectorHeader) ||\n    target != null && (_target$parentElement4 = target.parentElement) != null && (_target$parentElement5 = _target$parentElement4.parentElement) != null && (_target$parentElement6 = _target$parentElement5.parentElement) != null && _target$parentElement6.classList.contains(ignoreSelectorHeader)) {\n      // We don't want select filter set when user expand filters\n      return;\n    }\n    setSelectedFiltersSetId(id);\n    if (!id) {\n      return;\n    }\n    const filterSet = filterSets[id];\n    ((_Object$values = Object.values(filterSet == null ? void 0 : filterSet.dataMask)) != null ? _Object$values : []).forEach((dataMask) => {\n      const { extraFormData, filterState, id } = dataMask;\n      if (isFilterMissingOrContainsInvalidMetadata(id, filterSet)) {\n        return;\n      }\n      onFilterSelectionChange({ id }, { extraFormData, filterState });\n    });\n  };\n  const handleRebuild = (id) => {var _filterSet$dataMask;\n    const filterSet = filterSets[id];\n    // We need remove invalid filters from filter set\n    const newFilters = Object.values((_filterSet$dataMask = filterSet == null ? void 0 : filterSet.dataMask) != null ? _filterSet$dataMask : {}).\n    filter((dataMask) => {\n      const { id } = dataMask;\n      return !isFilterMissingOrContainsInvalidMetadata(id, filterSet);\n    }).\n    reduce((prev, next) => ({\n      ...prev,\n      [next.id]: filters[next.id] }),\n    {});\n    const updatedFilterSet = {\n      ...filterSet,\n      nativeFilters: newFilters,\n      dataMask: Object.keys(newFilters).reduce((prev, nextFilterId) => {var _filterSet$dataMask2;return {\n          ...prev,\n          [nextFilterId]: (_filterSet$dataMask2 = filterSet.dataMask) == null ? void 0 : _filterSet$dataMask2[nextFilterId] };},\n      {}) };\n\n    dispatch(setFilterSetsConfiguration(filterSetFilterValues.map((filterSetIt) => {\n      const isEquals = filterSetIt.id === updatedFilterSet.id;\n      return isEquals ? updatedFilterSet : filterSetIt;\n    })));\n  };\n  const handleEdit = (id) => {\n    takeFilterSet(id);\n    onEditFilterSet(id);\n  };\n  const handleDeleteFilterSet = (filterSetId) => {\n    dispatch(setFilterSetsConfiguration(filterSetFilterValues.filter((filtersSet) => filtersSet.id !== filterSetId)));\n    if (filterSetId === selectedFiltersSetId) {\n      setSelectedFiltersSetId(null);\n    }\n  };\n  const handleCancel = () => {\n    setEditMode(false);\n    setFilterSetName(DEFAULT_FILTER_SET_NAME);\n  };\n  const handleCreateFilterSet = () => {\n    const newFilterSet = {\n      name: filterSetName.trim(),\n      id: generateFiltersSetId(),\n      nativeFilters: filters,\n      dataMask: Object.keys(filters).reduce((prev, nextFilterId) => ({\n        ...prev,\n        [nextFilterId]: dataMaskApplied[nextFilterId] }),\n      {}) };\n\n    dispatch(setFilterSetsConfiguration([newFilterSet].concat(filterSetFilterValues)));\n    setEditMode(false);\n    setFilterSetName(DEFAULT_FILTER_SET_NAME);\n  };\n  return ___EmotionJSX(FilterSetsWrapper, null,\n  !selectedFiltersSetId && ___EmotionJSX(FilterSetUnitWrapper, null,\n  ___EmotionJSX(FilterSetUnit, { dataMaskSelected: dataMaskSelected, editMode: editMode, setFilterSetName: setFilterSetName, filterSetName: filterSetName }),\n  ___EmotionJSX(Footer, { filterSetName: filterSetName.trim(), disabled: disabled, onCancel: handleCancel, editMode: editMode, onEdit: () => setEditMode(true), onCreate: handleCreateFilterSet })),\n\n  filterSetFilterValues.map((filterSet) => ___EmotionJSX(FilterSetUnitWrapper, _extends({}, getFilterBarTestId('filter-set-wrapper'), { \"data-selected\": filterSet.id === selectedFiltersSetId, onClick: (e) => takeFilterSet(filterSet.id, e.target), key: filterSet.id }),\n  ___EmotionJSX(FilterSetUnit, { isApplied: filterSet.id === selectedFiltersSetId && !disabled, onDelete: () => handleDeleteFilterSet(filterSet.id), onEdit: () => handleEdit(filterSet.id), onRebuild: () => handleRebuild(filterSet.id), dataMaskSelected: dataMaskSelected, filterSet: filterSet }))));\n\n\n};\nexport default FilterSets;","map":null,"metadata":{},"sourceType":"module"}