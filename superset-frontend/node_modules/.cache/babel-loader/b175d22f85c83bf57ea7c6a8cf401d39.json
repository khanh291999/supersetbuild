{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, GenericDataType } from '@superset-ui/core';\n/**\n * The buildQuery function is used to create an instance of QueryContext that's\n * sent to the chart data endpoint. In addition to containing information of which\n * datasource to use, it specifies the type (e.g. full payload, samples, query) and\n * format (e.g. CSV or JSON) of the result and whether or not to force refresh the data from\n * the datasource as opposed to using a cached copy of the data, if available.\n *\n * More importantly though, QueryContext contains a property `queries`, which is an array of\n * QueryObjects specifying individual data requests to be made. A QueryObject specifies which\n * columns, metrics and filters, among others, to use during the query. Usually it will be enough\n * to specify just one query based on the baseQueryObject, but for some more advanced use cases\n * it is possible to define post processing operations in the QueryObject, or multiple queries\n * if a viz needs multiple different result sets.\n */\nexport default function buildQuery(formData) {\n  const { groupby } = formData;\n  const [column = ''] = groupby || [];\n  // @ts-ignore (need update interface Column )\n  return buildQueryContext(formData, (baseQueryObject) => [\n  {\n    ...baseQueryObject,\n    columns: [],\n    groupby: [],\n    metrics: [\n    {\n      aggregate: 'MIN',\n      column: {\n        column_name: column,\n        id: 1,\n        type_generic: GenericDataType.NUMERIC },\n\n      expressionType: 'SIMPLE',\n      hasCustomLabel: true,\n      label: 'min' },\n\n    {\n      aggregate: 'MAX',\n      column: {\n        column_name: column,\n        id: 2,\n        type_generic: GenericDataType.NUMERIC },\n\n      expressionType: 'SIMPLE',\n      hasCustomLabel: true,\n      label: 'max' }] }]);\n\n\n\n\n}","map":null,"metadata":{},"sourceType":"module"}