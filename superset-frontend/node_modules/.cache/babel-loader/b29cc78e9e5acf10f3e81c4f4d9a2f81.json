{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { expandControlConfig } from '@superset-ui/chart-controls';\nimport * as SECTIONS from 'src/explore/controlPanels/sections';\nconst getMemoizedSectionsToRender = memoizeOne((datasourceType, controlPanelConfig) => {\n  const { sectionOverrides = {}, controlOverrides, controlPanelSections = [] } = controlPanelConfig;\n  // default control panel sections\n  const sections = { ...SECTIONS };\n  // apply section overrides\n  Object.entries(sectionOverrides).forEach(([section, overrides]) => {\n    if (typeof overrides === 'object' && overrides.constructor === Object) {\n      sections[section] = {\n        ...sections[section],\n        ...overrides };\n\n    } else\n    {\n      sections[section] = overrides;\n    }\n  });\n  const { datasourceAndVizType } = sections;\n  // list of datasource-specific controls that should be removed\n  const invalidControls = datasourceType === 'table' ?\n  ['granularity', 'druid_time_origin'] :\n  ['granularity_sqla', 'time_grain_sqla'];\n  return [datasourceAndVizType].\n  concat(controlPanelSections).\n  filter((section) => !!section).\n  map((section) => {\n    const { controlSetRows } = section;\n    return {\n      ...section,\n      controlSetRows: (controlSetRows == null ? void 0 : controlSetRows.map((row) => row.\n      filter((control) => typeof control !== 'string' ||\n      !invalidControls.includes(control)).\n      map((item) => expandControlConfig(item, controlOverrides)))) || [] };\n\n  });\n});\n/**\n * Get the clean and processed control panel sections\n */\nexport function getSectionsToRender(vizType, datasourceType) {\n  const controlPanelConfig =\n  // TODO: update `chartControlPanelRegistry` type to use ControlPanelConfig\n  getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedSectionsToRender(datasourceType, controlPanelConfig);\n}","map":null,"metadata":{},"sourceType":"module"}