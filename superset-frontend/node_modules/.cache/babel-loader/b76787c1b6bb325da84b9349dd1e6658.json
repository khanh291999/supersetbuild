{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport debounce from 'lodash/debounce';\nimport { Input } from 'src/common/components';\nimport { BOOL_FALSE_DISPLAY, BOOL_TRUE_DISPLAY, SLOW_DEBOUNCE } from 'src/constants';\nimport Button from 'src/components/Button';\nimport { applyFormattingToTabularData, prepareCopyToClipboardTabularData } from 'src/utils/common';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport RowCountLabel from 'src/explore/components/RowCountLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const CopyButton = styled(Button)`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n\n  // needed to override button's first-of-type margin: 0\n  && {\n    margin: 0 ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  i {\n    padding: 0 ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst CopyNode = ___EmotionJSX(CopyButton, { buttonSize: \"xsmall\" },\n___EmotionJSX(\"i\", { className: \"fa fa-clipboard\" }));\n\nexport const CopyToClipboardButton = ({ data, columns }) => ___EmotionJSX(CopyToClipboard, { text: data && columns ? prepareCopyToClipboardTabularData(data, columns) : '', wrapped: false, copyNode: CopyNode });\nexport const FilterInput = ({ onChangeHandler }) => {\n  const debouncedChangeHandler = debounce(onChangeHandler, SLOW_DEBOUNCE);\n  return ___EmotionJSX(Input, { placeholder: t('Search'), onChange: (event) => {\n      const filterText = event.target.value;\n      debouncedChangeHandler(filterText);\n    } });\n};\nexport const RowCount = ({ data, loading }) => {var _data$length;return ___EmotionJSX(RowCountLabel, { rowcount: (_data$length = data == null ? void 0 : data.length) != null ? _data$length : 0, loading: loading, suffix: t('rows retrieved') });};\nexport const useFilteredTableData = (filterText, data) => useMemo(() => {\n  if (!(data != null && data.length)) {\n    return [];\n  }\n  const formattedData = applyFormattingToTabularData(data);\n  return formattedData.filter((row) => Object.values(row).some((value) => value == null ? void 0 : value.toString().toLowerCase().includes(filterText.toLowerCase())));\n}, [data, filterText]);\nexport const useTableColumns = (colnames, data, moreConfigs) => useMemo(() => colnames && data != null && data.length ?\ncolnames.\nfilter((column) => Object.keys(data[0]).includes(column)).\nmap((key) => ({\n  accessor: (row) => row[key],\n  Header: key,\n  Cell: ({ value }) => {\n    if (value === true) {\n      return BOOL_TRUE_DISPLAY;\n    }\n    if (value === false) {\n      return BOOL_FALSE_DISPLAY;\n    }\n    return String(value);\n  },\n  ...(moreConfigs == null ? void 0 : moreConfigs[key]) })) :\n\n[], [data, moreConfigs]);","map":null,"metadata":{},"sourceType":"module"}