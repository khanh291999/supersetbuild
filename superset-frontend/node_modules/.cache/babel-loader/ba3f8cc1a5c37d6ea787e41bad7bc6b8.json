{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState, useCallback } from 'react';\nimport { SupersetClient, t, styled, useTheme } from '@superset-ui/core';\nimport moment from 'moment';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler, shortenSQL } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport Popover from 'src/components/Popover';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { Tooltip } from 'src/components/Tooltip';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport { DATETIME_WITH_TIME_ZONE, TIME_WITH_MS } from 'src/constants';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport Icons from 'src/components/Icons';\nimport QueryPreviewModal from './QueryPreviewModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst SQL_PREVIEW_MAX_LINES = 4;\nconst TopAlignedListView = styled(ListView)`\n  table .table-cell {\n    vertical-align: top;\n  }\n`;\nSyntaxHighlighter.registerLanguage('sql', sql);\nconst StyledSyntaxHighlighter = styled(SyntaxHighlighter)`\n  height: ${({ theme }) => theme.gridUnit * 26}px;\n  overflow: hidden !important; /* needed to override inline styles */\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\nfunction QueryList({ addDangerToast, addSuccessToast }) {\n  const { state: { loading, resourceCount: queryCount, resourceCollection: queries }, fetchData } = useListViewResource('query', t('Query history'), addDangerToast, false);\n  const [queryCurrentlyPreviewing, setQueryCurrentlyPreviewing] = useState();\n  const theme = useTheme();\n  const handleQueryPreview = useCallback((id) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/query/${id}` }).\n    then(({ json = {} }) => {\n      setQueryCurrentlyPreviewing({ ...json.result });\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue previewing the selected query. %s', errMsg))));\n  }, [addDangerToast]);\n  const menuData = {\n    activeChild: 'Query history',\n    ...commonMenuData };\n\n  const initialSort = [{ id: QueryObjectColumns.start_time, desc: true }];\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { status } } }) => {\n      const statusConfig = {\n        name: null,\n        label: '' };\n\n      if (status === 'success') {\n        statusConfig.name = ___EmotionJSX(Icons.Check, { iconColor: theme.colors.success.base });\n        statusConfig.label = t('Success');\n      } else\n      if (status === 'failed' || status === 'stopped') {\n        statusConfig.name = ___EmotionJSX(Icons.XSmall, { iconColor: status === 'failed' ?\n          theme.colors.error.base :\n          theme.colors.grayscale.base });\n        statusConfig.label = t('Failed');\n      } else\n      if (status === 'running') {\n        statusConfig.name = ___EmotionJSX(Icons.Running, { iconColor: theme.colors.primary.base });\n        statusConfig.label = t('Running');\n      } else\n      if (status === 'timed_out') {\n        statusConfig.name = ___EmotionJSX(Icons.Offline, { iconColor: theme.colors.grayscale.light1 });\n        statusConfig.label = t('Offline');\n      } else\n      if (status === 'scheduled' || status === 'pending') {\n        statusConfig.name = ___EmotionJSX(Icons.Queued, { iconColor: theme.colors.grayscale.base });\n        statusConfig.label = t('Scheduled');\n      }\n      return ___EmotionJSX(Tooltip, { title: statusConfig.label, placement: \"bottom\" },\n      ___EmotionJSX(\"span\", null, statusConfig.name));\n\n    },\n    accessor: QueryObjectColumns.status,\n    size: 'xs',\n    disableSortBy: true },\n\n  {\n    accessor: QueryObjectColumns.start_time,\n    Header: t('Time'),\n    size: 'xl',\n    Cell: ({ row: { original: { start_time, end_time } } }) => {\n      const startMoment = moment.utc(start_time).local();\n      const formattedStartTimeData = startMoment.\n      format(DATETIME_WITH_TIME_ZONE).\n      split(' ');\n      const formattedStartTime = ___EmotionJSX(React.Fragment, null,\n      formattedStartTimeData[0], \" \", ___EmotionJSX(\"br\", null),\n      formattedStartTimeData[1]);\n\n      return end_time ? ___EmotionJSX(Tooltip, { title: t('Duration: %s', moment(moment.utc(end_time - start_time)).format(TIME_WITH_MS)), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", null, formattedStartTime)) :\n      formattedStartTime;\n    } },\n\n  {\n    accessor: QueryObjectColumns.tab_name,\n    Header: t('Tab name'),\n    size: 'xl' },\n\n  {\n    accessor: QueryObjectColumns.database_name,\n    Header: t('Database'),\n    size: 'xl' },\n\n  {\n    accessor: QueryObjectColumns.database,\n    hidden: true },\n\n  {\n    accessor: QueryObjectColumns.schema,\n    Header: t('Schema'),\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { sql_tables: tables = [] } } }) => {\n      const names = tables.map((table) => table.table);\n      const main = names.length > 0 ? names.shift() : '';\n      if (names.length) {\n        return ___EmotionJSX(StyledTableLabel, null,\n        ___EmotionJSX(\"span\", null, main),\n        ___EmotionJSX(Popover, { placement: \"right\", title: t('TABLES'), trigger: \"click\", content: ___EmotionJSX(React.Fragment, null,\n          names.map((name) => ___EmotionJSX(StyledPopoverItem, { key: name }, name))) },\n\n        ___EmotionJSX(\"span\", { className: \"count\" }, \"(+\", names.length, \")\")));\n\n\n      }\n      return main;\n    },\n    accessor: QueryObjectColumns.sql_tables,\n    Header: t('Tables'),\n    size: 'xl',\n    disableSortBy: true },\n\n  {\n    accessor: QueryObjectColumns.user_first_name,\n    Header: t('User'),\n    size: 'xl',\n    Cell: ({ row: { original: { user } } }) => user ? `${user.first_name} ${user.last_name}` : '' },\n\n  {\n    accessor: QueryObjectColumns.user,\n    hidden: true },\n\n  {\n    accessor: QueryObjectColumns.rows,\n    Header: t('Rows'),\n    size: 'md' },\n\n  {\n    accessor: QueryObjectColumns.sql,\n    Header: t('SQL'),\n    Cell: ({ row: { original, id } }) => ___EmotionJSX(\"div\", { tabIndex: 0, role: \"button\", onClick: () => setQueryCurrentlyPreviewing(original) },\n    ___EmotionJSX(StyledSyntaxHighlighter, { language: \"sql\", style: github },\n    shortenSQL(original.sql, SQL_PREVIEW_MAX_LINES))) },\n\n\n\n  {\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true,\n    Cell: ({ row: { original: { id } } }) => ___EmotionJSX(Tooltip, { title: t('Open query in SQL Lab'), placement: \"bottom\" },\n    ___EmotionJSX(\"a\", { href: `/superset/sqllab?queryId=${id}` },\n    ___EmotionJSX(Icons.Full, { iconColor: theme.colors.grayscale.base }))) }],\n\n\n\n  []);\n  const filters = useMemo(() => [\n  {\n    Header: t('Database'),\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('query', 'database', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching database values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('State'),\n    id: 'status',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('query', 'status', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching schema values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('User'),\n    id: 'user',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('query', 'user', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching user values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('Time range'),\n    id: 'start_time',\n    input: 'datetime_range',\n    operator: FilterOperator.between },\n\n  {\n    Header: t('Search by query text'),\n    id: 'sql',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  [addDangerToast]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  queryCurrentlyPreviewing && ___EmotionJSX(QueryPreviewModal, { onHide: () => setQueryCurrentlyPreviewing(undefined), query: queryCurrentlyPreviewing, queries: queries, fetchData: handleQueryPreview, openInSqlLab: (id) => window.location.assign(`/superset/sqllab?queryId=${id}`), show: true }),\n  ___EmotionJSX(TopAlignedListView, { className: \"query-history-list-view\", columns: columns, count: queryCount, data: queries, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, highlightRowId: queryCurrentlyPreviewing == null ? void 0 : queryCurrentlyPreviewing.id }));\n\n}\nexport default withToasts(QueryList);","map":null,"metadata":{},"sourceType":"module"}