{"ast":null,"code":"function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n/* eslint-disable no-underscore-dangle */\nimport { SyncRegistry } from '@encodable/registry';\nexport default class ChildRegistry extends SyncRegistry {\n  constructor(parent, {\n    name,\n    defaultKey })\n  {\n    super({\n      name,\n      defaultKey,\n      globalId: typeof parent.state.globalId === 'undefined' ? undefined : `${parent.state.globalId}:${name}`,\n      overwritePolicy: parent.state.overwritePolicy,\n      setFirstItemAsDefault: parent.state.setFirstItemAsDefault });\n\n\n    _defineProperty(this, \"parent\", void 0);\n\n    this.parent = parent;\n  }\n\n  get(schemeId) {\n    const targetKey = schemeId != null ? schemeId : this.getDefaultKey();\n    return typeof targetKey !== 'undefined' && this.has(targetKey) ? this.parent.get(targetKey) : undefined;\n  }\n\n  register(scheme) {\n    if (Array.isArray(scheme)) {\n      scheme.forEach((v) => {\n        this.registerValue(v.id, v);\n      });\n      return this;\n    }\n\n    return this.registerValue(scheme.id, scheme);\n  }\n\n  _registerValue(schemeId, scheme) {\n    return super.registerValue(schemeId, scheme);\n  }\n\n  registerValue(schemeId, scheme) {\n    this.parent.registerValue(schemeId, scheme);\n    return this;\n  }\n\n  _registerLoader(schemeId, loader) {\n    return super.registerLoader(schemeId, loader);\n  }\n\n  registerLoader(schemeId, loader) {\n    this.parent.registerLoader(schemeId, loader);\n    return this;\n  }\n\n  clear() {\n    this.keys().forEach((key) => this.parent.remove(key));\n    return super.clear();\n  }\n\n  _clear() {\n    return super.clear();\n  }\n\n  remove(schemeId) {\n    this.parent.remove(schemeId);\n    return this;\n  }\n\n  _remove(schemeId) {\n    return super.remove(schemeId);\n  }}","map":null,"metadata":{},"sourceType":"module"}