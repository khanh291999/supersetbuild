{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useRef } from 'react';\nimport Alert from 'src/components/Alert';\nimport Button from 'src/components/Button';\nimport { styled, t, SupersetClient } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport withToasts from 'src/components/MessageToasts/withToasts';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatasourceEditor = AsyncEsmComponent(() => import('./DatasourceEditor'));\nconst StyledDatasourceModal = styled(Modal)`\n  .modal-content {\n    height: 900px;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .modal-header {\n    flex: 0 1 auto;\n  }\n  .modal-body {\n    flex: 1 1 auto;\n    overflow: auto;\n  }\n\n  .modal-footer {\n    flex: 0 1 auto;\n  }\n\n  .ant-modal-body {\n    overflow: visible;\n  }\n`;\nfunction buildExtraJsonObject(item) {\n  const certification = item != null && item.certified_by || item != null && item.certification_details ?\n  {\n    certified_by: item == null ? void 0 : item.certified_by,\n    details: item == null ? void 0 : item.certification_details } :\n\n  undefined;\n  return JSON.stringify({\n    certification,\n    warning_markdown: item == null ? void 0 : item.warning_markdown });\n\n}\nconst DatasourceModal = ({ addSuccessToast, datasource, onDatasourceSave, onHide, show }) => {\n  const [currentDatasource, setCurrentDatasource] = useState(datasource);\n  const [errors, setErrors] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const dialog = useRef(null);\n  const [modal, contextHolder] = Modal.useModal();\n  const onConfirmSave = () => {var _currentDatasource$ta, _currentDatasource$da, _currentDatasource$me, _currentDatasource$co;\n    // Pull out extra fields into the extra object\n    const schema = ((_currentDatasource$ta = currentDatasource.tableSelector) == null ? void 0 : _currentDatasource$ta.schema) || ((_currentDatasource$da =\n    currentDatasource.databaseSelector) == null ? void 0 : _currentDatasource$da.schema) ||\n    currentDatasource.schema;\n    setIsSaving(true);\n    SupersetClient.post({\n      endpoint: '/datasource/save/',\n      postPayload: {\n        data: {\n          ...currentDatasource,\n          schema,\n          metrics: currentDatasource == null ? void 0 : (_currentDatasource$me = currentDatasource.metrics) == null ? void 0 : _currentDatasource$me.map((metric) => ({\n            ...metric,\n            extra: buildExtraJsonObject(metric) })),\n\n          columns: currentDatasource == null ? void 0 : (_currentDatasource$co = currentDatasource.columns) == null ? void 0 : _currentDatasource$co.map((column) => ({\n            ...column,\n            extra: buildExtraJsonObject(column) })),\n\n          type: currentDatasource.type || currentDatasource.datasource_type,\n          owners: currentDatasource.owners.map((o) => o.value || o.id) } } }).\n\n\n\n    then(({ json }) => {\n      addSuccessToast(t('The dataset has been saved'));\n      onDatasourceSave({\n        ...json,\n        owners: currentDatasource.owners });\n\n      onHide();\n    }).\n    catch((response) => {\n      setIsSaving(false);\n      getClientErrorObject(response).then(({ error }) => {\n        modal.error({\n          title: 'Error',\n          content: error || t('An error has occurred'),\n          okButtonProps: { danger: true, className: 'btn-danger' } });\n\n      });\n    });\n  };\n  const onDatasourceChange = (data, err) => {\n    setCurrentDatasource({\n      ...data,\n      metrics: data == null ? void 0 : data.metrics.map((metric) => ({\n        ...metric,\n        is_certified: (metric == null ? void 0 : metric.certified_by) || (metric == null ? void 0 : metric.certification_details) })) });\n\n\n    setErrors(err);\n  };\n  const renderSaveDialog = () => ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(Alert, { css: (theme) => ({\n      marginTop: theme.gridUnit * 4,\n      marginBottom: theme.gridUnit * 4 }),\n    type: \"warning\", showIcon: true, message: t(`The dataset configuration exposed here\n                affects all the charts using this dataset.\n                Be mindful that changing settings\n                here may affect other charts\n                in undesirable ways.`) }),\n  t('Are you sure you want to save and apply changes?'));\n\n  const onClickSave = () => {\n    dialog.current = modal.confirm({\n      title: t('Confirm save'),\n      content: renderSaveDialog(),\n      onOk: onConfirmSave,\n      icon: null });\n\n  };\n  return ___EmotionJSX(StyledDatasourceModal, { show: show, onHide: onHide, title: ___EmotionJSX(\"span\", null,\n    t('Edit Dataset '),\n    ___EmotionJSX(\"strong\", null, currentDatasource.table_name)),\n    footer: ___EmotionJSX(React.Fragment, null,\n    isFeatureEnabled(FeatureFlag.ENABLE_REACT_CRUD_VIEWS) && ___EmotionJSX(Button, { buttonSize: \"small\", buttonStyle: \"default\", className: \"m-r-5\", onClick: () => {\n        window.location.href =\n        currentDatasource.edit_url || currentDatasource.url;\n      } },\n    t('Use legacy datasource editor')),\n\n    ___EmotionJSX(Button, { buttonSize: \"small\", className: \"m-r-5\", onClick: onHide },\n    t('Cancel')),\n\n    ___EmotionJSX(Button, { buttonSize: \"small\", buttonStyle: \"primary\", onClick: onClickSave, disabled: isSaving || errors.length > 0 },\n    t('Save'))),\n\n    responsive: true },\n  ___EmotionJSX(DatasourceEditor, { showLoadingForImport: true, height: 500, datasource: currentDatasource, onChange: onDatasourceChange }),\n  contextHolder);\n\n};\nexport default withToasts(DatasourceModal);","map":null,"metadata":{},"sourceType":"module"}