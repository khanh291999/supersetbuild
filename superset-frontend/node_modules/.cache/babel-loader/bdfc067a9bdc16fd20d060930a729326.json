{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import domToImage from 'dom-to-image';\nimport kebabCase from 'lodash/kebabCase';\nimport { t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\n/**\n * @remark\n * same as https://github.com/apache/superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/src/assets/stylesheets/less/variables.less#L34\n */\nconst GRAY_BACKGROUND_COLOR = '#F5F5F5';\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description, date = new Date()) => `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param domToImageOptions dom-to-image Options object.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsImage(selector, description, domToImageOptions = {}, isExactSelector = false) {\n  return (event) => {\n    const elementToPrint = isExactSelector ?\n    document.querySelector(selector) :\n    event.currentTarget.closest(selector);\n    if (!elementToPrint) {\n      return addWarningToast(t('Image download failed, please refresh and try again.'));\n    }\n    // Mapbox controls are loaded from different origin, causing CORS error\n    // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL#exceptions\n    const filter = (node) => {\n      if (typeof node.className === 'string') {\n        return node.className !== 'mapboxgl-control-container' &&\n        !node.className.includes('ant-dropdown');\n      }\n      return true;\n    };\n    return domToImage.\n    toJpeg(elementToPrint, {\n      quality: 0.95,\n      bgcolor: GRAY_BACKGROUND_COLOR,\n      filter }).\n\n    then((dataUrl) => {\n      const link = document.createElement('a');\n      link.download = `${generateFileStem(description)}.jpg`;\n      link.href = dataUrl;\n      link.click();\n    }).\n    catch((e) => {\n      console.error('Creating image failed', e);\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}