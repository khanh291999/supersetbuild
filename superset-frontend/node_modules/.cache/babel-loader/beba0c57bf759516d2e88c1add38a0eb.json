{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user })\n{\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  const queryEditors = [];\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    title: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    functionNames: [],\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false },\n\n    queryCostEstimate: {\n      cost: null,\n      completed: false,\n      error: null },\n\n    hideLeftBar: false };\n\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        title: activeTab.label,\n        sql: activeTab.sql || undefined,\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query ?\n        activeTab.latest_query.id :\n        null,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        functionNames: [],\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false },\n\n        hideLeftBar: activeTab.hide_left_bar };\n\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        title: label };\n\n    }\n    queryEditors.push(queryEditor);\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  const tables = [];\n  if (activeTab) {\n    activeTab.table_schemas.\n    filter((tableSchema) => tableSchema.description !== null).\n    forEach((tableSchema) => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n        partitions,\n        metadata } =\n      tableSchema.description;\n      const table = {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        partitions,\n        metadata };\n\n      tables.push(table);\n    });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n  localStorage.getItem('redux') &&\n  JSON.parse(localStorage.getItem('redux')).sqlLab)\n  {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach((qe) =>\n      queryEditors.push({\n        ...qe,\n        inLocalStorage: true,\n        loaded: true }));\n\n\n      sqlLab.tables.forEach((table) =>\n      tables.push({ ...table, inLocalStorage: true }));\n\n      Object.values(sqlLab.queries).forEach((query) => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors,\n      tabHistory,\n      tables,\n      queriesLastUpdate: Date.now(),\n      user },\n\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n    (common || {}).flash_messages || []),\n\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf } };\n\n\n}","map":null,"metadata":{},"sourceType":"module"}