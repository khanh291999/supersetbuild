{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { useTheme } from '@superset-ui/core';\nimport { useSelector, connect } from 'react-redux';\n\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/activeDashboardFilters';\nimport Chart from '../../containers/Chart';\nimport AnchorLink from '../../../components/AnchorLink';\nimport DeleteComponentButton from '../DeleteComponentButton';\nimport DragDroppable from '../dnd/DragDroppable';\nimport HoverMenu from '../menu/HoverMenu';\nimport ResizableContainer from '../resizable/ResizableContainer';\nimport getChartAndLabelComponentIdFromPath from '../../util/getChartAndLabelComponentIdFromPath';\nimport { componentShape } from '../../util/propShapes';\nimport { COLUMN_TYPE, ROW_TYPE } from '../../util/componentTypes';\n\nimport {\nGRID_BASE_UNIT,\nGRID_GUTTER_SIZE,\nGRID_MIN_COLUMN_COUNT,\nGRID_MIN_ROW_UNITS } from\n'../../util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst CHART_MARGIN = 32;\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  dashboardId: PropTypes.number.isRequired,\n  component: componentShape.isRequired,\n  parentComponent: componentShape.isRequired,\n  getComponentById: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  directPathToChild: PropTypes.arrayOf(PropTypes.string),\n  directPathLastUpdated: PropTypes.number,\n  focusedFilterScope: PropTypes.object,\n  fullSizeChartId: PropTypes.oneOf([PropTypes.number, null]),\n\n  // grid related\n  availableColumnCount: PropTypes.number.isRequired,\n  columnWidth: PropTypes.number.isRequired,\n  onResizeStart: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  onResizeStop: PropTypes.func.isRequired,\n\n  // dnd\n  deleteComponent: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  setFullSizeChartId: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  directPathToChild: [],\n  directPathLastUpdated: 0 };\n\n\n/**\n * Selects the chart scope of the filter input that has focus.\n *\n * @returns {{chartId: number, scope: { scope: string[], immune: string[] }} | null }\n * the scope of the currently focused filter, if any\n */\nfunction selectFocusedFilterScope(dashboardState, dashboardFilters) {\n  if (!dashboardState.focusedFilterField) return null;\n  const { chartId, column } = dashboardState.focusedFilterField;\n  return {\n    chartId,\n    scope: dashboardFilters[chartId].scopes[column] };\n\n}\n\n/**\n * Renders any styles necessary to highlight the chart's relationship to the focused filter.\n *\n * If there is no focused filter scope (i.e. most of the time), this will be just a pass-through.\n *\n * If the chart is outside the scope of the focused filter, dims the chart.\n *\n * If the chart is in the scope of the focused filter,\n * renders a highlight around the chart.\n *\n * If ChartHolder were a function component, this could be implemented as a hook instead.\n */\nconst FilterFocusHighlight = /*#__PURE__*/React.forwardRef(\n({ chartId, ...otherProps }, ref) => {\n  const theme = useTheme();\n\n  const nativeFilters = useSelector((state) => state.nativeFilters);\n  const dashboardState = useSelector((state) => state.dashboardState);\n  const dashboardFilters = useSelector((state) => state.dashboardFilters);\n  const focusedFilterScope = selectFocusedFilterScope(\n  dashboardState,\n  dashboardFilters);\n\n  const focusedNativeFilterId = nativeFilters.focusedFilterId;\n  if (!(focusedFilterScope || focusedNativeFilterId))\n  return ___EmotionJSX(\"div\", _extends({ ref: ref }, otherProps));\n\n  // we use local styles here instead of a conditionally-applied class,\n  // because adding any conditional class to this container\n  // causes performance issues in Chrome.\n\n  // default to the \"de-emphasized\" state\n  const unfocusedChartStyles = { opacity: 0.3, pointerEvents: 'none' };\n  const focusedChartStyles = {\n    borderColor: theme.colors.primary.light2,\n    opacity: 1,\n    boxShadow: `0px 0px ${theme.gridUnit * 2}px ${theme.colors.primary.base}`,\n    pointerEvents: 'auto' };\n\n\n  if (focusedNativeFilterId) {var _nativeFilters$filter, _nativeFilters$filter2;\n    if ((_nativeFilters$filter =\n    nativeFilters.filters[focusedNativeFilterId]) != null && (_nativeFilters$filter2 = _nativeFilters$filter.chartsInScope) != null && _nativeFilters$filter2.includes(\n    chartId))\n\n    {\n      return ___EmotionJSX(\"div\", _extends({ ref: ref, style: focusedChartStyles }, otherProps));\n    }\n  } else if (\n  chartId === focusedFilterScope.chartId ||\n  getChartIdsInFilterScope({\n    filterScope: focusedFilterScope.scope }).\n  includes(chartId))\n  {\n    return ___EmotionJSX(\"div\", _extends({ ref: ref, style: focusedChartStyles }, otherProps));\n  }\n\n  // inline styles are used here due to a performance issue when adding/changing a class, which causes a reflow\n  return ___EmotionJSX(\"div\", _extends({ ref: ref, style: unfocusedChartStyles }, otherProps));\n});\n\n\nclass ChartHolder extends React.Component {\n  static renderInFocusCSS(columnName) {\n    return (\n      ___EmotionJSX(\"style\", null,\n      `label[for=${columnName}] + .Select .Select__control {\n                    border-color: #00736a;\n                    transition: border-color 1s ease-in-out;\n           }`));\n\n\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { component, directPathToChild, directPathLastUpdated } = props;\n    const {\n      label: columnName,\n      chart: chartComponentId } =\n    getChartAndLabelComponentIdFromPath(directPathToChild);\n\n    if (\n    directPathLastUpdated !== state.directPathLastUpdated &&\n    component.id === chartComponentId)\n    {\n      return {\n        outlinedComponentId: component.id,\n        outlinedColumnName: columnName,\n        directPathLastUpdated };\n\n    }\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFocused: false,\n      outlinedComponentId: null,\n      outlinedColumnName: null,\n      directPathLastUpdated: 0 };\n\n\n    this.handleChangeFocus = this.handleChangeFocus.bind(this);\n    this.handleDeleteComponent = this.handleDeleteComponent.bind(this);\n    this.handleUpdateSliceName = this.handleUpdateSliceName.bind(this);\n    this.handleToggleFullSize = this.handleToggleFullSize.bind(this);\n  }\n\n  componentDidMount() {\n    this.hideOutline({}, this.state);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.hideOutline(prevState, this.state);\n  }\n\n  hideOutline(prevState, state) {\n    const { outlinedComponentId: timerKey } = state;\n    const { outlinedComponentId: prevTimerKey } = prevState;\n\n    // because of timeout, there might be multiple charts showing outline\n    if (!!timerKey && !prevTimerKey) {\n      setTimeout(() => {\n        this.setState(() => ({\n          outlinedComponentId: null,\n          outlinedColumnName: null }));\n\n      }, 2000);\n    }\n  }\n\n  handleChangeFocus(nextFocus) {\n    this.setState(() => ({ isFocused: nextFocus }));\n  }\n\n  handleDeleteComponent() {\n    const { deleteComponent, id, parentId } = this.props;\n    deleteComponent(id, parentId);\n  }\n\n  handleUpdateSliceName(nextName) {\n    const { component, updateComponents } = this.props;\n    updateComponents({\n      [component.id]: {\n        ...component,\n        meta: {\n          ...component.meta,\n          sliceNameOverride: nextName } } });\n\n\n\n  }\n\n  handleToggleFullSize() {\n    const { component, fullSizeChartId, setFullSizeChartId } = this.props;\n    const { chartId } = component.meta;\n    const isFullSize = fullSizeChartId === chartId;\n    setFullSizeChartId(isFullSize ? null : chartId);\n  }\n\n  render() {var _getComponentById, _getComponentById$met, _parentComponent$pare;\n    const { isFocused } = this.state;\n    const {\n      component,\n      parentComponent,\n      index,\n      depth,\n      availableColumnCount,\n      columnWidth,\n      onResizeStart,\n      onResize,\n      onResizeStop,\n      handleComponentDrop,\n      editMode,\n      isComponentVisible,\n      dashboardId,\n      fullSizeChartId,\n      getComponentById = () => undefined } =\n    this.props;\n\n    const { chartId } = component.meta;\n    const isFullSize = fullSizeChartId === chartId;\n\n    // inherit the size of parent columns\n    const columnParentWidth = (_getComponentById = getComponentById((_parentComponent$pare =\n    parentComponent.parents) == null ? void 0 : _parentComponent$pare.find((parent) => parent.startsWith(COLUMN_TYPE)))) == null ? void 0 : (_getComponentById$met = _getComponentById.\n    meta) == null ? void 0 : _getComponentById$met.width;\n    let widthMultiple = component.meta.width || GRID_MIN_COLUMN_COUNT;\n    if (parentComponent.type === COLUMN_TYPE) {\n      widthMultiple = parentComponent.meta.width || GRID_MIN_COLUMN_COUNT;\n    } else if (columnParentWidth && widthMultiple > columnParentWidth) {\n      widthMultiple = columnParentWidth;\n    }\n\n    let chartWidth = 0;\n    let chartHeight = 0;\n\n    if (isFullSize) {\n      chartWidth = window.innerWidth - CHART_MARGIN;\n      chartHeight = window.innerHeight - CHART_MARGIN;\n    } else {\n      chartWidth = Math.floor(\n      widthMultiple * columnWidth +\n      (widthMultiple - 1) * GRID_GUTTER_SIZE -\n      CHART_MARGIN);\n\n      chartHeight = Math.floor(\n      component.meta.height * GRID_BASE_UNIT - CHART_MARGIN);\n\n    }\n\n    return (\n      ___EmotionJSX(DragDroppable, {\n        component: component,\n        parentComponent: parentComponent,\n        orientation: parentComponent.type === ROW_TYPE ? 'column' : 'row',\n        index: index,\n        depth: depth,\n        onDrop: handleComponentDrop,\n        disableDragDrop: isFocused,\n        editMode: editMode },\n\n      ({ dropIndicatorProps, dragSourceRef }) =>\n      ___EmotionJSX(ResizableContainer, {\n        id: component.id,\n        adjustableWidth: parentComponent.type === ROW_TYPE,\n        adjustableHeight: true,\n        widthStep: columnWidth,\n        widthMultiple: widthMultiple,\n        heightStep: GRID_BASE_UNIT,\n        heightMultiple: component.meta.height,\n        minWidthMultiple: GRID_MIN_COLUMN_COUNT,\n        minHeightMultiple: GRID_MIN_ROW_UNITS,\n        maxWidthMultiple: availableColumnCount + widthMultiple,\n        onResizeStart: onResizeStart,\n        onResize: onResize,\n        onResizeStop: onResizeStop,\n        editMode: editMode },\n\n      ___EmotionJSX(FilterFocusHighlight, {\n        chartId: chartId,\n        ref: dragSourceRef,\n\n        className: cx(\n        'dashboard-component',\n        'dashboard-component-chart-holder',\n        this.state.outlinedComponentId ? 'fade-in' : 'fade-out',\n        isFullSize && 'full-size') },\n\n\n      !editMode &&\n      ___EmotionJSX(AnchorLink, {\n        anchorLinkId: component.id,\n        inFocus: !!this.state.outlinedComponentId }),\n\n\n      !!this.state.outlinedComponentId &&\n      ChartHolder.renderInFocusCSS(this.state.outlinedColumnName),\n      ___EmotionJSX(Chart, {\n        componentId: component.id,\n        id: component.meta.chartId,\n        dashboardId: dashboardId,\n        width: chartWidth,\n        height: chartHeight,\n        sliceName:\n        component.meta.sliceNameOverride ||\n        component.meta.sliceName ||\n        '',\n\n        updateSliceName: this.handleUpdateSliceName,\n        isComponentVisible: isComponentVisible,\n        handleToggleFullSize: this.handleToggleFullSize,\n        isFullSize: isFullSize }),\n\n      editMode &&\n      ___EmotionJSX(HoverMenu, { position: \"top\" },\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(DeleteComponentButton, {\n        onDelete: this.handleDeleteComponent })))),\n\n\n\n\n\n\n      dropIndicatorProps && ___EmotionJSX(\"div\", dropIndicatorProps))));\n\n\n\n\n  }}\n\n\nChartHolder.propTypes = propTypes;\nChartHolder.defaultProps = defaultProps;\n\nfunction mapStateToProps(state) {\n  return {\n    directPathToChild: state.dashboardState.directPathToChild,\n    directPathLastUpdated: state.dashboardState.directPathLastUpdated };\n\n}\nexport default connect(mapStateToProps)(ChartHolder);","map":null,"metadata":{},"sourceType":"module"}