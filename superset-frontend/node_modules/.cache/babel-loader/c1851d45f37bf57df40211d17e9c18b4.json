{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport '../../assets/stylesheets/reactable-pagination.less';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TableLoader = (props) => {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const { dataEndpoint, mutator } = props;\n    if (dataEndpoint) {\n      SupersetClient.get({ endpoint: dataEndpoint }).\n      then(({ json }) => {\n        const data = mutator ? mutator(json) : json;\n        setData(data);\n        setIsLoading(false);\n      }).\n      catch(() => {\n        setIsLoading(false);\n        props.addDangerToast(t('An error occurred'));\n      });\n    }\n  }, [props]);\n  const { columns, ...tableProps } = props;\n  const memoizedColumns = useMemo(() => {\n    let tableColumns = columns;\n    if (!columns && data.length > 0) {\n      tableColumns = Object.keys(data[0]).filter((col) => col[0] !== '_');\n    }\n    return tableColumns ?\n    tableColumns.map((column) => ({\n      accessor: column,\n      Header: column })) :\n\n    [];\n  }, [columns, data]);\n  delete tableProps.dataEndpoint;\n  delete tableProps.mutator;\n  if (isLoading) {\n    return ___EmotionJSX(Loading, null);\n  }\n  return ___EmotionJSX(TableView, _extends({ columns: memoizedColumns, data: data, pageSize: 50, loading: isLoading, emptyWrapperType: EmptyWrapperType.Small }, tableProps));\n};\nexport default withToasts(TableLoader);","map":null,"metadata":{},"sourceType":"module"}