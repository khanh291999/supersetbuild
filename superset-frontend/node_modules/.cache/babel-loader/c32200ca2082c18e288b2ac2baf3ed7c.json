{"ast":null,"code":"import _isInteger from \"lodash/isInteger\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\n\nimport { Col, InputNumber, Row } from 'src/common/components';\nimport { DatePicker } from 'src/components/DatePicker';\nimport { Radio } from 'src/components/Radio';\nimport { Select } from 'src/components';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { SINCE_GRAIN_OPTIONS, SINCE_MODE_OPTIONS, UNTIL_GRAIN_OPTIONS, UNTIL_MODE_OPTIONS, MOMENT_FORMAT, MIDNIGHT, customTimeRangeDecode, customTimeRangeEncode, dttmToMoment } from 'src/explore/components/controls/DateFilterControl/utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport function CustomFrame(props) {\n  const { customRange, matchedFlag } = customTimeRangeDecode(props.value);\n  if (!matchedFlag) {\n    props.onChange(customTimeRangeEncode(customRange));\n  }\n  const { sinceDatetime, sinceMode, sinceGrain, sinceGrainValue, untilDatetime, untilMode, untilGrain, untilGrainValue, anchorValue, anchorMode } = { ...customRange };\n  function onChange(control, value) {\n    props.onChange(customTimeRangeEncode({\n      ...customRange,\n      [control]: value }));\n\n  }\n  function onGrainValue(control, value) {\n    // only positive values in grainValue controls\n    if (_isInteger(value) && value > 0) {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        [control]: value }));\n\n    }\n  }\n  function onAnchorMode(option) {\n    const radioValue = option.target.value;\n    if (radioValue === 'now') {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        anchorValue: 'now',\n        anchorMode: radioValue }));\n\n    } else\n    {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        anchorValue: MIDNIGHT,\n        anchorMode: radioValue }));\n\n    }\n  }\n  return ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(\"div\", { className: \"section-title\" }, t('Configure custom time range')),\n  ___EmotionJSX(Row, { gutter: 24 },\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('START (INCLUSIVE)'), ' ',\n  ___EmotionJSX(InfoTooltipWithTrigger, { tooltip: t('Start date included in time range'), placement: \"right\" })),\n\n  ___EmotionJSX(Select, { ariaLabel: t('START (INCLUSIVE)'), options: SINCE_MODE_OPTIONS, value: sinceMode, onChange: (value) => onChange('sinceMode', value) }),\n  sinceMode === 'specific' && ___EmotionJSX(Row, null,\n  ___EmotionJSX(DatePicker, { showTime: true, defaultValue: dttmToMoment(sinceDatetime), onChange: (datetime) => onChange('sinceDatetime', datetime.format(MOMENT_FORMAT)), allowClear: false })),\n\n  sinceMode === 'relative' && ___EmotionJSX(Row, { gutter: 8 },\n  ___EmotionJSX(Col, { span: 11 },\n\n  ___EmotionJSX(InputNumber, { placeholder: t('Relative quantity'), value: Math.abs(sinceGrainValue), min: 1, defaultValue: 1, onChange: (value) => onGrainValue('sinceGrainValue', value || 1), onStep: (value) => onGrainValue('sinceGrainValue', value || 1) })),\n\n  ___EmotionJSX(Col, { span: 13 },\n  ___EmotionJSX(Select, { ariaLabel: t('Relative period'), options: SINCE_GRAIN_OPTIONS, value: sinceGrain, onChange: (value) => onChange('sinceGrain', value) })))),\n\n\n\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('END (EXCLUSIVE)'), ' ',\n  ___EmotionJSX(InfoTooltipWithTrigger, { tooltip: t('End date excluded from time range'), placement: \"right\" })),\n\n  ___EmotionJSX(Select, { ariaLabel: t('END (EXCLUSIVE)'), options: UNTIL_MODE_OPTIONS, value: untilMode, onChange: (value) => onChange('untilMode', value) }),\n  untilMode === 'specific' && ___EmotionJSX(Row, null,\n  ___EmotionJSX(DatePicker, { showTime: true, defaultValue: dttmToMoment(untilDatetime), onChange: (datetime) => onChange('untilDatetime', datetime.format(MOMENT_FORMAT)), allowClear: false })),\n\n  untilMode === 'relative' && ___EmotionJSX(Row, { gutter: 8 },\n  ___EmotionJSX(Col, { span: 11 },\n  ___EmotionJSX(InputNumber, { placeholder: t('Relative quantity'), value: untilGrainValue, min: 1, defaultValue: 1, onChange: (value) => onGrainValue('untilGrainValue', value || 1), onStep: (value) => onGrainValue('untilGrainValue', value || 1) })),\n\n  ___EmotionJSX(Col, { span: 13 },\n  ___EmotionJSX(Select, { ariaLabel: t('Relative period'), options: UNTIL_GRAIN_OPTIONS, value: untilGrain, onChange: (value) => onChange('untilGrain', value) }))))),\n\n\n\n\n  sinceMode === 'relative' && untilMode === 'relative' && ___EmotionJSX(\"div\", { className: \"control-anchor-to\" },\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Anchor to')),\n  ___EmotionJSX(Row, { align: \"middle\" },\n  ___EmotionJSX(Col, null,\n  ___EmotionJSX(Radio.Group, { onChange: onAnchorMode, defaultValue: \"now\", value: anchorMode },\n  ___EmotionJSX(Radio, { key: \"now\", value: \"now\" },\n  t('NOW')),\n\n  ___EmotionJSX(Radio, { key: \"specific\", value: \"specific\" },\n  t('Date/Time')))),\n\n\n\n  anchorMode !== 'now' && ___EmotionJSX(Col, null,\n  ___EmotionJSX(DatePicker, { showTime: true, defaultValue: dttmToMoment(anchorValue), onChange: (datetime) => onChange('anchorValue', datetime.format(MOMENT_FORMAT)), allowClear: false, className: \"control-anchor-to-datetime\" })))));\n\n\n\n\n}","map":null,"metadata":{},"sourceType":"module"}