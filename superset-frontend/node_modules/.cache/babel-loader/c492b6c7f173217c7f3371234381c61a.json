{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { StyledInputContainer } from '../AlertReportModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\nexport const NotificationMethod = ({ setting = null, index, onUpdate, onRemove }) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState(recipients || '');\n  const theme = useTheme();\n  if (!setting) {\n    return null;\n  }\n  const onMethodChange = (method) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '' };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onRecipientsChange = (event) => {\n    const { target } = event;\n    setRecipientValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n  return ___EmotionJSX(StyledNotificationMethod, null,\n  ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Delivery method'), onChange: onMethodChange, placeholder: t('Select Delivery Method'), options: (options || []).map((method) => ({\n      label: method,\n      value: method })),\n    value: method }))),\n\n\n  method !== undefined && !!onRemove ? ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"delete-button\", onClick: () => onRemove(index) },\n  ___EmotionJSX(Icons.Trash, { iconColor: theme.colors.grayscale.base })) :\n  null),\n\n  method !== undefined ? ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t(method)),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"textarea\", { name: \"recipients\", value: recipientValue, onChange: onRecipientsChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Recipients are separated by \",\" or \";\"'))) :\n\n  null);\n\n};","map":null,"metadata":{},"sourceType":"module"}