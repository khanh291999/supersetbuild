{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { t, SupersetClient, styled, useTheme } from '@superset-ui/core';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport { LoadingCards } from 'src/views/CRUD/welcome/Welcome';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Dropdown, Menu } from 'src/common/components';\nimport { useListViewResource, copyQueryLink } from 'src/views/CRUD/hooks';\nimport ListViewCard from 'src/components/ListViewCard';\nimport DeleteModal from 'src/components/DeleteModal';\nimport Icons from 'src/components/Icons';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport EmptyState from './EmptyState';\nimport { CardContainer, createErrorHandler, shortenSQL, PAGE_SIZE } from '../utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nSyntaxHighlighter.registerLanguage('sql', sql);\nexport const CardStyles = styled.div`\n  cursor: pointer;\n  a {\n    text-decoration: none;\n  }\n  .ant-card-cover {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    & > div {\n      height: 171px;\n    }\n  }\n  .gradient-container > div {\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-color: ${({ theme }) => theme.colors.secondary.light3};\n    display: inline-block;\n    width: 100%;\n    height: 179px;\n    background-repeat: no-repeat;\n    vertical-align: middle;\n  }\n`;\nconst QueryData = styled.div`\n  svg {\n    margin-left: ${({ theme }) => theme.gridUnit * 10}px;\n  }\n  .query-title {\n    padding: ${({ theme }) => theme.gridUnit * 2 + 2}px;\n    font-size: ${({ theme }) => theme.typography.sizes.l}px;\n  }\n`;\nconst QueryContainer = styled.div`\n  pre {\n    height: ${({ theme }) => theme.gridUnit * 40}px;\n    border: none !important;\n    background-color: ${({ theme }) => theme.colors.grayscale.light5} !important;\n    overflow: hidden;\n    padding: ${({ theme }) => theme.gridUnit * 4}px !important;\n  }\n`;\nconst SavedQueries = ({ user, addDangerToast, addSuccessToast, mine, showThumbnails, featureFlag }) => {\n  const { state: { loading, resourceCollection: queries }, hasPerm, fetchData, refreshData } = useListViewResource('saved_query', t('query'), addDangerToast, true, mine, [], false);\n  const [queryFilter, setQueryFilter] = useState('Mine');\n  const [queryDeleteModal, setQueryDeleteModal] = useState(false);\n  const [currentlyEdited, setCurrentlyEdited] = useState({});\n  const [ifMine, setMine] = useState(true);\n  const canEdit = hasPerm('can_edit');\n  const canDelete = hasPerm('can_delete');\n  const theme = useTheme();\n  const handleQueryDelete = ({ id, label }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}` }).\n    then(() => {\n      const queryParams = {\n        filters: [\n        {\n          id: 'created_by',\n          operator: 'rel_o_m',\n          value: `${user == null ? void 0 : user.userId}` }],\n\n\n        pageSize: PAGE_SIZE,\n        sortBy: [\n        {\n          id: 'changed_on_delta_humanized',\n          desc: true }],\n\n\n        pageIndex: 0 };\n\n      // if mine is default there refresh data with current filters\n      const filter = ifMine ? queryParams : undefined;\n      refreshData(filter);\n      setMine(false);\n      setQueryDeleteModal(false);\n      addSuccessToast(t('Deleted: %s', label));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', label, errMsg))));\n  };\n  const getFilters = (filterName) => {\n    const filters = [];\n    if (filterName === 'Mine') {\n      filters.push({\n        id: 'created_by',\n        operator: 'rel_o_m',\n        value: `${user == null ? void 0 : user.userId}` });\n\n    } else\n    {\n      filters.push({\n        id: 'id',\n        operator: 'saved_query_is_fav',\n        value: true });\n\n    }\n    return filters;\n  };\n  const getData = (filter) => fetchData({\n    pageIndex: 0,\n    pageSize: PAGE_SIZE,\n    sortBy: [\n    {\n      id: 'changed_on_delta_humanized',\n      desc: true }],\n\n\n    filters: getFilters(filter) });\n\n  const renderMenu = (query) => ___EmotionJSX(Menu, null,\n  canEdit && ___EmotionJSX(Menu.Item, { onClick: () => {\n      window.location.href = `/superset/sqllab?savedQueryId=${query.id}`;\n    } },\n  t('Edit')),\n\n  ___EmotionJSX(Menu.Item, { onClick: () => {\n      if (query.id) {\n        copyQueryLink(query.id, addDangerToast, addSuccessToast);\n      }\n    } },\n  t('Share')),\n\n  canDelete && ___EmotionJSX(Menu.Item, { onClick: () => {\n      setQueryDeleteModal(true);\n      setCurrentlyEdited(query);\n    } },\n  t('Delete')));\n\n\n  if (loading)\n  return ___EmotionJSX(LoadingCards, { cover: showThumbnails });\n  return ___EmotionJSX(React.Fragment, null,\n  queryDeleteModal && ___EmotionJSX(DeleteModal, { description: t('This action will permanently delete the saved query.'), onConfirm: () => {\n      if (queryDeleteModal) {\n        handleQueryDelete(currentlyEdited);\n      }\n    }, onHide: () => {\n      setQueryDeleteModal(false);\n    }, open: true, title: t('Delete Query?') }),\n  ___EmotionJSX(SubMenu, { activeChild: queryFilter, tabs: [\n    /* @TODO uncomment when fav functionality is implemented\n    {\n      name: 'Favorite',\n      label: t('Favorite'),\n      onClick: () => {\n        getData('Favorite').then(() => setQueryFilter('Favorite'));\n      },\n    },\n    */\n    {\n      name: 'Mine',\n      label: t('Mine'),\n      onClick: () => getData('Mine').then(() => setQueryFilter('Mine')) }],\n\n    buttons: [\n    {\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \"SQL Query\"),\n\n\n      buttonStyle: 'tertiary',\n      onClick: () => {\n        window.location.href = '/superset/sqllab?new=true';\n      } },\n\n    {\n      name: 'View All Â»',\n      buttonStyle: 'link',\n      onClick: () => {\n        window.location.href = '/savedqueryview/list';\n      } }] }),\n\n\n  queries.length > 0 ? ___EmotionJSX(CardContainer, { showThumbnails: showThumbnails },\n  queries.map((q) => {var _q$sql, _q$sql2;return ___EmotionJSX(CardStyles, { onClick: () => {\n        window.location.href = `/superset/sqllab?savedQueryId=${q.id}`;\n      }, key: q.id },\n    ___EmotionJSX(ListViewCard, { imgURL: \"\", url: `/superset/sqllab?savedQueryId=${q.id}`, title: q.label, imgFallbackURL: \"/static/assets/images/empty-query.svg\", description: t('Ran %s', q.changed_on_delta_humanized), cover: q != null && (_q$sql = q.sql) != null && _q$sql.length && showThumbnails && featureFlag ? ___EmotionJSX(QueryContainer, null,\n      ___EmotionJSX(SyntaxHighlighter, { language: \"sql\", lineProps: {\n          style: {\n            color: 'black',\n            wordBreak: 'break-all',\n            whiteSpace: 'pre-wrap' } },\n\n        style: github, wrapLines: true, lineNumberStyle: {\n          display: 'none' },\n        showLineNumbers: false },\n      shortenSQL(q.sql, 25))) :\n\n      showThumbnails && !(q != null && (_q$sql2 = q.sql) != null && _q$sql2.length) ? false : ___EmotionJSX(React.Fragment, null), actions: ___EmotionJSX(QueryData, null,\n      ___EmotionJSX(ListViewCard.Actions, { onClick: (e) => {\n          e.stopPropagation();\n          e.preventDefault();\n        } },\n      ___EmotionJSX(Dropdown, { overlay: renderMenu(q) },\n      ___EmotionJSX(Icons.MoreVert, { iconColor: theme.colors.grayscale.base })))) }));})) :\n\n\n\n\n  ___EmotionJSX(EmptyState, { tableName: \"SAVED_QUERIES\", tab: queryFilter }));\n\n};\nexport default withToasts(SavedQueries);","map":null,"metadata":{},"sourceType":"module"}