{"ast":null,"code":"import { ascending, bisect, quantileSorted as threshold } from \"d3-array\";\nimport { initRange } from \"./init.js\";\n\nexport default function quantile() {\n  var domain = [],\n  range = [],\n  thresholds = [],\n  unknown;\n\n  function rescale() {\n    var i = 0,n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n    i > 0 ? thresholds[i - 1] : domain[0],\n    i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n\n  };\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function () {\n    return thresholds.slice();\n  };\n\n  scale.copy = function () {\n    return quantile().\n    domain(domain).\n    range(range).\n    unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}