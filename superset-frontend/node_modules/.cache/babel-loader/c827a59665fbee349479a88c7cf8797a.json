{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport Icons from 'src/components/Icons';\nimport {\nCategoricalColorNamespace,\nSupersetClient,\nstyled,\nt } from\n'@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ReportModal from 'src/components/ReportModal';\nimport {\nfetchUISpecificReport,\ntoggleActive,\ndeleteActiveReport } from\n'src/reports/actions/reports';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport HeaderReportActionsDropdown from 'src/components/ReportModal/HeaderReportActionsDropdown';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport EditableTitle from 'src/components/EditableTitle';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport FaveStar from 'src/components/FaveStar';\nimport Timer from 'src/components/Timer';\nimport CachedLabel from 'src/components/CachedLabel';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport ExploreActionButtons from './ExploreActionButtons';\nimport RowCountLabel from './RowCountLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst CHART_STATUS_MAP = {\n  failed: 'danger',\n  loading: 'warning',\n  success: 'success' };\n\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  addHistory: PropTypes.func,\n  can_overwrite: PropTypes.bool.isRequired,\n  can_download: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  form_data: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape };\n\n\nconst StyledHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: space-between;\n\n  span[role='button'] {\n    display: flex;\n    height: 100%;\n  }\n\n  .title-panel {\n    display: flex;\n    align-items: center;\n  }\n\n  .right-button-panel {\n    display: flex;\n    align-items: center;\n\n    > .btn-group {\n      flex: 0 0 auto;\n      margin-left: ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  .action-button {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    margin: 0 ${({ theme }) => theme.gridUnit * 1.5}px 0\n      ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledButtons = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nexport class ExploreChartHeader extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPropertiesModalOpen: false,\n      showingReportModal: false };\n\n    this.openPropertiesModal = this.openPropertiesModal.bind(this);\n    this.closePropertiesModal = this.closePropertiesModal.bind(this);\n    this.showReportModal = this.showReportModal.bind(this);\n    this.hideReportModal = this.hideReportModal.bind(this);\n    this.renderReportModal = this.renderReportModal.bind(this);\n    this.fetchChartDashboardData = this.fetchChartDashboardData.bind(this);\n  }\n\n  componentDidMount() {\n    const { dashboardId } = this.props;\n    if (this.canAddReports()) {\n      const { user, chart } = this.props;\n      // this is in the case that there is an anonymous user.\n      this.props.fetchUISpecificReport(\n      user.userId,\n      'chart_id',\n      'charts',\n      chart.id);\n\n    }\n    if (dashboardId) {\n      this.fetchChartDashboardData();\n    }\n  }\n\n  async fetchChartDashboardData() {\n    const { dashboardId, slice } = this.props;\n    const response = await SupersetClient.get({\n      endpoint: `/api/v1/chart/${slice.slice_id}` });\n\n    const chart = response.json.result;\n    const dashboards = chart.dashboards || [];\n    const dashboard =\n    dashboardId &&\n    dashboards.length &&\n    dashboards.find((d) => d.id === dashboardId);\n\n    if (dashboard && dashboard.json_metadata) {\n      // setting the chart to use the dashboard custom label colors if any\n      const labelColors =\n      JSON.parse(dashboard.json_metadata).label_colors || {};\n      const categoricalNamespace = CategoricalColorNamespace.getNamespace();\n\n      Object.keys(labelColors).forEach((label) => {\n        categoricalNamespace.setColor(label, labelColors[label]);\n      });\n    }\n  }\n\n  getSliceName() {\n    const { sliceName, table_name: tableName } = this.props;\n    const title = sliceName || t('%s - untitled', tableName);\n\n    return title;\n  }\n\n  postChartFormData() {\n    this.props.actions.postChartFormData(\n    this.props.form_data,\n    true,\n    this.props.timeout,\n    this.props.chart.id,\n    this.props.ownState);\n\n  }\n\n  openPropertiesModal() {\n    this.setState({\n      isPropertiesModalOpen: true });\n\n  }\n\n  closePropertiesModal() {\n    this.setState({\n      isPropertiesModalOpen: false });\n\n  }\n\n  showReportModal() {\n    this.setState({ showingReportModal: true });\n  }\n\n  hideReportModal() {\n    this.setState({ showingReportModal: false });\n  }\n\n  renderReportModal() {\n    const attachedReportExists = !!Object.keys(this.props.reports).length;\n    return attachedReportExists ?\n    ___EmotionJSX(HeaderReportActionsDropdown, {\n      showReportModal: this.showReportModal,\n      hideReportModal: this.hideReportModal,\n      toggleActive: this.props.toggleActive,\n      deleteActiveReport: this.props.deleteActiveReport }) :\n\n\n    ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", {\n      role: \"button\",\n      title: t('Schedule email report'),\n      tabIndex: 0,\n      className: \"action-button\",\n      onClick: this.showReportModal },\n\n    ___EmotionJSX(Icons.Calendar, null)));\n\n\n\n  }\n\n  canAddReports() {\n    if (!isFeatureEnabled(FeatureFlag.ALERT_REPORTS)) {\n      return false;\n    }\n    const { user } = this.props;\n    if (!user) {\n      // this is in the case that there is an anonymous user.\n      return false;\n    }\n    const roles = Object.keys(user.roles || []);\n    const permissions = roles.map((key) =>\n    user.roles[key].filter(\n    (perms) => perms[0] === 'menu_access' && perms[1] === 'Manage'));\n\n\n    return permissions[0].length > 0;\n  }\n\n  render() {\n    const { user, form_data: formData, slice } = this.props;\n    const {\n      chartStatus,\n      chartUpdateEndTime,\n      chartUpdateStartTime,\n      latestQueryFormData,\n      queriesResponse } =\n    this.props.chart;\n    // TODO: when will get appropriate design for multi queries use all results and not first only\n    const queryResponse = queriesResponse == null ? void 0 : queriesResponse[0];\n    const chartFinished = ['failed', 'rendered', 'success'].includes(\n    this.props.chart.chartStatus);\n\n    return (\n      ___EmotionJSX(StyledHeader, { id: \"slice-header\", className: \"panel-title-large\" },\n      ___EmotionJSX(\"div\", { className: \"title-panel\" },\n      (slice == null ? void 0 : slice.certified_by) &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(CertifiedIcon, {\n        certifiedBy: slice.certified_by,\n        details: slice.certification_details }),\n      ' '),\n\n\n      ___EmotionJSX(EditableTitle, {\n        title: this.getSliceName(),\n        canEdit: !this.props.slice || this.props.can_overwrite,\n        onSaveTitle: this.props.actions.updateChartTitle }),\n\n\n      this.props.slice &&\n      ___EmotionJSX(StyledButtons, null,\n      user.userId &&\n      ___EmotionJSX(FaveStar, {\n        itemId: this.props.slice.slice_id,\n        fetchFaveStar: this.props.actions.fetchFaveStar,\n        saveFaveStar: this.props.actions.saveFaveStar,\n        isStarred: this.props.isStarred,\n        showTooltip: true }),\n\n\n      ___EmotionJSX(PropertiesModal, {\n        show: this.state.isPropertiesModalOpen,\n        onHide: this.closePropertiesModal,\n        onSave: this.props.sliceUpdated,\n        slice: this.props.slice }),\n\n      ___EmotionJSX(Tooltip, {\n        id: \"edit-desc-tooltip\",\n        title: t('Edit chart properties') },\n\n      ___EmotionJSX(\"span\", {\n        role: \"button\",\n        tabIndex: 0,\n        className: \"edit-desc-icon\",\n        onClick: this.openPropertiesModal },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-edit\" }))),\n\n\n      this.props.chart.sliceFormData &&\n      ___EmotionJSX(AlteredSliceTag, {\n        className: \"altered\",\n        origFormData: this.props.chart.sliceFormData,\n        currentFormData: formData }))),\n\n\n\n\n\n      ___EmotionJSX(\"div\", { className: \"right-button-panel\" },\n      chartFinished && queryResponse &&\n      ___EmotionJSX(RowCountLabel, {\n        rowcount: Number(queryResponse.rowcount) || 0,\n        limit: Number(formData.row_limit) || 0 }),\n\n\n      chartFinished && queryResponse && queryResponse.is_cached &&\n      ___EmotionJSX(CachedLabel, {\n        onClick: this.postChartFormData.bind(this),\n        cachedTimestamp: queryResponse.cached_dttm }),\n\n\n      ___EmotionJSX(Timer, {\n        startTime: chartUpdateStartTime,\n        endTime: chartUpdateEndTime,\n        isRunning: chartStatus === 'loading',\n        status: CHART_STATUS_MAP[chartStatus] }),\n\n      this.canAddReports() && this.renderReportModal(),\n      ___EmotionJSX(ReportModal, {\n        show: this.state.showingReportModal,\n        onHide: this.hideReportModal,\n        props: {\n          userId: this.props.user.userId,\n          userEmail: this.props.user.email,\n          chart: this.props.chart,\n          creationMethod: 'charts' } }),\n\n\n      ___EmotionJSX(ExploreActionButtons, {\n        actions: {\n          ...this.props.actions,\n          openPropertiesModal: this.openPropertiesModal },\n\n        slice: this.props.slice,\n        canDownloadCSV: this.props.can_download,\n        chartStatus: chartStatus,\n        latestQueryFormData: latestQueryFormData,\n        queryResponse: queryResponse }))));\n\n\n\n\n  }}\n\n\nExploreChartHeader.propTypes = propTypes;\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n  { sliceUpdated, fetchUISpecificReport, toggleActive, deleteActiveReport },\n  dispatch);\n\n}\n\nexport default connect(null, mapDispatchToProps)(ExploreChartHeader);","map":null,"metadata":{},"sourceType":"module"}