{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Select } from 'src/components';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction isLabeledValue(arg) {\n  return arg.value !== undefined;\n}\nconst SelectAsyncControl = ({ addDangerToast, allowClear = true, ariaLabel, dataEndpoint, multi = true, mutator, onChange, placeholder, value, ...props }) => {\n  const [options, setOptions] = useState([]);\n  const handleOnChange = (val) => {\n    let onChangeVal = val;\n    if (Array.isArray(val)) {\n      const values = val.map((v) => isLabeledValue(v) ? v.value : v);\n      onChangeVal = values;\n    }\n    if (isLabeledValue(val)) {\n      onChangeVal = val.value;\n    }\n    onChange(onChangeVal);\n  };\n  const getValue = () => {\n    const currentValue = value || (props.default !== undefined ? props.default : undefined);\n    // safety check - the value is intended to be undefined but null was used\n    if (currentValue === null && !options.find((o) => o.value === null)) {\n      return undefined;\n    }\n    return currentValue;\n  };\n  useEffect(() => {\n    const onError = (response) => getClientErrorObject(response).then((e) => {\n      const { error } = e;\n      addDangerToast(`${t('Error while fetching data')}: ${error}`);\n    });\n    const loadOptions = () => SupersetClient.get({\n      endpoint: dataEndpoint }).\n\n    then((response) => {\n      const data = mutator ? mutator(response.json) : response.json.result;\n      setOptions(data);\n    }).\n    catch(onError);\n    loadOptions();\n  }, [addDangerToast, dataEndpoint, mutator]);\n  return ___EmotionJSX(Select, { allowClear: allowClear, ariaLabel: ariaLabel || t('Select ...'), value: getValue(), header: ___EmotionJSX(ControlHeader, props), mode: multi ? 'multiple' : 'single', onChange: handleOnChange, options: options, placeholder: placeholder });\n};\nexport default withToasts(SelectAsyncControl);","map":null,"metadata":{},"sourceType":"module"}