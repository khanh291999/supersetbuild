{"ast":null,"code":"import { SyncRegistry, OverwritePolicy } from '@encodable/registry';\nexport default class FormatterRegistry extends SyncRegistry {\n  constructor({\n    overwritePolicy = OverwritePolicy.WARN,\n    ...rest })\n  {\n    super({\n      overwritePolicy,\n      ...rest });\n\n  }\n  /**\n   * Subclasses must implement this to create formatter from format string.\n   * Worst-case can return `fallbackFormatter`.\n   */\n\n\n  /**\n   * Get a Formatter by name\n   * @param format Formatter name, usually is a format string\n   */\n  get(format) {\n    const targetFormat = (\"\" + (format === null || typeof format === 'undefined' || format.trim().length === 0 ? this.getDefaultKey() : format)).trim();\n\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat);\n    } // Create new formatter if does not exist\n\n\n    const formatter = this.createFormatter(targetFormat);\n    this.registerValue(targetFormat, formatter);\n    return formatter;\n  }\n  /**\n   * Format value with the named Formatter\n   * @param format Formatter name, usually is a format string\n   * @param value value to be formatted\n   */\n\n\n  format(format, value) {\n    return this.get(format)(value);\n  }}","map":null,"metadata":{},"sourceType":"module"}