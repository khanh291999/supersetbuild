{"ast":null,"code":"import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";import _mapValues from \"lodash/fp/mapValues\";import _isEmpty from \"lodash/isEmpty\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'./getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return allFilterBoxChartIds.includes(chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(\n    activeFilters).\n    filter(([, { scope: chartIds }]) => chartIds.includes(chartId));\n    appliedFilterValuesByChart[chartId] = _flow(\n    _keyBy(\n    ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column),\n\n    _mapValues(([, { values }]) => values))(\n    applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\nexport function getChartIdsInFilterScope({\n  filterScope = DASHBOARD_FILTER_SCOPE_GLOBAL })\n{\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n    component.type === CHART_TYPE &&\n    component.meta &&\n    component.meta.chartId &&\n    !immuneChartIds.includes(component.meta.chartId))\n    {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach((child) =>\n      traverse(chartIds, allComponents[child], immuneChartIds));\n\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } = filterScope;\n  scopeComponentIds.forEach((componentId) =>\n  traverse(chartIds, allComponents[componentId], immuneChartIds));\n\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  allFilterBoxChartIds = Object.values(dashboardFilters).map(\n  (filter) => filter.chartId);\n\n\n  // clear cache\n  if (!_isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach((column) => {\n      if (\n      Array.isArray(columns[column]) ?\n      columns[column].length :\n      columns[column] !== undefined)\n      {\n        // remove filter itself\n        const scope = getChartIdsInFilterScope({\n          filterScope: scopes[column] }).\n        filter((id) => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope };\n\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters };\n\n  }, {});\n}","map":null,"metadata":{},"sourceType":"module"}