{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nFILTER_CONFIG_ATTRIBUTES,\nTIME_FILTER_LABELS,\nTIME_FILTER_MAP } from\n'src/explore/constants';\n\nexport default function getFilterConfigsFromFormdata(form_data = {}) {\n  const {\n    date_filter,\n    filter_configs = [],\n    show_druid_time_granularity,\n    show_druid_time_origin,\n    show_sqla_time_column,\n    show_sqla_time_granularity } =\n  form_data;\n  let configs = filter_configs.reduce(\n  ({ columns, labels }, config) => {\n    let defaultValues = config[FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE];\n\n    // treat empty string as null (no default value)\n    if (defaultValues === '') {\n      defaultValues = null;\n    }\n\n    // defaultValue could be ; separated values,\n    // could be null or ''\n    if (defaultValues && config[FILTER_CONFIG_ATTRIBUTES.MULTIPLE]) {\n      defaultValues = config.defaultValue.split(';');\n    }\n\n    const updatedColumns = {\n      ...columns,\n      [config.column]: config.vals || defaultValues };\n\n    const updatedLabels = {\n      ...labels,\n      [config.column]: config.label };\n\n\n    return {\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  },\n  { columns: {}, labels: {} });\n\n\n  if (date_filter) {\n    let updatedColumns = {\n      ...configs.columns,\n      [TIME_FILTER_MAP.time_range]: form_data.time_range };\n\n    const updatedLabels = {\n      ...configs.labels,\n      ...Object.entries(TIME_FILTER_MAP).reduce(\n      (map, [key, value]) => ({\n        ...map,\n        [value]: TIME_FILTER_LABELS[key] }),\n\n      {}) };\n\n\n\n    if (show_sqla_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.time_grain_sqla]: form_data.time_grain_sqla };\n\n    }\n\n    if (show_sqla_time_column) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity_sqla]: form_data.granularity_sqla };\n\n    }\n\n    if (show_druid_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity]: form_data.granularity };\n\n    }\n\n    if (show_druid_time_origin) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.druid_time_origin]: form_data.druid_time_origin };\n\n    }\n\n    configs = {\n      ...configs,\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  }\n  return configs;\n}","map":null,"metadata":{},"sourceType":"module"}