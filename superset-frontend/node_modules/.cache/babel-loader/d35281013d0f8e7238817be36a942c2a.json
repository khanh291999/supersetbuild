{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Collapse, Typography, Tooltip } from 'src/common/components';\nimport Icons from 'src/components/Icons';\nimport { areObjectsEqual } from 'src/reduxUtils';\nimport { getFilterValueForDisplay } from './utils';\nimport { useFilters } from '../state';\nimport { getFilterBarTestId } from '../index';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FilterHeader = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\nconst StyledCollapse = styled(Collapse)`\n  &.ant-collapse-ghost > .ant-collapse-item {\n    & > .ant-collapse-content > .ant-collapse-content-box {\n      padding: 0;\n      padding-top: 0;\n      padding-bottom: 0;\n      font-size: ${({ theme }) => theme.typography.sizes.s}px;\n    }\n    & > .ant-collapse-header {\n      padding: 0;\n      display: flex;\n      align-items: center;\n      flex-direction: row-reverse;\n      justify-content: flex-end;\n      max-width: max-content;\n      & .ant-collapse-arrow {\n        position: static;\n        padding-left: ${({ theme }) => theme.gridUnit}px;\n      }\n  }\n`;\nconst StyledFilterRow = styled.div`\n  padding-top: ${({ theme }) => theme.gridUnit}px;\n  padding-bottom: ${({ theme }) => theme.gridUnit}px;\n`;\nconst FiltersHeader = ({ dataMask, filterSet }) => {\n  const theme = useTheme();\n  const filters = useFilters();\n  const filterValues = Object.values(filters);\n  let resultFilters = filterValues != null ? filterValues : [];\n  if (filterSet != null && filterSet.nativeFilters) {\n    resultFilters = Object.values(filterSet == null ? void 0 : filterSet.nativeFilters);\n  }\n  const getFiltersHeader = () => ___EmotionJSX(FilterHeader, null,\n  ___EmotionJSX(Typography.Text, { type: \"secondary\" },\n  t('Filters (%d)', resultFilters.length)));\n\n\n  const getFilterRow = ({ id, name }) => {var _filterSet$nativeFilt, _dataMask$id, _dataMask$id$filterSt;\n    const changedFilter = filterSet &&\n    !areObjectsEqual(filters[id], filterSet == null ? void 0 : (_filterSet$nativeFilt = filterSet.nativeFilters) == null ? void 0 : _filterSet$nativeFilt[id], {\n      ignoreUndefined: true });\n\n    const removedFilter = !Object.keys(filters).includes(id);\n    return ___EmotionJSX(Tooltip, { title: removedFilter &&\n      t(\"This filter doesn't exist in dashboard. It will not be applied.\") ||\n      changedFilter &&\n      t('Filter metadata changed in dashboard. It will not be applied.'), placement: \"bottomLeft\", key: id },\n    ___EmotionJSX(StyledFilterRow, null,\n    ___EmotionJSX(Typography.Text, { strong: true, delete: removedFilter, mark: changedFilter },\n    name, \":\\xA0\"),\n\n    ___EmotionJSX(Typography.Text, { delete: removedFilter, mark: changedFilter },\n    getFilterValueForDisplay(dataMask == null ? void 0 : (_dataMask$id = dataMask[id]) == null ? void 0 : (_dataMask$id$filterSt = _dataMask$id.filterState) == null ? void 0 : _dataMask$id$filterSt.value) || ___EmotionJSX(Typography.Text, { type: \"secondary\" }, t('None')))));\n\n\n\n  };\n  const getExpandIcon = ({ isActive }) => {\n    const color = theme.colors.grayscale.base;\n    const Icon = isActive ? Icons.CaretUpOutlined : Icons.CaretDownOutlined;\n    return ___EmotionJSX(Icon, { iconColor: color });\n  };\n  return ___EmotionJSX(StyledCollapse, { ghost: true, expandIconPosition: \"right\", defaultActiveKey: !filterSet ? ['filters'] : undefined, expandIcon: getExpandIcon },\n  ___EmotionJSX(Collapse.Panel, _extends({}, getFilterBarTestId('collapse-filter-set-description'), { header: getFiltersHeader(), key: \"filters\" }),\n  resultFilters.map(getFilterRow)));\n\n\n};\nexport default FiltersHeader;","map":null,"metadata":{},"sourceType":"module"}