{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport rison from 'rison';\nimport { SupersetClient, styled, t, useTheme } from '@superset-ui/core';\nimport { buildTimeRangeString, formatTimeRange, COMMON_RANGE_VALUES_SET, CALENDAR_RANGE_VALUES_SET, FRAME_OPTIONS, customTimeRangeDecode } from 'src/explore/components/controls/DateFilterControl/utils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport Button from 'src/components/Button';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport Label from 'src/components/Label';\nimport Popover from 'src/components/Popover';\nimport { Divider } from 'src/common/components';\nimport Icons from 'src/components/Icons';\nimport { Select } from 'src/components';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { DEFAULT_TIME_RANGE } from 'src/explore/constants';\nimport { useDebouncedEffect } from 'src/explore/exploreUtils';\nimport { SLOW_DEBOUNCE } from 'src/constants';\nimport { testWithId } from 'src/utils/testUtils';\nimport { CommonFrame, CalendarFrame, CustomFrame, AdvancedFrame } from './components';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst guessFrame = (timeRange) => {\n  if (COMMON_RANGE_VALUES_SET.has(timeRange)) {\n    return 'Common';\n  }\n  if (CALENDAR_RANGE_VALUES_SET.has(timeRange)) {\n    return 'Calendar';\n  }\n  if (timeRange === 'No filter') {\n    return 'No filter';\n  }\n  if (customTimeRangeDecode(timeRange).matchedFlag) {\n    return 'Custom';\n  }\n  return 'Advanced';\n};\nconst fetchTimeRange = async (timeRange, endpoints) => {\n  const query = rison.encode(timeRange);\n  const endpoint = `/api/v1/time_range/?q=${query}`;\n  try {var _response$json, _response$json$result, _response$json2, _response$json2$resul;\n    const response = await SupersetClient.get({ endpoint });\n    const timeRangeString = buildTimeRangeString((response == null ? void 0 : (_response$json = response.json) == null ? void 0 : (_response$json$result = _response$json.result) == null ? void 0 : _response$json$result.since) || '', (response == null ? void 0 : (_response$json2 = response.json) == null ? void 0 : (_response$json2$resul = _response$json2.result) == null ? void 0 : _response$json2$resul.until) || '');\n    return {\n      value: formatTimeRange(timeRangeString, endpoints) };\n\n  }\n  catch (response) {\n    const clientError = await getClientErrorObject(response);\n    return {\n      error: clientError.message || clientError.error };\n\n  }\n};\nconst StyledPopover = styled(Popover)``;\nconst StyledRangeType = styled(Select)`\n  width: 272px;\n`;\nconst ContentStyleWrapper = styled.div`\n  .ant-row {\n    margin-top: 8px;\n  }\n\n  .ant-input-number {\n    width: 100%;\n  }\n\n  .ant-picker {\n    padding: 4px 17px 4px;\n    border-radius: 4px;\n    width: 100%;\n  }\n\n  .ant-divider-horizontal {\n    margin: 16px 0;\n  }\n\n  .control-label {\n    font-size: 11px;\n    font-weight: 500;\n    color: #b2b2b2;\n    line-height: 16px;\n    text-transform: uppercase;\n    margin: 8px 0;\n  }\n\n  .vertical-radio {\n    display: block;\n    height: 40px;\n    line-height: 40px;\n  }\n\n  .section-title {\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 24px;\n    margin-bottom: 8px;\n  }\n\n  .control-anchor-to {\n    margin-top: 16px;\n  }\n\n  .control-anchor-to-datetime {\n    width: 217px;\n  }\n\n  .footer {\n    text-align: right;\n  }\n`;\nconst IconWrapper = styled.span`\n  span {\n    margin-right: ${({ theme }) => 2 * theme.gridUnit}px;\n    vertical-align: middle;\n  }\n  .text {\n    vertical-align: middle;\n  }\n  .error {\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n`;\nexport const DATE_FILTER_CONTROL_TEST_ID = 'date-filter-control';\nexport const getDateFilterControlTestId = testWithId(DATE_FILTER_CONTROL_TEST_ID);\nexport default function DateFilterLabel(props) {\n  const { value = DEFAULT_TIME_RANGE, endpoints, onChange, type } = props;\n  const [actualTimeRange, setActualTimeRange] = useState(value);\n  const [show, setShow] = useState(false);\n  const guessedFrame = useMemo(() => guessFrame(value), [value]);\n  const [frame, setFrame] = useState(guessedFrame);\n  const [lastFetchedTimeRange, setLastFetchedTimeRange] = useState(value);\n  const [timeRangeValue, setTimeRangeValue] = useState(value);\n  const [validTimeRange, setValidTimeRange] = useState(false);\n  const [evalResponse, setEvalResponse] = useState(value);\n  const [tooltipTitle, setTooltipTitle] = useState(value);\n  useEffect(() => {\n    fetchTimeRange(value, endpoints).then(({ value: actualRange, error }) => {\n      if (error) {\n        setEvalResponse(error || '');\n        setValidTimeRange(false);\n        setTooltipTitle(value || '');\n      } else\n      {\n        /*\n          HRT == human readable text\n          ADR == actual datetime range\n          +--------------+------+----------+--------+----------+-----------+\n          |              | Last | Previous | Custom | Advanced | No Filter |\n          +--------------+------+----------+--------+----------+-----------+\n          | control pill | HRT  | HRT      | ADR    | ADR      |   HRT     |\n          +--------------+------+----------+--------+----------+-----------+\n          | tooltip      | ADR  | ADR      | HRT    | HRT      |   ADR     |\n          +--------------+------+----------+--------+----------+-----------+\n        */\n        if (guessedFrame === 'Common' ||\n        guessedFrame === 'Calendar' ||\n        guessedFrame === 'No filter') {\n          setActualTimeRange(value);\n          setTooltipTitle(type === 'error' ?\n          t('Default value is required') :\n          actualRange || '');\n        } else\n        {\n          setActualTimeRange(actualRange || '');\n          setTooltipTitle(value || '');\n        }\n        setValidTimeRange(true);\n      }\n      setLastFetchedTimeRange(value);\n    });\n  }, [value]);\n  useDebouncedEffect(() => {\n    if (lastFetchedTimeRange !== timeRangeValue) {\n      fetchTimeRange(timeRangeValue, endpoints).then(({ value: actualRange, error }) => {\n        if (error) {\n          setEvalResponse(error || '');\n          setValidTimeRange(false);\n        } else\n        {\n          setEvalResponse(actualRange || '');\n          setValidTimeRange(true);\n        }\n        setLastFetchedTimeRange(timeRangeValue);\n      });\n    }\n  }, SLOW_DEBOUNCE, [timeRangeValue]);\n  function onSave() {\n    onChange(timeRangeValue);\n    setShow(false);\n  }\n  function onOpen() {\n    setTimeRangeValue(value);\n    setFrame(guessedFrame);\n    setShow(true);\n  }\n  function onHide() {\n    setTimeRangeValue(value);\n    setFrame(guessedFrame);\n    setShow(false);\n  }\n  const togglePopover = () => {\n    if (show) {\n      onHide();\n    } else\n    {\n      setShow(true);\n    }\n  };\n  function onChangeFrame(value) {\n    if (value === 'No filter') {\n      setTimeRangeValue('No filter');\n    }\n    setFrame(value);\n  }\n  const theme = useTheme();\n  const overlayContent = ___EmotionJSX(ContentStyleWrapper, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('RANGE TYPE')),\n  ___EmotionJSX(StyledRangeType, { ariaLabel: t('RANGE TYPE'), options: FRAME_OPTIONS, value: frame, onChange: onChangeFrame }),\n  frame !== 'No filter' && ___EmotionJSX(Divider, null),\n  frame === 'Common' && ___EmotionJSX(CommonFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n  frame === 'Calendar' && ___EmotionJSX(CalendarFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n  frame === 'Advanced' && ___EmotionJSX(AdvancedFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n  frame === 'Custom' && ___EmotionJSX(CustomFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n  frame === 'No filter' && ___EmotionJSX(\"div\", null),\n  ___EmotionJSX(Divider, null),\n  ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(\"div\", { className: \"section-title\" }, t('Actual time range')),\n  validTimeRange && ___EmotionJSX(\"div\", null, evalResponse),\n  !validTimeRange && ___EmotionJSX(IconWrapper, { className: \"warning\" },\n  ___EmotionJSX(Icons.ErrorSolidSmall, { iconColor: theme.colors.error.base }),\n  ___EmotionJSX(\"span\", { className: \"text error\" }, evalResponse))),\n\n\n  ___EmotionJSX(Divider, null),\n  ___EmotionJSX(\"div\", { className: \"footer\" },\n  ___EmotionJSX(Button, { buttonStyle: \"secondary\", cta: true, key: \"cancel\", onClick: onHide },\n  t('CANCEL')),\n\n  ___EmotionJSX(Button, _extends({ buttonStyle: \"primary\", cta: true, disabled: !validTimeRange, key: \"apply\", onClick: onSave }, getDateFilterControlTestId('apply-button')),\n  t('APPLY'))));\n\n\n\n  const title = ___EmotionJSX(IconWrapper, null,\n  ___EmotionJSX(Icons.EditAlt, { iconColor: theme.colors.grayscale.base }),\n  ___EmotionJSX(\"span\", { className: \"text\" }, t('Edit time range')));\n\n  const overlayStyle = {\n    width: '600px' };\n\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ControlHeader, props),\n  ___EmotionJSX(StyledPopover, { placement: \"right\", trigger: \"click\", content: overlayContent, title: title, defaultVisible: show, visible: show, onVisibleChange: togglePopover, overlayStyle: overlayStyle },\n  ___EmotionJSX(Tooltip, { placement: \"top\", title: tooltipTitle },\n  ___EmotionJSX(Label, { className: \"pointer\", onClick: onOpen },\n  actualTimeRange))));\n\n\n\n\n}","map":null,"metadata":{},"sourceType":"module"}