{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ActionCreators as UndoActionCreators } from 'redux-undo';\nimport { t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\nimport { TABS_TYPE, ROW_TYPE } from 'src/dashboard/util/componentTypes';\nimport {\nDASHBOARD_ROOT_ID,\nNEW_COMPONENTS_SOURCE_ID,\nDASHBOARD_HEADER_ID } from\n'src/dashboard/util/constants';\nimport dropOverflowsParent from 'src/dashboard/util/dropOverflowsParent';\nimport findParentId from 'src/dashboard/util/findParentId';\nimport isInDifferentFilterScopes from 'src/dashboard/util/isInDifferentFilterScopes';\nimport { updateLayoutComponents } from './dashboardFilters';\nimport { setUnsavedChanges } from './dashboardState';\n\n// Component CRUD -------------------------------------------------------------\nexport const UPDATE_COMPONENTS = 'UPDATE_COMPONENTS';\n\n// this is a helper that takes an action as input and dispatches\n// an additional setUnsavedChanges(true) action after the dispatch in the case\n// that dashboardState.hasUnsavedChanges is false.\nfunction setUnsavedChangesAfterAction(action) {\n  return (...args) => (dispatch, getState) => {\n    const result = action(...args);\n    if (typeof result === 'function') {\n      dispatch(result(dispatch, getState));\n    } else {\n      dispatch(result);\n    }\n\n    const isComponentLevelEvent =\n    result.type === UPDATE_COMPONENTS &&\n    result.payload &&\n    result.payload.nextComponents;\n    // trigger dashboardFilters state update if dashboard layout is changed.\n    if (!isComponentLevelEvent) {\n      const components = getState().dashboardLayout.present;\n      dispatch(updateLayoutComponents(components));\n    }\n\n    if (!getState().dashboardState.hasUnsavedChanges) {\n      dispatch(setUnsavedChanges(true));\n    }\n  };\n}\n\nexport const updateComponents = setUnsavedChangesAfterAction(\n(nextComponents) => ({\n  type: UPDATE_COMPONENTS,\n  payload: {\n    nextComponents } }));\n\n\n\n\nexport function updateDashboardTitle(text) {\n  return (dispatch, getState) => {\n    const { dashboardLayout } = getState();\n    dispatch(\n    updateComponents({\n      [DASHBOARD_HEADER_ID]: {\n        ...dashboardLayout.present[DASHBOARD_HEADER_ID],\n        meta: {\n          text } } }));\n\n\n\n\n  };\n}\n\nexport const DASHBOARD_TITLE_CHANGED = 'DASHBOARD_TITLE_CHANGED';\n\n// call this one when it's not an undo-able action\nexport function dashboardTitleChanged(text) {\n  return {\n    type: DASHBOARD_TITLE_CHANGED,\n    text };\n\n}\n\nexport const DELETE_COMPONENT = 'DELETE_COMPONENT';\nexport const deleteComponent = setUnsavedChangesAfterAction((id, parentId) => ({\n  type: DELETE_COMPONENT,\n  payload: {\n    id,\n    parentId } }));\n\n\n\nexport const CREATE_COMPONENT = 'CREATE_COMPONENT';\nexport const createComponent = setUnsavedChangesAfterAction((dropResult) => ({\n  type: CREATE_COMPONENT,\n  payload: {\n    dropResult } }));\n\n\n\n// Tabs -----------------------------------------------------------------------\nexport const CREATE_TOP_LEVEL_TABS = 'CREATE_TOP_LEVEL_TABS';\nexport const createTopLevelTabs = setUnsavedChangesAfterAction((dropResult) => ({\n  type: CREATE_TOP_LEVEL_TABS,\n  payload: {\n    dropResult } }));\n\n\n\nexport const DELETE_TOP_LEVEL_TABS = 'DELETE_TOP_LEVEL_TABS';\nexport const deleteTopLevelTabs = setUnsavedChangesAfterAction(() => ({\n  type: DELETE_TOP_LEVEL_TABS,\n  payload: {} }));\n\n\n// Resize ---------------------------------------------------------------------\nexport const RESIZE_COMPONENT = 'RESIZE_COMPONENT';\nexport function resizeComponent({ id, width, height }) {\n  return (dispatch, getState) => {\n    const { dashboardLayout: undoableLayout } = getState();\n    const { present: dashboard } = undoableLayout;\n    const component = dashboard[id];\n    const widthChanged = width && component.meta.width !== width;\n    const heightChanged = height && component.meta.height !== height;\n    if (component && (widthChanged || heightChanged)) {\n      // update the size of this component\n      const updatedComponents = {\n        [id]: {\n          ...component,\n          meta: {\n            ...component.meta,\n            width: width || component.meta.width,\n            height: height || component.meta.height } } };\n\n\n\n\n      dispatch(updateComponents(updatedComponents));\n    }\n  };\n}\n\n// Drag and drop --------------------------------------------------------------\nexport const MOVE_COMPONENT = 'MOVE_COMPONENT';\nconst moveComponent = setUnsavedChangesAfterAction((dropResult) => ({\n  type: MOVE_COMPONENT,\n  payload: {\n    dropResult } }));\n\n\n\nexport const HANDLE_COMPONENT_DROP = 'HANDLE_COMPONENT_DROP';\nexport function handleComponentDrop(dropResult) {\n  return (dispatch, getState) => {\n    const overflowsParent = dropOverflowsParent(\n    dropResult,\n    getState().dashboardLayout.present);\n\n\n    if (overflowsParent) {\n      return dispatch(\n      addWarningToast(\n      t(\n      `There is not enough space for this component. Try decreasing its width, or increasing the destination width.`)));\n\n\n\n    }\n\n    const { source, destination } = dropResult;\n    const droppedOnRoot = destination && destination.id === DASHBOARD_ROOT_ID;\n    const isNewComponent = source.id === NEW_COMPONENTS_SOURCE_ID;\n    const dashboardRoot = getState().dashboardLayout.present[DASHBOARD_ROOT_ID];\n    const rootChildId =\n    dashboardRoot && dashboardRoot.children ? dashboardRoot.children[0] : '';\n\n    if (droppedOnRoot) {\n      dispatch(createTopLevelTabs(dropResult));\n    } else if (destination && isNewComponent) {\n      dispatch(createComponent(dropResult));\n    } else if (\n    // Add additional allow-to-drop logic for tag/tags source.\n    // We only allow\n    // - top-level tab => top-level tab: rearrange top-level tab order\n    // - nested tab => top-level tab: allow row tab become top-level tab\n    // Dashboard does not allow top-level tab become nested tab, to avoid\n    // nested tab inside nested tab.\n    source.type === TABS_TYPE &&\n    destination.type === TABS_TYPE &&\n    source.id === rootChildId &&\n    destination.id !== rootChildId)\n    {\n      return dispatch(\n      addWarningToast(t(`Can not move top level tab into nested tabs`)));\n\n    } else if (\n    destination &&\n    source &&\n    !(\n\n    destination.id === source.id && destination.index === source.index))\n\n    {\n      dispatch(moveComponent(dropResult));\n    }\n\n    // call getState() again down here in case redux state is stale after\n    // previous dispatch(es)\n    const { dashboardFilters, dashboardLayout: undoableLayout } = getState();\n\n    // if we moved a child from a Tab or Row parent and it was the only child, delete the parent.\n    if (!isNewComponent) {\n      const { present: layout } = undoableLayout;\n      const sourceComponent = layout[source.id] || {};\n      const destinationComponent = layout[destination.id] || {};\n      if (\n      (sourceComponent.type === TABS_TYPE ||\n      sourceComponent.type === ROW_TYPE) &&\n      sourceComponent.children &&\n      sourceComponent.children.length === 0)\n      {\n        const parentId = findParentId({\n          childId: source.id,\n          layout });\n\n        dispatch(deleteComponent(source.id, parentId));\n      }\n\n      // show warning if item has been moved between different scope\n      if (\n      isInDifferentFilterScopes({\n        dashboardFilters,\n        source: (sourceComponent.parents || []).concat(source.id),\n        destination: (destinationComponent.parents || []).concat(\n        destination.id) }))\n\n\n      {\n        dispatch(\n        addWarningToast(\n        t('This chart has been moved to a different filter scope.')));\n\n\n      }\n    }\n\n    return null;\n  };\n}\n\n// Undo redo ------------------------------------------------------------------\nexport function undoLayoutAction() {\n  return (dispatch, getState) => {\n    dispatch(UndoActionCreators.undo());\n\n    const { dashboardLayout, dashboardState } = getState();\n\n    if (\n    dashboardLayout.past.length === 0 &&\n    !dashboardState.maxUndoHistoryExceeded &&\n    !dashboardState.updatedColorScheme)\n    {\n      dispatch(setUnsavedChanges(false));\n    }\n  };\n}\n\nexport const redoLayoutAction = setUnsavedChangesAfterAction(\nUndoActionCreators.redo);\n\n\n// Update component parents list ----------------------------------------------\nexport const UPDATE_COMPONENTS_PARENTS_LIST = 'UPDATE_COMPONENTS_PARENTS_LIST';","map":null,"metadata":{},"sourceType":"module"}