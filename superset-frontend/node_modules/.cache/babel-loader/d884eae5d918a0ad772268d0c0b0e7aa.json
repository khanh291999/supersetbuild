{"ast":null,"code":"function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\nimport { SyncRegistry } from '@encodable/registry';\nimport ColorNamespace from './ColorNamespace';\nexport const DEFAULT_NAMESPACE = 'DEFAULT_NAMESPACE';\nexport default class ColorNamespaceRegistry {\n  constructor({\n    name = 'ColorNamespaceRegistry',\n    globalId,\n    ...rest } =\n  {}) {\n    _defineProperty(this, \"namespaceStates\", void 0);\n\n    _defineProperty(this, \"namespaceInstances\", void 0);\n\n    // only make the state global is using globalId\n    this.namespaceStates = new SyncRegistry({\n      name,\n      globalId,\n      ...rest });\n    // the instances are always local since these are wrappers\n\n    this.namespaceInstances = new SyncRegistry({\n      name,\n      ...rest });\n\n\n    if (typeof this.namespaceStates.getDefaultKey() === 'undefined') {\n      this.setDefaultNamespace(DEFAULT_NAMESPACE);\n    }\n  }\n\n  getDefaultNamespace() {var _this$namespaceStates;\n    return (_this$namespaceStates = this.namespaceStates.getDefaultKey()) != null ? _this$namespaceStates : DEFAULT_NAMESPACE;\n  }\n\n  setDefaultNamespace(namespace) {\n    this.namespaceStates.setDefaultKey(namespace);\n    this.namespaceInstances.setDefaultKey(namespace);\n    return this;\n  }\n\n  has(namespace) {\n    return this.namespaceStates.has(namespace);\n  }\n\n  get(namespace = this.getDefaultNamespace()) {\n    if (!this.namespaceStates.has(namespace)) {\n      const ns = new ColorNamespace(namespace);\n      this.namespaceStates.registerValue(namespace, ns.state);\n      this.namespaceInstances.registerValue(namespace, ns);\n      return ns;\n    }\n\n    if (this.namespaceInstances.has(namespace)) {\n      return this.namespaceInstances.get(namespace);\n    }\n\n    const ns = new ColorNamespace(this.namespaceStates.get(namespace));\n    this.namespaceInstances.registerValue(namespace, ns);\n    return ns;\n  }\n\n  keys() {\n    return this.namespaceStates.keys();\n  }\n\n  clear() {\n    this.namespaceStates.clear();\n    this.namespaceInstances.clear();\n    return this;\n  }\n\n  remove(namespace) {\n    this.namespaceStates.remove(namespace);\n    this.namespaceInstances.remove(namespace);\n    return this;\n  }}","map":null,"metadata":{},"sourceType":"module"}