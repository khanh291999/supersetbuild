{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { NEW_COMPONENTS_SOURCE_ID } from './constants';\nimport findParentId from './findParentId';\nimport getDetailedComponentWidth from './getDetailedComponentWidth';\nimport newComponentFactory from './newComponentFactory';\n\nexport default function getComponentWidthFromDrop({\n  dropResult,\n  layout: components })\n{\n  const { source, destination, dragging } = dropResult;\n\n  const isNewComponent = source.id === NEW_COMPONENTS_SOURCE_ID;\n  const component = isNewComponent ?\n  newComponentFactory(dragging.type) :\n  components[dragging.id] || {};\n\n  // moving a component within the same container shouldn't change its width\n  if (source.id === destination.id) {\n    return component.meta.width;\n  }\n\n  const {\n    width: draggingWidth,\n    minimumWidth: minDraggingWidth } =\n  getDetailedComponentWidth({\n    component,\n    components });\n\n\n  const {\n    width: destinationWidth,\n    occupiedWidth: draggingOccupiedWidth } =\n  getDetailedComponentWidth({\n    id: destination.id,\n    components });\n\n\n  let destinationCapacity = Number(destinationWidth - draggingOccupiedWidth);\n\n  if (Number.isNaN(destinationCapacity)) {\n    const {\n      width: grandparentWidth,\n      occupiedWidth: grandparentOccupiedWidth } =\n    getDetailedComponentWidth({\n      id: findParentId({\n        childId: destination.id,\n        layout: components }),\n\n      components });\n\n\n    destinationCapacity = Number(grandparentWidth - grandparentOccupiedWidth);\n  }\n\n  if (\n  Number.isNaN(destinationCapacity) ||\n  Number.isNaN(Number(draggingWidth)))\n  {\n    return draggingWidth;\n  }\n  if (destinationCapacity >= draggingWidth) {\n    return draggingWidth;\n  }\n  if (destinationCapacity >= minDraggingWidth) {\n    return destinationCapacity;\n  }\n\n  return -1;\n}","map":null,"metadata":{},"sourceType":"module"}