{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n`;\nconst SelectLabel = ({ backend, databaseName }) => ___EmotionJSX(LabelStyle, null,\n___EmotionJSX(Label, null, backend),\ndatabaseName);\n\nexport default function DatabaseSelector({ db, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onSchemaChange, onSchemasLoad, readOnly = false, schema, sqlLabMode = false }) {\n  const [loadingSchemas, setLoadingSchemas] = useState(false);\n  const [schemaOptions, setSchemaOptions] = useState([]);\n  const [currentDb, setCurrentDb] = useState(db ?\n  {\n    label: ___EmotionJSX(SelectLabel, { backend: db.backend, databaseName: db.database_name }),\n    value: db.id,\n    ...db } :\n\n  undefined);\n  const [currentSchema, setCurrentSchema] = useState(schema ? { label: schema, value: schema } : undefined);\n  const [refresh, setRefresh] = useState(0);\n  const loadDatabases = useMemo(() => async (search, page, pageSize) => {\n    const queryParams = rison.encode({\n      order_columns: 'database_name',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...(formMode || !sqlLabMode ?\n      { filters: [{ col: 'database_name', opr: 'ct', value: search }] } :\n      {\n        filters: [\n        { col: 'database_name', opr: 'ct', value: search },\n        {\n          col: 'expose_in_sqllab',\n          opr: 'eq',\n          value: true }] }) });\n\n\n\n\n    const endpoint = `/api/v1/database/?q=${queryParams}`;\n    return SupersetClient.get({ endpoint }).then(({ json }) => {\n      const { result } = json;\n      if (getDbList) {\n        getDbList(result);\n      }\n      if (result.length === 0) {\n        handleError(t(\"It seems you don't have access to any database\"));\n      }\n      const options = result.map((row) => ({\n        label: ___EmotionJSX(SelectLabel, { backend: row.backend, databaseName: row.database_name }),\n        value: row.id,\n        id: row.id,\n        database_name: row.database_name,\n        backend: row.backend,\n        allow_multi_schema_metadata_fetch: row.allow_multi_schema_metadata_fetch }));\n\n      return {\n        data: options,\n        totalCount: options.length };\n\n    });\n  }, [formMode, getDbList, handleError, sqlLabMode]);\n  useEffect(() => {\n    if (currentDb) {\n      setLoadingSchemas(true);\n      const queryParams = rison.encode({ force: refresh > 0 });\n      const endpoint = `/api/v1/database/${currentDb.value}/schemas/?q=${queryParams}`;\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      SupersetClient.get({ endpoint }).\n      then(({ json }) => {\n        const options = json.result.\n        map((s) => ({\n          value: s,\n          label: s,\n          title: s })).\n\n        sort((a, b) => a.label.localeCompare(b.label));\n        if (onSchemasLoad) {\n          onSchemasLoad(options);\n        }\n        setSchemaOptions(options);\n        setLoadingSchemas(false);\n      }).\n      catch((e) => {\n        setLoadingSchemas(false);\n        handleError(t('There was an error loading the schemas'));\n      });\n    }\n  }, [currentDb, onSchemasLoad, refresh]);\n  function changeDataBase(value, database) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n  function changeSchema(schema) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema.value);\n    }\n  }\n  function renderSelectRow(select, refreshBtn) {\n    return ___EmotionJSX(\"div\", { className: \"section\" },\n    ___EmotionJSX(\"span\", { className: \"select\" }, select),\n    ___EmotionJSX(\"span\", { className: \"refresh\" }, refreshBtn));\n\n  }\n  function renderDatabaseSelect() {\n    return renderSelectRow(___EmotionJSX(Select, { ariaLabel: t('Select database or type database name'), optionFilterProps: ['database_name', 'value'], header: ___EmotionJSX(FormLabel, null, t('Database')), lazyLoading: false, onChange: changeDataBase, value: currentDb, placeholder: t('Select database or type database name'), disabled: !isDatabaseSelectEnabled || readOnly, options: loadDatabases }), null);\n  }\n  function renderSchemaSelect() {\n    const refreshIcon = !formMode && !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => setRefresh(refresh + 1), tooltipContent: t('Force refresh schema list') });\n    return renderSelectRow(___EmotionJSX(Select, { ariaLabel: t('Select schema or type schema name'), disabled: readOnly, header: ___EmotionJSX(FormLabel, null, t('Schema')), labelInValue: true, lazyLoading: false, loading: loadingSchemas, name: \"select-schema\", placeholder: t('Select schema or type schema name'), onChange: (item) => changeSchema(item), options: schemaOptions, showSearch: true, value: currentSchema }), refreshIcon);\n  }\n  return ___EmotionJSX(DatabaseSelectorWrapper, null,\n  renderDatabaseSelect(),\n  renderSchemaSelect());\n\n}","map":null,"metadata":{},"sourceType":"module"}