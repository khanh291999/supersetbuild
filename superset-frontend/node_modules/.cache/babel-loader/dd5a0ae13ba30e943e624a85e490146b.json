{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Popover from 'src/components/Popover';\nimport AdhocMetricEditPopoverTitle from 'src/explore/components/controls/MetricControl/AdhocMetricEditPopoverTitle';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport AdhocMetricEditPopover, { SAVED_TAB_KEY } from './AdhocMetricEditPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nclass AdhocMetricPopoverTrigger extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.onPopoverResize = this.onPopoverResize.bind(this);\n    this.onLabelChange = this.onLabelChange.bind(this);\n    this.closePopover = this.closePopover.bind(this);\n    this.togglePopover = this.togglePopover.bind(this);\n    this.getCurrentTab = this.getCurrentTab.bind(this);\n    this.getCurrentLabel = this.getCurrentLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.state = {\n      adhocMetric: props.adhocMetric,\n      popoverVisible: false,\n      title: {\n        label: props.adhocMetric.label,\n        hasCustomLabel: props.adhocMetric.hasCustomLabel },\n\n      currentLabel: '',\n      labelModified: false,\n      isTitleEditDisabled: false };\n\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.adhocMetric.optionName !== nextProps.adhocMetric.optionName) {\n      return {\n        adhocMetric: nextProps.adhocMetric,\n        title: {\n          label: nextProps.adhocMetric.label,\n          hasCustomLabel: nextProps.adhocMetric.hasCustomLabel },\n\n        currentLabel: '',\n        labelModified: false };\n\n    }\n    return {\n      adhocMetric: nextProps.adhocMetric };\n\n  }\n  onLabelChange(e) {var _this$props$adhocMetr;\n    const { verbose_name, metric_name } = this.props.savedMetric;\n    const defaultMetricLabel = (_this$props$adhocMetr = this.props.adhocMetric) == null ? void 0 : _this$props$adhocMetr.getDefaultLabel();\n    const label = e.target.value;\n    this.setState((state) => ({\n      title: {\n        label: label ||\n        state.currentLabel ||\n        verbose_name ||\n        metric_name ||\n        defaultMetricLabel,\n        hasCustomLabel: !!label },\n\n      labelModified: true }));\n\n  }\n  onPopoverResize() {\n    this.forceUpdate();\n  }\n  closePopover() {\n    this.togglePopover(false);\n    this.setState({\n      labelModified: false });\n\n  }\n  togglePopover(visible) {\n    this.setState({\n      popoverVisible: visible });\n\n  }\n  getCurrentTab(tab) {\n    this.setState({\n      isTitleEditDisabled: tab === SAVED_TAB_KEY });\n\n  }\n  getCurrentLabel({ savedMetricLabel, adhocMetricLabel }) {\n    const currentLabel = savedMetricLabel || adhocMetricLabel;\n    this.setState({\n      currentLabel,\n      labelModified: true });\n\n    if (savedMetricLabel || !this.state.title.hasCustomLabel) {\n      this.setState({\n        title: {\n          label: currentLabel,\n          hasCustomLabel: false } });\n\n\n    }\n  }\n  onChange(newMetric, oldMetric) {\n    this.props.onMetricEdit({ ...newMetric, ...this.state.title }, oldMetric);\n  }\n  render() {\n    const { adhocMetric, savedMetric, columns, savedMetricsOptions, datasourceType, isControlledComponent } = this.props;\n    const { verbose_name, metric_name } = savedMetric;\n    const { hasCustomLabel, label } = adhocMetric;\n    const adhocMetricLabel = hasCustomLabel ?\n    label :\n    adhocMetric.getDefaultLabel();\n    const title = this.state.labelModified ?\n    this.state.title :\n    {\n      label: verbose_name || metric_name || adhocMetricLabel,\n      hasCustomLabel };\n\n    const { visible, togglePopover, closePopover } = isControlledComponent ?\n    {\n      visible: this.props.visible,\n      togglePopover: this.props.togglePopover,\n      closePopover: this.props.closePopover } :\n\n    {\n      visible: this.state.popoverVisible,\n      togglePopover: this.togglePopover,\n      closePopover: this.closePopover };\n\n    const overlayContent = ___EmotionJSX(ExplorePopoverContent, null,\n    ___EmotionJSX(AdhocMetricEditPopover, { adhocMetric: adhocMetric, columns: columns, savedMetricsOptions: savedMetricsOptions, savedMetric: savedMetric, datasourceType: datasourceType, onResize: this.onPopoverResize, onClose: closePopover, onChange: this.onChange, getCurrentTab: this.getCurrentTab, getCurrentLabel: this.getCurrentLabel }));\n\n    const popoverTitle = ___EmotionJSX(AdhocMetricEditPopoverTitle, { title: title, onChange: this.onLabelChange, isEditDisabled: this.state.isTitleEditDisabled });\n    return ___EmotionJSX(Popover, { placement: \"right\", trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: togglePopover, title: popoverTitle, destroyTooltipOnHide: true },\n    this.props.children);\n\n  }}\n\nexport default AdhocMetricPopoverTrigger;","map":null,"metadata":{},"sourceType":"module"}