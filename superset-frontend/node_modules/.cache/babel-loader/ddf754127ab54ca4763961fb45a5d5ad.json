{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport { t, styled } from '@superset-ui/core';\n\nimport buildFilterScopeTreeEntry from 'src/dashboard/util/buildFilterScopeTreeEntry';\nimport getFilterScopeNodesTree from 'src/dashboard/util/getFilterScopeNodesTree';\nimport getFilterFieldNodesTree from 'src/dashboard/util/getFilterFieldNodesTree';\nimport getFilterScopeParentNodes from 'src/dashboard/util/getFilterScopeParentNodes';\nimport getKeyForFilterScopeTree from 'src/dashboard/util/getKeyForFilterScopeTree';\nimport getSelectedChartIdForFilterScopeTree from 'src/dashboard/util/getSelectedChartIdForFilterScopeTree';\nimport getFilterScopeFromNodesTree from 'src/dashboard/util/getFilterScopeFromNodesTree';\nimport getRevertedFilterScope from 'src/dashboard/util/getRevertedFilterScope';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/activeDashboardFilters';\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'src/dashboard/util/getDashboardFilterKey';\nimport { ALL_FILTERS_ROOT } from 'src/dashboard/util/constants';\nimport { dashboardFilterPropShape } from 'src/dashboard/util/propShapes';\nimport FilterScopeTree from './FilterScopeTree';\nimport FilterFieldTree from './FilterFieldTree';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dashboardFilters: PropTypes.objectOf(dashboardFilterPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n\n  updateDashboardFiltersScope: PropTypes.func.isRequired,\n  setUnsavedChanges: PropTypes.func.isRequired,\n  onCloseModal: PropTypes.func.isRequired };\n\n\nconst ActionsContainer = styled.div`\n  height: ${({ theme }) => theme.gridUnit * 16}px;\n\n  // TODO: replace hardcoded color with theme variable after refactoring filter-scope-selector.less to Emotion\n  border-top: ${({ theme }) => theme.gridUnit / 4}px solid #cfd8dc;\n  padding: ${({ theme }) => theme.gridUnit * 6}px;\n  margin: 0 0 0 ${({ theme }) => -theme.gridUnit * 6}px;\n  text-align: right;\n\n  .btn {\n    margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport default class FilterScopeSelector extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { dashboardFilters, layout } = props;\n\n    if (Object.keys(dashboardFilters).length > 0) {\n      // display filter fields in tree structure\n      const filterFieldNodes = getFilterFieldNodesTree({\n        dashboardFilters });\n\n      // filterFieldNodes root node is dashboard_root component,\n      // so that we can offer a select/deselect all link\n      const filtersNodes = filterFieldNodes[0].children;\n      this.allfilterFields = [];\n      filtersNodes.forEach(({ children }) => {\n        children.forEach((child) => {\n          this.allfilterFields.push(child.value);\n        });\n      });\n      this.defaultFilterKey = filtersNodes[0].children[0].value;\n\n      // build FilterScopeTree object for each filterKey\n      const filterScopeMap = Object.values(dashboardFilters).reduce(\n      (map, { chartId: filterId, columns }) => {\n        const filterScopeByChartId = Object.keys(columns).reduce(\n        (mapByChartId, columnName) => {\n          const filterKey = getDashboardFilterKey({\n            chartId: filterId,\n            column: columnName });\n\n          const nodes = getFilterScopeNodesTree({\n            components: layout,\n            filterFields: [filterKey],\n            selectedChartId: filterId });\n\n          const expanded = getFilterScopeParentNodes(nodes, 1);\n          // force display filter_box chart as unchecked, but show checkbox as disabled\n          const chartIdsInFilterScope = (\n          getChartIdsInFilterScope({\n            filterScope: dashboardFilters[filterId].scopes[columnName] }) ||\n          []).\n          filter((id) => id !== filterId);\n\n          return {\n            ...mapByChartId,\n            [filterKey]: {\n              // unfiltered nodes\n              nodes,\n              // filtered nodes in display if searchText is not empty\n              nodesFiltered: [...nodes],\n              checked: chartIdsInFilterScope,\n              expanded } };\n\n\n        },\n        {});\n\n\n        return {\n          ...map,\n          ...filterScopeByChartId };\n\n      },\n      {});\n\n\n      // initial state: active defaultFilerKey\n      const { chartId } = getChartIdAndColumnFromFilterKey(\n      this.defaultFilterKey);\n\n      const checkedFilterFields = [];\n      const activeFilterField = this.defaultFilterKey;\n      // expand defaultFilterKey in filter field tree\n      const expandedFilterIds = [ALL_FILTERS_ROOT].concat(chartId);\n\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField,\n        filterScopeMap,\n        layout });\n\n      this.state = {\n        showSelector: true,\n        activeFilterField,\n        searchText: '',\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry },\n\n        filterFieldNodes,\n        checkedFilterFields,\n        expandedFilterIds };\n\n    } else {\n      this.state = {\n        showSelector: false };\n\n    }\n\n    this.filterNodes = this.filterNodes.bind(this);\n    this.onChangeFilterField = this.onChangeFilterField.bind(this);\n    this.onCheckFilterScope = this.onCheckFilterScope.bind(this);\n    this.onExpandFilterScope = this.onExpandFilterScope.bind(this);\n    this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    this.onCheckFilterField = this.onCheckFilterField.bind(this);\n    this.onExpandFilterField = this.onExpandFilterField.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onSave = this.onSave.bind(this);\n  }\n\n  onCheckFilterScope(checked = []) {\n    const {\n      activeFilterField,\n      filterScopeMap,\n      checkedFilterFields } =\n    this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    const editingList = activeFilterField ?\n    [activeFilterField] :\n    checkedFilterFields;\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      checked };\n\n\n    const updatedFilterScopeMap = getRevertedFilterScope({\n      checked,\n      filterFields: editingList,\n      filterScopeMap });\n\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...updatedFilterScopeMap,\n        [key]: updatedEntry } }));\n\n\n  }\n\n  onExpandFilterScope(expanded = []) {\n    const {\n      activeFilterField,\n      checkedFilterFields,\n      filterScopeMap } =\n    this.state;\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      expanded };\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        [key]: updatedEntry } }));\n\n\n  }\n\n  onCheckFilterField(checkedFilterFields = []) {\n    const { layout } = this.props;\n    const { filterScopeMap } = this.state;\n    const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n      checkedFilterFields,\n      activeFilterField: null,\n      filterScopeMap,\n      layout });\n\n\n    this.setState(() => ({\n      activeFilterField: null,\n      checkedFilterFields,\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...filterScopeTreeEntry } }));\n\n\n  }\n\n  onExpandFilterField(expandedFilterIds = []) {\n    this.setState(() => ({\n      expandedFilterIds }));\n\n  }\n\n  onChangeFilterField(filterField = {}) {\n    const { layout } = this.props;\n    const nextActiveFilterField = filterField.value;\n    const {\n      activeFilterField: currentActiveFilterField,\n      checkedFilterFields,\n      filterScopeMap } =\n    this.state;\n\n    // we allow single edit and multiple edit in the same view.\n    // if user click on the single filter field,\n    // will show filter scope for the single field.\n    // if user click on the same filter filed again,\n    // will toggle off the single filter field,\n    // and allow multi-edit all checked filter fields.\n    if (nextActiveFilterField === currentActiveFilterField) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: null,\n        filterScopeMap,\n        layout });\n\n\n      this.setState({\n        activeFilterField: null,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry } });\n\n\n    } else if (this.allfilterFields.includes(nextActiveFilterField)) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap,\n        layout });\n\n\n      this.setState({\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry } });\n\n\n    }\n  }\n\n  onSearchInputChange(e) {\n    this.setState({ searchText: e.target.value }, this.filterTree);\n  }\n\n  onClose() {\n    this.props.onCloseModal();\n  }\n\n  onSave() {\n    const { filterScopeMap } = this.state;\n\n    const allFilterFieldScopes = this.allfilterFields.reduce(\n    (map, filterKey) => {\n      const { nodes } = filterScopeMap[filterKey];\n      const checkedChartIds = filterScopeMap[filterKey].checked;\n\n      return {\n        ...map,\n        [filterKey]: getFilterScopeFromNodesTree({\n          filterKey,\n          nodes,\n          checkedChartIds }) };\n\n\n    },\n    {});\n\n\n    this.props.updateDashboardFiltersScope(allFilterFieldScopes);\n    this.props.setUnsavedChanges(true);\n\n    // click Save button will do save and close modal\n    this.props.onCloseModal();\n  }\n\n  filterTree() {\n    // Reset nodes back to unfiltered state\n    if (!this.state.searchText) {\n      this.setState((prevState) => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap } =\n        prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields });\n\n\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered: filterScopeMap[key].nodes };\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry } };\n\n\n      });\n    } else {\n      const updater = (prevState) => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap } =\n        prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields });\n\n\n        const nodesFiltered = filterScopeMap[key].nodes.reduce(\n        this.filterNodes,\n        []);\n\n        const expanded = getFilterScopeParentNodes([...nodesFiltered]);\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered,\n          expanded };\n\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry } };\n\n\n      };\n\n      this.setState(updater);\n    }\n  }\n\n  filterNodes(filtered = [], node = {}) {\n    const { searchText } = this.state;\n    const children = (node.children || []).reduce(this.filterNodes, []);\n\n    if (\n    // Node's label matches the search string\n    node.label.toLocaleLowerCase().indexOf(searchText.toLocaleLowerCase()) >\n    -1 ||\n    // Or a children has a matching node\n    children.length)\n    {\n      filtered.push({ ...node, children });\n    }\n\n    return filtered;\n  }\n\n  renderFilterFieldList() {\n    const {\n      activeFilterField,\n      filterFieldNodes,\n      checkedFilterFields,\n      expandedFilterIds } =\n    this.state;\n    return (\n      ___EmotionJSX(FilterFieldTree, {\n        activeKey: activeFilterField,\n        nodes: filterFieldNodes,\n        checked: checkedFilterFields,\n        expanded: expandedFilterIds,\n        onClick: this.onChangeFilterField,\n        onCheck: this.onCheckFilterField,\n        onExpand: this.onExpandFilterField }));\n\n\n  }\n\n  renderFilterScopeTree() {\n    const {\n      filterScopeMap,\n      activeFilterField,\n      checkedFilterFields,\n      searchText } =\n    this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n\n    const selectedChartId = getSelectedChartIdForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"input\", {\n        className: \"filter-text scope-search multi-edit-mode\",\n        placeholder: t('Search...'),\n        type: \"text\",\n        value: searchText,\n        onChange: this.onSearchInputChange }),\n\n      ___EmotionJSX(FilterScopeTree, {\n        nodes: filterScopeMap[key].nodesFiltered,\n        checked: filterScopeMap[key].checked,\n        expanded: filterScopeMap[key].expanded,\n        onCheck: this.onCheckFilterScope,\n        onExpand: this.onExpandFilterScope\n        // pass selectedFilterId prop to FilterScopeTree component,\n        // to hide checkbox for selected filter field itself\n        , selectedChartId: selectedChartId })));\n\n\n\n  }\n\n  renderEditingFiltersName() {\n    const { dashboardFilters } = this.props;\n    const { activeFilterField, checkedFilterFields } = this.state;\n    const currentFilterLabels = [].\n    concat(activeFilterField || checkedFilterFields).\n    map((key) => {\n      const { chartId, column } = getChartIdAndColumnFromFilterKey(key);\n      return dashboardFilters[chartId].labels[column] || column;\n    });\n\n    return (\n      ___EmotionJSX(\"div\", { className: \"selected-fields multi-edit-mode\" },\n      currentFilterLabels.length === 0 && t('No filter is selected.'),\n      currentFilterLabels.length === 1 && t('Editing 1 filter:'),\n      currentFilterLabels.length > 1 &&\n      t('Batch editing %d filters:', currentFilterLabels.length),\n      ___EmotionJSX(\"span\", { className: \"selected-scopes\" },\n      currentFilterLabels.join(', '))));\n\n\n\n  }\n\n  render() {\n    const { showSelector } = this.state;\n\n    return (\n      ___EmotionJSX(\"div\", { className: \"filter-scope-container\" },\n      ___EmotionJSX(\"div\", { className: \"filter-scope-header\" },\n      ___EmotionJSX(\"h4\", null, t('Configure filter scopes')),\n      showSelector && this.renderEditingFiltersName()),\n\n\n      ___EmotionJSX(\"div\", { className: \"filter-scope-body\" },\n      !showSelector ?\n      ___EmotionJSX(\"div\", { className: \"warning-message\" },\n      t('There are no filters in this dashboard.')) :\n\n\n      ___EmotionJSX(\"div\", { className: \"filters-scope-selector\" },\n      ___EmotionJSX(\"div\", { className: cx('filter-field-pane multi-edit-mode') },\n      this.renderFilterFieldList()),\n\n      ___EmotionJSX(\"div\", { className: \"filter-scope-pane multi-edit-mode\" },\n      this.renderFilterScopeTree()))),\n\n\n\n\n\n      ___EmotionJSX(ActionsContainer, null,\n      ___EmotionJSX(Button, { buttonSize: \"small\", onClick: this.onClose },\n      t('Close')),\n\n      showSelector &&\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"primary\",\n        onClick: this.onSave },\n\n      t('Save')))));\n\n\n\n\n\n  }}\n\n\nFilterScopeSelector.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}