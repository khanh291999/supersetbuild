{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { t, styled } from '@superset-ui/core';\nimport { Form, FormItem } from 'src/components/Form';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\nconst ColumnSelectPopover = ({ columns, editedColumn, onChange, onClose }) => {\n  const [initialCalculatedColumn, initialSimpleColumn] = editedColumn != null && editedColumn.expression ?\n  [editedColumn, undefined] :\n  [undefined, editedColumn];\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState(initialSimpleColumn);\n  const [calculatedColumns, simpleColumns] = useMemo(() => columns == null ? void 0 : columns.reduce((acc, column) => {\n    if (column.expression) {\n      acc[0].push(column);\n    } else\n    {\n      acc[1].push(column);\n    }\n    return acc;\n  }, [[], []]), [columns]);\n  const onCalculatedColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = calculatedColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(selectedColumn);\n    setSelectedSimpleColumn(undefined);\n  }, [calculatedColumns]);\n  const onSimpleColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = simpleColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(undefined);\n    setSelectedSimpleColumn(selectedColumn);\n  }, [simpleColumns]);\n  const defaultActiveTabKey = initialSimpleColumn || calculatedColumns.length === 0 ? 'simple' : 'saved';\n  const onSave = useCallback(() => {\n    const selectedColumn = selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [onChange, onClose, selectedCalculatedColumn, selectedSimpleColumn]);\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    onClose();\n  }, [initialCalculatedColumn, initialSimpleColumn, onClose]);\n  const stateIsValid = selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges = (selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name) !== (\n  initialCalculatedColumn == null ? void 0 : initialCalculatedColumn.column_name) ||\n  (selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) !== (initialSimpleColumn == null ? void 0 : initialSimpleColumn.column_name);\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n  return ___EmotionJSX(Form, { layout: \"vertical\", id: \"metrics-edit-popover\" },\n  ___EmotionJSX(Tabs, { id: \"adhoc-metric-edit-tabs\", defaultActiveKey: defaultActiveTabKey, className: \"adhoc-metric-edit-tabs\", allowOverflow: true },\n  ___EmotionJSX(Tabs.TabPane, { key: \"saved\", tab: t('Saved') },\n  ___EmotionJSX(FormItem, { label: savedExpressionsLabel },\n  ___EmotionJSX(StyledSelect, { ariaLabel: savedExpressionsLabel, value: selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name, onChange: onCalculatedColumnChange, allowClear: true, autoFocus: !selectedCalculatedColumn, placeholder: t('%s column(s)', calculatedColumns.length), options: calculatedColumns.map((calculatedColumn) => ({\n      value: calculatedColumn.column_name,\n      label: calculatedColumn.verbose_name || calculatedColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: calculatedColumn, showType: true }),\n      key: calculatedColumn.column_name })) }))),\n\n\n\n  ___EmotionJSX(Tabs.TabPane, { key: \"simple\", tab: t('Simple') },\n  ___EmotionJSX(FormItem, { label: simpleColumnsLabel },\n  ___EmotionJSX(Select, { ariaLabel: simpleColumnsLabel, value: selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name, onChange: onSimpleColumnChange, allowClear: true, autoFocus: !selectedSimpleColumn, placeholder: t('%s column(s)', simpleColumns.length), options: simpleColumns.map((simpleColumn) => ({\n      value: simpleColumn.column_name,\n      label: simpleColumn.verbose_name || simpleColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: simpleColumn, showType: true }),\n      key: simpleColumn.column_name })) })))),\n\n\n\n\n  ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(Button, { buttonSize: \"small\", onClick: onResetStateAndClose, cta: true },\n  t('Close')),\n\n  ___EmotionJSX(Button, { disabled: !stateIsValid, buttonStyle: hasUnsavedChanges && stateIsValid ? 'primary' : 'default', buttonSize: \"small\", onClick: onSave, cta: true },\n  t('Save'))));\n\n\n\n};\nexport default ColumnSelectPopover;","map":null,"metadata":{},"sourceType":"module"}