{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport DragDroppable from './dnd/DragDroppable';\n\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  gridComponent: componentShape.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired };\n\n\nconst defaultProps = {};\n\nconst renderDraggableContentBottom = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--bottom\" });\n\n\nconst renderDraggableContentTop = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--top\" });\n\n\nclass DashboardGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false,\n      rowGuideTop: null };\n\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2);\n\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart({ ref, direction }) {\n    let rowGuideTop = null;\n    if (direction === 'bottom' || direction === 'bottomRight') {\n      rowGuideTop = this.getRowGuidePosition(ref);\n    }\n\n    this.setState(() => ({\n      isResizing: true,\n      rowGuideTop }));\n\n  }\n\n  handleResize({ ref, direction }) {\n    if (direction === 'bottom' || direction === 'bottomRight') {\n      this.setState(() => ({ rowGuideTop: this.getRowGuidePosition(ref) }));\n    }\n  }\n\n  handleResizeStop({ id, widthMultiple: width, heightMultiple: height }) {\n    this.props.resizeComponent({ id, width, height });\n\n    this.setState(() => ({\n      isResizing: false,\n      rowGuideTop: null }));\n\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0 } });\n\n\n    }\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      editMode,\n      width,\n      isComponentVisible } =\n    this.props;\n    const columnPlusGutterWidth =\n    (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing, rowGuideTop } = this.state;\n\n    return width < 100 ? null :\n    ___EmotionJSX(\"div\", { className: \"dashboard-grid\", ref: this.setGridRef },\n    ___EmotionJSX(\"div\", { className: \"grid-content\" },\n\n    editMode &&\n    ___EmotionJSX(DragDroppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: 0,\n      orientation: \"column\",\n      onDrop: this.handleTopDropTargetDrop,\n      className: \"empty-droptarget\",\n      editMode: true },\n\n    renderDraggableContentBottom),\n\n\n\n    gridComponent.children.map((id, index) =>\n    ___EmotionJSX(DashboardComponent, {\n      key: id,\n      id: id,\n      parentId: gridComponent.id,\n      depth: depth + 1,\n      index: index,\n      availableColumnCount: GRID_COLUMN_COUNT,\n      columnWidth: columnWidth,\n      isComponentVisible: isComponentVisible,\n      onResizeStart: this.handleResizeStart,\n      onResize: this.handleResize,\n      onResizeStop: this.handleResizeStop,\n      onChangeTab: this.handleChangeTab })),\n\n\n\n\n    editMode && gridComponent.children.length > 0 &&\n    ___EmotionJSX(DragDroppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: gridComponent.children.length,\n      orientation: \"column\",\n      onDrop: handleComponentDrop,\n      className: \"empty-droptarget\",\n      editMode: true },\n\n    renderDraggableContentTop),\n\n\n\n    isResizing &&\n    Array(GRID_COLUMN_COUNT).\n    fill(null).\n    map((_, i) =>\n    ___EmotionJSX(\"div\", {\n      key: `grid-column-${i}`,\n      className: \"grid-column-guide\",\n      style: {\n        left: i * GRID_GUTTER_SIZE + i * columnWidth,\n        width: columnWidth } })),\n\n\n\n\n    isResizing && rowGuideTop &&\n    ___EmotionJSX(\"div\", {\n      className: \"grid-row-guide\",\n      style: {\n        top: rowGuideTop,\n        width } })));\n\n\n\n\n\n\n  }}\n\n\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;\n\nexport default DashboardGrid;","map":null,"metadata":{},"sourceType":"module"}