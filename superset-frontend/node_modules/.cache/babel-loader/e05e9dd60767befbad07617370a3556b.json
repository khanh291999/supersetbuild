{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction getStatusColor(status, isReportEnabled, theme) {\n  switch (status) {\n    case AlertState.working:\n      return theme.colors.primary.base;\n    case AlertState.error:\n      return theme.colors.error.base;\n    case AlertState.success:\n      return isReportEnabled ?\n      theme.colors.success.base :\n      theme.colors.alert.base;\n    case AlertState.noop:\n      return theme.colors.success.base;\n    case AlertState.grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;}\n\n}\nexport default function AlertStatusIcon({ state, isReportEnabled = false }) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '' };\n\n  switch (state) {\n    case AlertState.success:\n      lastStateConfig.icon = isReportEnabled ?\n      Icons.Check :\n      Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sent') :\n      t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.success;\n      break;\n    case AlertState.working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sending') :\n      t('Alert running');\n      lastStateConfig.status = AlertState.working;\n      break;\n    case AlertState.error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report failed') :\n      t('Alert failed');\n      lastStateConfig.status = AlertState.error;\n      break;\n    case AlertState.noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.noop;\n      break;\n    case AlertState.grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.noop;}\n\n  const Icon = lastStateConfig.icon;\n  return ___EmotionJSX(Tooltip, { title: lastStateConfig.label, placement: \"bottomLeft\" },\n  ___EmotionJSX(Icon, { iconColor: getStatusColor(lastStateConfig.status, isReportEnabled, theme) }));\n\n}","map":null,"metadata":{},"sourceType":"module"}