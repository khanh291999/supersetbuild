{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClassNames } from '@emotion/react';\nimport { styled, useTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst propTypes = {\n  column: PropTypes.object.isRequired };\n\nconst StyledTooltip = (props) => {\n  const theme = useTheme();\n  return ___EmotionJSX(ClassNames, null,\n  ({ css }) => ___EmotionJSX(Tooltip, _extends({ overlayClassName: css`\n            .ant-tooltip-inner {\n              max-width: ${theme.gridUnit * 125}px;\n              word-wrap: break-word;\n              text-align: center;\n\n              pre {\n                background: transparent;\n                border: none;\n                text-align: left;\n                color: ${theme.colors.grayscale.light5};\n                font-size: ${theme.typography.sizes.xs}px;\n              }\n            }\n          ` }, props)));\n\n};\nconst Hr = styled.hr`\n  margin-top: ${({ theme }) => theme.gridUnit * 1.5}px;\n`;\nconst iconMap = {\n  pk: 'fa-key',\n  fk: 'fa-link',\n  index: 'fa-bookmark' };\n\nconst tooltipTitleMap = {\n  pk: 'Primary key',\n  fk: 'Foreign key',\n  index: 'Index' };\n\nexport default function ColumnElement({ column }) {\n  let columnName = column.name;\n  let icons;\n  if (column.keys && column.keys.length > 0) {\n    columnName = ___EmotionJSX(\"strong\", null, column.name);\n    icons = column.keys.map((key, i) => ___EmotionJSX(\"span\", { key: i, className: \"ColumnElement\" },\n    ___EmotionJSX(StyledTooltip, { placement: \"right\", title: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"strong\", null, tooltipTitleMap[key.type]),\n      ___EmotionJSX(Hr, null),\n      ___EmotionJSX(\"pre\", { className: \"text-small\" },\n      JSON.stringify(key, null, '  '))) },\n\n\n    ___EmotionJSX(\"i\", { className: `fa text-muted m-l-2 ${iconMap[key.type]}` }))));\n\n\n  }\n  return ___EmotionJSX(\"div\", { className: \"clearfix table-column\" },\n  ___EmotionJSX(\"div\", { className: \"pull-left m-l-10 col-name\" },\n  columnName,\n  icons),\n\n  ___EmotionJSX(\"div\", { className: \"pull-right text-muted\" },\n  ___EmotionJSX(\"small\", null, \" \", column.type)));\n\n\n}\nColumnElement.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}