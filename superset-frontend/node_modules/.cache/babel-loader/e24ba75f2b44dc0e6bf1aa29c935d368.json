{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport Loading from '../Loading';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction DefaultPlaceholder({ width, height, showLoadingForImport = false, placeholderStyle: style }) {\n  return (\n    // since `width` defaults to 100%, we can display the placeholder once\n    // height is specified.\n    height && ___EmotionJSX(\"div\", { key: \"async-asm-placeholder\", style: { width, height, ...style } },\n    showLoadingForImport && ___EmotionJSX(Loading, { position: \"floating\" })) ||\n\n    // `|| null` is for in case of height=0.\n    null);\n}\n/**\n * Asynchronously import an ES module as a React component, render a placeholder\n * first (if provided) and re-render once import is complete.\n */\nexport default function AsyncEsmComponent(\n/**\n * A promise generator that returns the React component to render.\n */\nloadComponent,\n/**\n * Placeholder while still importing.\n */\nplaceholder = DefaultPlaceholder) {\n  let promise;\n  let component;\n  /**\n   * Safely wait for promise, make sure the loader function only execute once.\n   */\n  function waitForPromise() {\n    if (!promise) {\n      // load component on initialization\n      promise =\n      loadComponent instanceof Promise ? loadComponent : loadComponent();\n    }\n    if (!component) {\n      promise.then((result) => {\n        component = result.default ||\n        result;\n      });\n    }\n    return promise;\n  }\n  const AsyncComponent = /*#__PURE__*/React.forwardRef(function AsyncComponent(props, ref) {\n    const [loaded, setLoaded] = useState(component !== undefined);\n    useEffect(() => {\n      let isMounted = true;\n      if (!loaded) {\n        // update state to trigger a re-render\n        waitForPromise().then(() => {\n          if (isMounted) {\n            setLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    });\n    const Component = component || placeholder;\n    return Component ?\n    // placeholder does not get the ref\n    ___EmotionJSX(Component, _extends({ ref: Component === component ? ref : null }, props)) : null;\n  });\n  // preload the async component before rendering\n  AsyncComponent.preload = waitForPromise;\n  return AsyncComponent;\n}","map":null,"metadata":{},"sourceType":"module"}