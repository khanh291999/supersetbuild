{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { DragContainer } from 'src/explore/components/controls/OptionControls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { styled } from '@superset-ui/core';\nimport Option from './Option';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const OptionLabel = styled.div`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\nexport default function OptionWrapper(props) {\n  const { index, label, tooltipTitle, column, type, onShiftOptions, clickClose, withCaret, isExtra, canDelete = true, ...rest } = props;\n  const ref = useRef(null);\n  const labelRef = useRef(null);\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type,\n      dragIndex: index },\n\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging() }) });\n\n\n  const [, drop] = useDrop({\n    accept: type,\n    hover: (item, monitor) => {var _ref$current;\n      if (!ref.current) {\n        return;\n      }\n      const { dragIndex } = item;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = (_ref$current = ref.current) == null ? void 0 : _ref$current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset ?\n      clientOffset.y - hoverBoundingRect.top :\n      0;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      onShiftOptions(dragIndex, hoverIndex);\n      // eslint-disable-next-line no-param-reassign\n      item.dragIndex = hoverIndex;\n    } });\n\n  const shouldShowTooltip = !isDragging && tooltipTitle && label && tooltipTitle !== label ||\n  !isDragging &&\n  labelRef &&\n  labelRef.current &&\n  labelRef.current.scrollWidth > labelRef.current.clientWidth;\n  const LabelContent = () => {\n    if (!shouldShowTooltip) {\n      return ___EmotionJSX(\"span\", null, label);\n    }\n    return ___EmotionJSX(Tooltip, { title: tooltipTitle || label },\n    ___EmotionJSX(\"span\", null, label));\n\n  };\n  const ColumnOption = () => ___EmotionJSX(StyledColumnOption, { column: column, labelRef: labelRef, showTooltip: !!shouldShowTooltip, showType: true });\n  const Label = () => {\n    if (label) {\n      return ___EmotionJSX(OptionLabel, { ref: labelRef },\n      ___EmotionJSX(LabelContent, null));\n\n    }\n    if (column) {\n      return ___EmotionJSX(OptionLabel, null,\n      ___EmotionJSX(ColumnOption, null));\n\n    }\n    return null;\n  };\n  drag(drop(ref));\n  return ___EmotionJSX(DragContainer, _extends({ ref: ref }, rest),\n  ___EmotionJSX(Option, { index: index, clickClose: clickClose, withCaret: withCaret, isExtra: isExtra, canDelete: canDelete },\n  ___EmotionJSX(Label, null)));\n\n\n}","map":null,"metadata":{},"sourceType":"module"}