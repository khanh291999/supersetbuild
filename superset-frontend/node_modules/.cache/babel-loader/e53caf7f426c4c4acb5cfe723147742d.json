{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { createFetchRelated, createErrorHandler, handleDashboardDelete } from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { getFromLocalStorage } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport OmniContainer from 'src/components/OmniContainer';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport DashboardCard from './DashboardCard';\nimport { DashboardStatus } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the dashboards. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more dashboards that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nfunction DashboardList(props) {\n  const { addDangerToast, addSuccessToast } = props;\n  const { state: { loading, resourceCount: dashboardCount, resourceCollection: dashboards, bulkSelectEnabled }, setResourceCollection: setDashboards, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dashboard', t('dashboard'), addDangerToast);\n  const dashboardIds = useMemo(() => dashboards.map((d) => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('dashboard', dashboardIds, addDangerToast);\n  const [dashboardToEdit, setDashboardToEdit] = useState(null);\n  const [importingDashboard, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const { userId } = props.user;\n  const userKey = getFromLocalStorage(userId == null ? void 0 : userId.toString(), null);\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read');\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  function openDashboardEditModal(dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n  function handleDashboardEdit(edits) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}` }).\n    then(({ json = {} }) => {\n      setDashboards(dashboards.map((dashboard) => {var _json$result;\n        if (dashboard.id === (json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _json$result.id)) {\n          const { changed_by_name, changed_by_url, changed_by, dashboard_title = '', slug = '', json_metadata = '', changed_on_delta_humanized, url = '', certified_by = '', certification_details = '' } = json.result;\n          return {\n            ...dashboard,\n            changed_by_name,\n            changed_by_url,\n            changed_by,\n            dashboard_title,\n            slug,\n            json_metadata,\n            changed_on_delta_humanized,\n            url,\n            certified_by,\n            certification_details };\n\n        }\n        return dashboard;\n      }));\n    }, createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboards: %s', errMsg))));\n  }\n  const handleBulkDashboardExport = (dashboardsToExport) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  function handleBulkDashboardDelete(dashboardsToDelete) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(dashboardsToDelete.map(({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected dashboards: ', errMsg))));\n  }\n  const columns = useMemo(() => [\n  ...(props.user.userId ?\n  [\n  {\n    Cell: ({ row: { original: { id } } }) => ___EmotionJSX(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] }),\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs' }] :\n\n\n  []),\n  {\n    Cell: ({ row: { original: { url, dashboard_title: dashboardTitle, certified_by: certifiedBy, certification_details: certificationDetails } } }) => ___EmotionJSX(Link, { to: url },\n    certifiedBy && ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CertifiedIcon, { certifiedBy: certifiedBy, details: certificationDetails }), ' '),\n\n    dashboardTitle),\n\n    Header: t('Title'),\n    accessor: 'dashboard_title' },\n\n  {\n    Cell: ({ row: { original: { changed_by_name: changedByName, changed_by_url: changedByUrl } } }) => ___EmotionJSX(\"a\", { href: changedByUrl }, changedByName),\n    Header: t('Modified by'),\n    accessor: 'changed_by.first_name',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { status } } }) => status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n    Header: t('Status'),\n    accessor: 'published',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" }, changedOn),\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { created_by: createdBy } } }) => createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n    Header: t('Created by'),\n    accessor: 'created_by',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => ___EmotionJSX(FacePile, { users: owners }),\n    Header: t('Owners'),\n    accessor: 'owners',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleDelete = () => handleDashboardDelete(original, refreshData, addSuccessToast, addDangerToast);\n      const handleEdit = () => openDashboardEditModal(original);\n      const handleExport = () => handleBulkDashboardExport([original]);\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: ___EmotionJSX(React.Fragment, null,\n        t('Are you sure you want to delete'), ' ',\n        ___EmotionJSX(\"b\", null, original.dashboard_title), \"?\"),\n        onConfirm: handleDelete },\n      (confirmDelete) => ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n      ___EmotionJSX(Icons.Trash, null)))),\n\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete && !canExport,\n    disableSortBy: true }],\n\n  [\n  canEdit,\n  canDelete,\n  canExport,\n  ...(props.user.userId ? [favoriteStatus] : [])]);\n\n  const favoritesFilter = useMemo(() => ({\n    Header: t('Favorite'),\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperator.dashboardIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] }),\n\n  []);\n  const filters = useMemo(() => [\n  {\n    Header: t('Owner'),\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.relationManyMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('dashboard', 'owners', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboard owner values: %s', errMsg))), props.user),\n    paginate: true },\n\n  {\n    Header: t('Created by'),\n    id: 'created_by',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('dashboard', 'created_by', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboard created by values: %s', errMsg))), props.user),\n    paginate: true },\n\n  {\n    Header: t('Status'),\n    id: 'published',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Published'), value: true },\n    { label: t('Draft'), value: false }] },\n\n\n  ...(props.user.userId ? [favoritesFilter] : []),\n  {\n    Header: t('Certified'),\n    id: 'id',\n    urlDisplay: 'certified',\n    input: 'select',\n    operator: FilterOperator.dashboardIsCertified,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'dashboard_title',\n    input: 'search',\n    operator: FilterOperator.titleOrSlug }],\n\n  [addDangerToast, favoritesFilter, props.user]);\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'dashboard_title',\n    label: t('Alphabetical'),\n    value: 'alphabetical' },\n\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified' },\n\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified' }];\n\n\n  function renderCard(dashboard) {\n    return ___EmotionJSX(DashboardCard, { dashboard: dashboard, hasPerm: hasPerm, bulkSelectEnabled: bulkSelectEnabled, refreshData: refreshData, showThumbnails: userKey ?\n      userKey.thumbnails :\n      isFeatureEnabled(FeatureFlag.THUMBNAILS), loading: loading, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, openDashboardEditModal: openDashboardEditModal, saveFavoriteStatus: saveFavoriteStatus, favoriteStatus: favoriteStatus[dashboard.id], handleBulkDashboardExport: handleBulkDashboardExport });\n  }\n  const subMenuButtons = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect });\n\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dashboard')),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      } });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import dashboards'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, null)),\n\n        buttonStyle: 'link',\n        onClick: openDashboardImportModal });\n\n    }\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { name: t('Dashboards'), buttons: subMenuButtons }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected dashboards?'), onConfirm: handleBulkDashboardDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        type: 'danger',\n        onSelect: confirmDelete });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkDashboardExport });\n\n    }\n    return ___EmotionJSX(React.Fragment, null,\n    dashboardToEdit && ___EmotionJSX(PropertiesModal, { dashboardId: dashboardToEdit.id, show: true, onHide: () => setDashboardToEdit(null), onSubmit: handleDashboardEdit }),\n    ___EmotionJSX(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"dashboard-list-view\", columns: columns, count: dashboardCount, data: dashboards, disableBulkSelect: toggleBulkSelect, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, showThumbnails: userKey ?\n      userKey.thumbnails :\n      isFeatureEnabled(FeatureFlag.THUMBNAILS), renderCard: renderCard, defaultViewMode: isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW) ?\n      'card' :\n      'table' }));\n\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"dashboard\", resourceLabel: t('dashboard'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDashboardImport, show: importingDashboard, onHide: closeDashboardImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n\n  ___EmotionJSX(OmniContainer, null),\n\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(DashboardList);","map":null,"metadata":{},"sourceType":"module"}