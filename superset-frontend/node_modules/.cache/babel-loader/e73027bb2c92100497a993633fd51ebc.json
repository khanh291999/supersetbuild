{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'src/components/Button';\nimport { styled, t } from '@superset-ui/core';\n\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport Tabs from 'src/components/Tabs';\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport AdhocFilter, {\nEXPRESSION_TYPES } from\n'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocFilterEditPopoverSimpleTabContent from 'src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent';\nimport AdhocFilterEditPopoverSqlTabContent from 'src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSqlTabContent';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  adhocFilter: PropTypes.instanceOf(AdhocFilter).isRequired,\n  onChange: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(\n  PropTypes.oneOfType([\n  columnType,\n  PropTypes.shape({ saved_metric_name: PropTypes.string.isRequired }),\n  adhocMetricType])).\n\n  isRequired,\n  datasource: PropTypes.object,\n  partitionColumn: PropTypes.string,\n  theme: PropTypes.object,\n  sections: PropTypes.arrayOf(PropTypes.string),\n  operators: PropTypes.arrayOf(PropTypes.string) };\n\n\nconst ResizeIcon = styled.i`\n  margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n`;\n\nconst startingWidth = 320;\nconst startingHeight = 240;\nconst SectionWrapper = styled.div`\n  .ant-select {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n`;\n\nconst FilterPopoverContentContainer = styled.div`\n  .adhoc-filter-edit-tabs > .nav-tabs {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n\n    & > li > a {\n      padding: ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  #filter-edit-popover {\n    max-width: none;\n  }\n\n  .filter-edit-clause-info {\n    font-size: ${({ theme }) => theme.typography.sizes.xs}px;\n    padding-left: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .filter-edit-clause-section {\n    display: inline-flex;\n  }\n\n  .adhoc-filter-simple-column-dropdown {\n    margin-top: ${({ theme }) => theme.gridUnit * 5}px;\n  }\n`;\n\nexport default class AdhocFilterEditPopover extends React.Component {\n  constructor(props) {var _this$props, _this$props$adhocFilt;\n    super(props);\n    this.onSave = this.onSave.bind(this);\n    this.onDragDown = this.onDragDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onAdhocFilterChange = this.onAdhocFilterChange.bind(this);\n    this.adjustHeight = this.adjustHeight.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n\n    this.state = {\n      adhocFilter: this.props.adhocFilter,\n      width: startingWidth,\n      height: startingHeight,\n      activeKey: ((_this$props = this.props) == null ? void 0 : (_this$props$adhocFilt = _this$props.adhocFilter) == null ? void 0 : _this$props$adhocFilt.expressionType) || 'SIMPLE' };\n\n\n    this.popoverContentRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.onMouseUp);\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onAdhocFilterChange(adhocFilter) {\n    this.setState({ adhocFilter });\n  }\n\n  onSave() {\n    this.props.onChange(this.state.adhocFilter);\n    this.props.onClose();\n  }\n\n  onDragDown(e) {\n    this.dragStartX = e.clientX;\n    this.dragStartY = e.clientY;\n    this.dragStartWidth = this.state.width;\n    this.dragStartHeight = this.state.height;\n    document.addEventListener('mousemove', this.onMouseMove);\n  }\n\n  onMouseMove(e) {\n    this.props.onResize();\n    this.setState({\n      width: Math.max(\n      this.dragStartWidth + (e.clientX - this.dragStartX),\n      startingWidth),\n\n      height: Math.max(\n      this.dragStartHeight + (e.clientY - this.dragStartY) * 2,\n      startingHeight) });\n\n\n  }\n\n  onMouseUp() {\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onTabChange(activeKey) {\n    this.setState({\n      activeKey });\n\n  }\n\n  adjustHeight(heightDifference) {\n    this.setState((state) => ({ height: state.height + heightDifference }));\n  }\n\n  render() {\n    const {\n      adhocFilter: propsAdhocFilter,\n      options,\n      onChange,\n      onClose,\n      onResize,\n      datasource,\n      partitionColumn,\n      sections = ['SIMPLE', 'CUSTOM_SQL'],\n      theme,\n      operators,\n      ...popoverProps } =\n    this.props;\n\n    const { adhocFilter } = this.state;\n\n    const resultSections =\n    (datasource == null ? void 0 : datasource.type) === 'druid' ?\n    sections.filter((s) => s !== 'CUSTOM_SQL') :\n    sections;\n\n    const stateIsValid = adhocFilter.isValid();\n    const hasUnsavedChanges = !adhocFilter.equals(propsAdhocFilter);\n\n    const sectionRenders = {};\n\n    sectionRenders.CUSTOM_SQL =\n    ___EmotionJSX(ErrorBoundary, null,\n    ___EmotionJSX(AdhocFilterEditPopoverSqlTabContent, {\n      adhocFilter: this.state.adhocFilter,\n      onChange: this.onAdhocFilterChange,\n      options: this.props.options,\n      height: this.state.height,\n      activeKey: this.state.activeKey }));\n\n\n\n\n    sectionRenders.SIMPLE =\n    ___EmotionJSX(ErrorBoundary, null,\n    ___EmotionJSX(AdhocFilterEditPopoverSimpleTabContent, {\n      operators: operators,\n      adhocFilter: this.state.adhocFilter,\n      onChange: this.onAdhocFilterChange,\n      options: options,\n      datasource: datasource,\n      onHeightChange: this.adjustHeight,\n      partitionColumn: partitionColumn,\n      popoverRef: this.popoverContentRef.current }));\n\n\n\n\n    return (\n      ___EmotionJSX(FilterPopoverContentContainer, _extends({\n        id: \"filter-edit-popover\" },\n      popoverProps, {\n\n        ref: this.popoverContentRef }),\n\n      resultSections.length > 1 ?\n      ___EmotionJSX(Tabs, {\n        id: \"adhoc-filter-edit-tabs\",\n        defaultActiveKey: adhocFilter.expressionType,\n        className: \"adhoc-filter-edit-tabs\",\n\n        style: { minHeight: this.state.height, width: this.state.width },\n        allowOverflow: true,\n        onChange: this.onTabChange },\n\n      resultSections.includes('SIMPLE') &&\n      ___EmotionJSX(Tabs.TabPane, {\n        className: \"adhoc-filter-edit-tab\",\n        key: EXPRESSION_TYPES.SIMPLE,\n        tab: t('Simple') },\n\n      sectionRenders.SIMPLE),\n\n\n      resultSections.includes('CUSTOM_SQL') &&\n      ___EmotionJSX(Tabs.TabPane, {\n        className: \"adhoc-filter-edit-tab\",\n        key: EXPRESSION_TYPES.SQL,\n        tab: t('Custom SQL') },\n\n      sectionRenders.CUSTOM_SQL)) :\n\n\n\n\n      ___EmotionJSX(SectionWrapper, null, sectionRenders[resultSections[0]]),\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, { buttonSize: \"small\", onClick: this.props.onClose, cta: true },\n      t('Close')),\n\n      ___EmotionJSX(Button, {\n\n        disabled: !stateIsValid,\n        buttonStyle:\n        hasUnsavedChanges && stateIsValid ? 'primary' : 'default',\n\n        buttonSize: \"small\",\n        className: \"m-r-5\",\n        onClick: this.onSave,\n        cta: true },\n\n      t('Save')),\n\n      ___EmotionJSX(ResizeIcon, {\n        role: \"button\",\n        \"aria-label\": \"Resize\",\n        tabIndex: 0,\n        onMouseDown: this.onDragDown,\n        className: \"fa fa-expand edit-popover-resize text-muted\" }))));\n\n\n\n\n  }}\n\n\nAdhocFilterEditPopover.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}