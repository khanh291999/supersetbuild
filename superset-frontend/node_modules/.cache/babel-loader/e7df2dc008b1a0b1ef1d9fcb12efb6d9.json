{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport moment from 'moment';\nimport { Behavior, getChartMetadataRegistry, styled, t } from '@superset-ui/core';\nimport { Menu, NoAnimationDropdown } from 'src/common/components';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport CrossFilterScopingModal from 'src/dashboard/components/CrossFilterScopingModal/CrossFilterScopingModal';\nimport Icons from 'src/components/Icons';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport ViewQueryModal from 'src/explore/components/controls/ViewQueryModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MENU_KEYS = {\n  CROSS_FILTER_SCOPING: 'cross_filter_scoping',\n  DOWNLOAD_AS_IMAGE: 'download_as_image',\n  EXPLORE_CHART: 'explore_chart',\n  EXPORT_CSV: 'export_csv',\n  EXPORT_FULL_CSV: 'export_full_csv',\n  FORCE_REFRESH: 'force_refresh',\n  RESIZE_LABEL: 'resize_label',\n  TOGGLE_CHART_DESCRIPTION: 'toggle_chart_description',\n  VIEW_QUERY: 'view_query' };\n\nconst VerticalDotsContainer = styled.div`\n  padding: ${({ theme }) => theme.gridUnit / 4}px\n    ${({ theme }) => theme.gridUnit * 1.5}px;\n\n  .dot {\n    display: block;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\nconst RefreshTooltip = styled.div`\n  height: auto;\n  margin: ${({ theme }) => theme.gridUnit}px 0;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  line-height: ${({ theme }) => theme.typography.sizes.m * 1.5}px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard-component-chart-holder';\nconst VerticalDotsTrigger = () => ___EmotionJSX(VerticalDotsContainer, null,\n___EmotionJSX(\"span\", { className: \"dot\" }),\n___EmotionJSX(\"span\", { className: \"dot\" }),\n___EmotionJSX(\"span\", { className: \"dot\" }));\n\nclass SliceHeaderControls extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.toggleControls = this.toggleControls.bind(this);\n    this.refreshChart = this.refreshChart.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n    this.state = {\n      showControls: false,\n      showCrossFilterScopingModal: false };\n\n  }\n  refreshChart() {\n    if (this.props.updatedDttm) {\n      this.props.forceRefresh(this.props.slice.slice_id, this.props.dashboardId);\n    }\n  }\n  toggleControls() {\n    this.setState((prevState) => ({\n      showControls: !prevState.showControls }));\n\n  }\n  handleMenuClick({ key, domEvent }) {\n    switch (key) {\n      case MENU_KEYS.FORCE_REFRESH:\n        this.refreshChart();\n        break;\n      case MENU_KEYS.CROSS_FILTER_SCOPING:\n        this.setState({ showCrossFilterScopingModal: true });\n        break;\n      case MENU_KEYS.TOGGLE_CHART_DESCRIPTION:\n        // eslint-disable-next-line no-unused-expressions\n        this.props.toggleExpandSlice &&\n        this.props.toggleExpandSlice(this.props.slice.slice_id);\n        break;\n      case MENU_KEYS.EXPLORE_CHART:\n        // eslint-disable-next-line no-unused-expressions\n        this.props.logExploreChart &&\n        this.props.logExploreChart(this.props.slice.slice_id);\n        break;\n      case MENU_KEYS.EXPORT_CSV:\n        // eslint-disable-next-line no-unused-expressions\n        this.props.exportCSV && this.props.exportCSV(this.props.slice.slice_id);\n        break;\n      case MENU_KEYS.RESIZE_LABEL:\n        this.props.handleToggleFullSize();\n        break;\n      case MENU_KEYS.EXPORT_FULL_CSV:\n        // eslint-disable-next-line no-unused-expressions\n        this.props.exportFullCSV &&\n        this.props.exportFullCSV(this.props.slice.slice_id);\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:{\n          // menu closes with a delay, we need to hide it manually,\n          // so that we don't capture it on the screenshot\n          const menu = document.querySelector('.ant-dropdown:not(.ant-dropdown-hidden)');\n          menu.style.visibility = 'hidden';\n          downloadAsImage(SCREENSHOT_NODE_SELECTOR, this.props.slice.slice_name)(domEvent).then(() => {\n            menu.style.visibility = 'visible';\n          });\n          break;\n        }\n      default:\n        break;}\n\n  }\n  render() {var _slice$form_data;\n    const { slice, isFullSize, componentId, cachedDttm = [], updatedDttm = null, addSuccessToast = () => {}, addDangerToast = () => {}, supersetCanShare = false, isCached = [] } = this.props;\n    const crossFilterItems = getChartMetadataRegistry().items;\n    const isTable = slice.viz_type === 'table';\n    const isCrossFilter = Object.entries(crossFilterItems)\n    // @ts-ignore\n    .filter(([, { value }]) => {var _value$behaviors;return (_value$behaviors = value.behaviors) == null ? void 0 : _value$behaviors.includes(Behavior.INTERACTIVE_CHART);}).\n    find(([key]) => key === slice.viz_type);\n    const canEmitCrossFilter = (_slice$form_data = slice.form_data) == null ? void 0 : _slice$form_data.emit_filter;\n    const cachedWhen = (cachedDttm || []).map((itemCachedDttm) => moment.utc(itemCachedDttm).fromNow());\n    const updatedWhen = updatedDttm ? moment.utc(updatedDttm).fromNow() : '';\n    const getCachedTitle = (itemCached) => {\n      if (itemCached) {\n        return t('Cached %s', cachedWhen);\n      }\n      if (updatedWhen) {\n        return t('Fetched %s', updatedWhen);\n      }\n      return '';\n    };\n    const refreshTooltipData = [...new Set(isCached.map(getCachedTitle) || '')];\n    // If all queries have same cache time we can unit them to one\n    const refreshTooltip = refreshTooltipData.map((item, index) => ___EmotionJSX(\"div\", { key: `tooltip-${index}` },\n    refreshTooltipData.length > 1 ?\n    `${t('Query')} ${index + 1}: ${item}` :\n    item));\n\n    const resizeLabel = isFullSize ? t('Minimize chart') : t('Maximize chart');\n    const menu = ___EmotionJSX(Menu, { onClick: this.handleMenuClick, selectable: false },\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.FORCE_REFRESH, disabled: this.props.chartStatus === 'loading', style: { height: 'auto', lineHeight: 'initial' } },\n    t('Force refresh'),\n    ___EmotionJSX(RefreshTooltip, null,\n    refreshTooltip)),\n\n\n\n    ___EmotionJSX(Menu.Divider, null),\n\n    slice.description && ___EmotionJSX(Menu.Item, { key: MENU_KEYS.TOGGLE_CHART_DESCRIPTION },\n    t('Toggle chart description')),\n\n\n    this.props.supersetCanExplore && ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EXPLORE_CHART },\n    ___EmotionJSX(\"a\", { href: this.props.exploreUrl, rel: \"noopener noreferrer\" },\n    t('View chart in Explore'))),\n\n\n\n    this.props.supersetCanExplore && ___EmotionJSX(Menu.Item, { key: MENU_KEYS.VIEW_QUERY },\n    ___EmotionJSX(ModalTrigger, { triggerNode: ___EmotionJSX(\"span\", null, t('View query')), modalTitle: t('View query'), modalBody: ___EmotionJSX(ViewQueryModal, { latestQueryFormData: this.props.formData }), draggable: true, resizable: true, responsive: true })),\n\n\n    supersetCanShare && ___EmotionJSX(ShareMenuItems, { url: getDashboardUrl({\n        pathname: window.location.pathname,\n        filters: getActiveFilters(),\n        hash: componentId }),\n      copyMenuItemTitle: t('Copy chart URL'), emailMenuItemTitle: t('Share chart by email'), emailSubject: t('Superset chart'), emailBody: t('Check out this chart: '), addSuccessToast: addSuccessToast, addDangerToast: addDangerToast }),\n\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.RESIZE_LABEL }, resizeLabel),\n\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.DOWNLOAD_AS_IMAGE },\n    t('Download as image')),\n\n\n    this.props.slice.viz_type !== 'filter_box' &&\n    this.props.supersetCanCSV && ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EXPORT_CSV }, t('Export CSV')),\n\n    this.props.slice.viz_type !== 'filter_box' &&\n    isFeatureEnabled(FeatureFlag.ALLOW_FULL_CSV_EXPORT) &&\n    this.props.supersetCanCSV &&\n    isTable && ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EXPORT_FULL_CSV },\n    t('Export full CSV')),\n\n\n    isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n    isCrossFilter &&\n    canEmitCrossFilter && ___EmotionJSX(Menu.Item, { key: MENU_KEYS.CROSS_FILTER_SCOPING },\n    t('Cross-filter scoping')));\n\n\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CrossFilterScopingModal, { chartId: slice.slice_id, isOpen: this.state.showCrossFilterScopingModal, onClose: () => this.setState({ showCrossFilterScopingModal: false }) }),\n    isFullSize && ___EmotionJSX(Icons.FullscreenExitOutlined, { style: { fontSize: 22 }, onClick: () => {\n        this.props.handleToggleFullSize();\n      } }),\n    ___EmotionJSX(NoAnimationDropdown, { overlay: menu, trigger: ['click'], placement: \"bottomRight\", getPopupContainer: (triggerNode) => triggerNode.closest(SCREENSHOT_NODE_SELECTOR) },\n    ___EmotionJSX(\"span\", { id: `slice_${slice.slice_id}-controls`, role: \"button\", \"aria-label\": \"More Options\" },\n    ___EmotionJSX(VerticalDotsTrigger, null))));\n\n\n\n  }}\n\nexport default SliceHeaderControls;","map":null,"metadata":{},"sourceType":"module"}