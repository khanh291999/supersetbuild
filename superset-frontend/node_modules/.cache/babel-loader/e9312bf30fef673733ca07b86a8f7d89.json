{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, useTheme, t } from '@superset-ui/core';\nimport { noOp } from 'src/utils/common';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport CopyToClipboard from '../CopyToClipboard';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ErrorAlertDiv = styled.div`\n  align-items: center;\n  background-color: ${({ level, theme }) => theme.colors[level].light2};\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ level, theme }) => theme.colors[level].base};\n  color: ${({ level, theme }) => theme.colors[level].dark2};\n  padding: ${({ theme }) => 2 * theme.gridUnit}px;\n  width: 100%;\n\n  .top-row {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .error-body {\n    padding-top: ${({ theme }) => theme.gridUnit}px;\n    padding-left: ${({ theme }) => 8 * theme.gridUnit}px;\n  }\n\n  .icon {\n    margin-right: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n\n  .link {\n    color: ${({ level, theme }) => theme.colors[level].dark2};\n    text-decoration: underline;\n  }\n`;\nconst ErrorModal = styled(Modal)`\n  color: ${({ level, theme }) => theme.colors[level].dark2};\n  overflow-wrap: break-word;\n\n  .ant-modal-header {\n    background-color: ${({ level, theme }) => theme.colors[level].light2};\n    padding: ${({ theme }) => 4 * theme.gridUnit}px;\n  }\n\n  .icon {\n    margin-right: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n\n  .header {\n    display: flex;\n    align-items: center;\n    font-size: ${({ theme }) => theme.typography.sizes.l}px;\n  }\n`;\nconst LeftSideContent = styled.div`\n  align-items: center;\n  display: flex;\n`;\nexport default function ErrorAlert({ body, copyText, level = 'error', source = 'dashboard', subtitle, title }) {\n  const theme = useTheme();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isBodyExpanded, setIsBodyExpanded] = useState(false);\n  const isExpandable = ['explore', 'sqllab'].includes(source);\n  const iconColor = theme.colors[level].base;\n  return ___EmotionJSX(ErrorAlertDiv, { level: level, role: \"alert\" },\n  ___EmotionJSX(\"div\", { className: \"top-row\" },\n  ___EmotionJSX(LeftSideContent, null,\n  level === 'error' ? ___EmotionJSX(Icons.ErrorSolid, { className: \"icon\", iconColor: iconColor }) : ___EmotionJSX(Icons.WarningSolid, { className: \"icon\", iconColor: iconColor }),\n  ___EmotionJSX(\"strong\", null, title)),\n\n  !isExpandable && ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"link\", onClick: () => setIsModalOpen(true) },\n  t('See more'))),\n\n\n  isExpandable ? ___EmotionJSX(\"div\", { className: \"error-body\" },\n  ___EmotionJSX(\"p\", null, subtitle),\n  body && ___EmotionJSX(React.Fragment, null,\n  !isBodyExpanded && ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"link\", onClick: () => setIsBodyExpanded(true) },\n  t('See more')),\n\n  isBodyExpanded && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"br\", null),\n  body,\n  ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"link\", onClick: () => setIsBodyExpanded(false) },\n  t('See less'))))) :\n\n\n\n  ___EmotionJSX(ErrorModal, { level: level, show: isModalOpen, onHide: () => setIsModalOpen(false), title: ___EmotionJSX(\"div\", { className: \"header\" },\n    level === 'error' ? ___EmotionJSX(Icons.ErrorSolid, { className: \"icon\", iconColor: iconColor }) : ___EmotionJSX(Icons.WarningSolid, { className: \"icon\", iconColor: iconColor }),\n    ___EmotionJSX(\"div\", { className: \"title\" }, title)),\n    footer: ___EmotionJSX(React.Fragment, null,\n    copyText && ___EmotionJSX(CopyToClipboard, { text: copyText, shouldShowText: false, wrapped: false, copyNode: ___EmotionJSX(Button, { onClick: noOp }, t('Copy message')) }),\n    ___EmotionJSX(Button, { cta: true, buttonStyle: \"primary\", onClick: () => setIsModalOpen(false) },\n    t('Close'))) },\n\n\n  ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"p\", null, subtitle),\n  ___EmotionJSX(\"br\", null),\n  body)));\n\n\n\n}","map":null,"metadata":{},"sourceType":"module"}