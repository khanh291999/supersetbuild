{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { Input } from 'src/common/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport Alert from 'src/components/Alert';\nimport { t, styled } from '@superset-ui/core';\nimport ReactMarkdown from 'react-markdown';\nimport Modal from 'src/components/Modal';\nimport { Radio } from 'src/components/Radio';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { connect } from 'react-redux';\n// Session storage key for recent dashboard\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";const SK_DASHBOARD_ID = 'save_chart_recent_dashboard';\nconst SELECT_PLACEHOLDER = t('**Select** a dashboard OR **create** a new one');\nexport const StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: visible;\n  }\n`;\nclass SaveModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      saveToDashboardId: null,\n      newSliceName: props.sliceName,\n      alert: null,\n      action: this.canOverwriteSlice() ? 'overwrite' : 'saveas' };\n\n    this.onDashboardSelectChange = this.onDashboardSelectChange.bind(this);\n    this.onSliceNameChange = this.onSliceNameChange.bind(this);\n    this.changeAction = this.changeAction.bind(this);\n    this.saveOrOverwrite = this.saveOrOverwrite.bind(this);\n  }\n  canOverwriteSlice() {var _this$props$slice, _this$props$slice$own;\n    return (_this$props$slice = this.props.slice) == null ? void 0 : (_this$props$slice$own = _this$props$slice.owners) == null ? void 0 : _this$props$slice$own.includes(this.props.userId);\n  }\n  componentDidMount() {\n    this.props.actions.fetchDashboards(this.props.userId).then(() => {\n      const dashboardIds = this.props.dashboards.map((dashboard) => dashboard.value);\n      const lastDashboard = sessionStorage.getItem(SK_DASHBOARD_ID);\n      let recentDashboard = lastDashboard && parseInt(lastDashboard, 10);\n      if (this.props.dashboardId) {\n        recentDashboard = this.props.dashboardId;\n      }\n      if (recentDashboard !== null &&\n      dashboardIds.indexOf(recentDashboard) !== -1) {\n        this.setState({\n          saveToDashboardId: recentDashboard });\n\n      }\n    });\n  }\n  onSliceNameChange(event) {\n    this.setState({ newSliceName: event.target.value });\n  }\n  onDashboardSelectChange(selected) {\n    const newDashboardName = selected ? String(selected) : undefined;\n    const saveToDashboardId = selected && typeof selected === 'number' ? selected : null;\n    this.setState({ saveToDashboardId, newDashboardName });\n  }\n  changeAction(action) {\n    this.setState({ action });\n  }\n  saveOrOverwrite(gotodash) {\n    this.setState({ alert: null });\n    this.props.actions.removeSaveModalAlert();\n    const sliceParams = {};\n    if (this.props.slice && this.props.slice.slice_id) {\n      sliceParams.slice_id = this.props.slice.slice_id;\n    }\n    if (sliceParams.action === 'saveas') {\n      if (this.state.newSliceName === '') {\n        this.setState({ alert: t('Please enter a chart name') });\n        return;\n      }\n    }\n    sliceParams.action = this.state.action;\n    sliceParams.slice_name = this.state.newSliceName;\n    sliceParams.save_to_dashboard_id = this.state.saveToDashboardId;\n    sliceParams.new_dashboard_name = this.state.newDashboardName;\n    this.props.actions.\n    saveSlice(this.props.form_data, sliceParams).\n    then((data) => {\n      if (data.dashboard_id === null) {\n        sessionStorage.removeItem(SK_DASHBOARD_ID);\n      } else\n      {\n        sessionStorage.setItem(SK_DASHBOARD_ID, data.dashboard_id);\n      }\n      // Go to new slice url or dashboard url\n      const url = gotodash ? data.dashboard_url : data.slice.slice_url;\n      window.location.assign(url);\n    });\n    this.props.onHide();\n  }\n  removeAlert() {\n    if (this.props.alert) {\n      this.props.actions.removeSaveModalAlert();\n    }\n    this.setState({ alert: null });\n  }\n  render() {\n    const dashboardSelectValue = this.state.saveToDashboardId || this.state.newDashboardName;\n    return ___EmotionJSX(StyledModal, { show: true, onHide: this.props.onHide, title: t('Save chart'), footer: ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, { id: \"btn_cancel\", buttonSize: \"small\", onClick: this.props.onHide },\n      t('Cancel')),\n\n      ___EmotionJSX(Button, { id: \"btn_modal_save_goto_dash\", buttonSize: \"small\", disabled: !this.state.newSliceName ||\n        !this.state.saveToDashboardId && !this.state.newDashboardName, onClick: () => this.saveOrOverwrite(true) },\n      t('Save & go to dashboard')),\n\n      ___EmotionJSX(Button, { id: \"btn_modal_save\", buttonSize: \"small\", buttonStyle: \"primary\", onClick: () => this.saveOrOverwrite(false), disabled: !this.state.newSliceName },\n      !this.canOverwriteSlice() && this.props.slice ?\n      t('Save as new chart') :\n      t('Save'))) },\n\n\n    ___EmotionJSX(Form, { layout: \"vertical\" },\n    (this.state.alert || this.props.alert) && ___EmotionJSX(Alert, { type: \"warning\", message: ___EmotionJSX(React.Fragment, null,\n      this.state.alert ? this.state.alert : this.props.alert,\n      ___EmotionJSX(\"i\", { role: \"button\", \"aria-label\": \"Remove alert\", tabIndex: 0, className: \"fa fa-close pull-right\", onClick: this.removeAlert.bind(this), style: { cursor: 'pointer' } })) }),\n\n    ___EmotionJSX(FormItem, null,\n    ___EmotionJSX(Radio, { id: \"overwrite-radio\", disabled: !this.canOverwriteSlice(), checked: this.state.action === 'overwrite', onChange: () => this.changeAction('overwrite') },\n    t('Save (Overwrite)')),\n\n    ___EmotionJSX(Radio, { id: \"saveas-radio\", checked: this.state.action === 'saveas', onChange: () => this.changeAction('saveas') },\n    ' ',\n    t('Save as ...'), \" \\xA0\")),\n\n\n    ___EmotionJSX(\"hr\", null),\n    ___EmotionJSX(FormItem, { label: t('Chart name'), required: true },\n    ___EmotionJSX(Input, { name: \"new_slice_name\", type: \"text\", placeholder: \"Name\", value: this.state.newSliceName, onChange: this.onSliceNameChange })),\n\n    ___EmotionJSX(FormItem, { label: t('Add to dashboard') },\n    ___EmotionJSX(Select, { allowClear: true, allowNewOptions: true, ariaLabel: t('Select a dashboard'), options: this.props.dashboards, onChange: this.onDashboardSelectChange, value: dashboardSelectValue || undefined, placeholder:\n      // Using markdown to allow for good i18n\n      ___EmotionJSX(ReactMarkdown, { source: SELECT_PLACEHOLDER, renderers: { paragraph: 'span' } }) }))));\n\n\n\n  }}\n\nfunction mapStateToProps({ explore, saveModal }) {var _explore$user;\n  return {\n    datasource: explore.datasource,\n    slice: explore.slice,\n    userId: (_explore$user = explore.user) == null ? void 0 : _explore$user.userId,\n    dashboards: saveModal.dashboards,\n    alert: saveModal.saveModalAlert };\n\n}\nexport default connect(mapStateToProps, () => ({}))(SaveModal);","map":null,"metadata":{},"sourceType":"module"}