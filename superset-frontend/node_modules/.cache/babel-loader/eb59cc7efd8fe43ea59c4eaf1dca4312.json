{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { styled, t, SupersetClient, css } from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport Icons from 'src/components/Icons';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { Radio } from 'src/components/Radio';\nimport { Select } from 'src/components';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/views/CRUD/data/database/state';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n'pivot_table',\n'pivot_table_v2',\n'table',\n'paired_ttest'];\n\nconst DEFAULT_NOTIFICATION_METHODS = ['Email'];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n{\n  label: t('< (Smaller than)'),\n  value: '<' },\n\n{\n  label: t('> (Larger than)'),\n  value: '>' },\n\n{\n  label: t('<= (Smaller or equal)'),\n  value: '<=' },\n\n{\n  label: t('>= (Larger or equal)'),\n  value: '>=' },\n\n{\n  label: t('== (Is equal)'),\n  value: '==' },\n\n{\n  label: t('!= (Is not equal)'),\n  value: '!=' },\n\n{\n  label: t('Not null'),\n  value: 'not null' }];\n\n\nconst RETENTION_OPTIONS = [\n{\n  label: t('None'),\n  value: 0 },\n\n{\n  label: t('30 days'),\n  value: 30 },\n\n{\n  label: t('60 days'),\n  value: 60 },\n\n{\n  label: t('90 days'),\n  value: 90 }];\n\n\nconst DEFAULT_RETENTION = 90;\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 * * * *'; // every hour\nconst DEFAULT_ALERT = {\n  active: true,\n  creation_method: 'alerts_reports',\n  crontab: DEFAULT_CRON_VALUE,\n  log_retention: DEFAULT_RETENTION,\n  working_timeout: DEFAULT_WORKING_TIMEOUT,\n  name: '',\n  owners: [],\n  recipients: [],\n  sql: '',\n  validator_config_json: {},\n  validator_type: '',\n  grace_period: undefined };\n\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: initial;\n  }\n`;\nconst StyledIcon = (theme) => css`\n  margin: auto ${theme.gridUnit * 2}px auto 0;\n  color: ${theme.colors.grayscale.base};\n`;\nconst StyledSectionContainer = styled.div`\n  display: flex;\n  min-width: 1000px;\n  flex-direction: column;\n\n  .header-section {\n    display: flex;\n    flex: 0 0 auto;\n    align-items: center;\n    width: 100%;\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n\n  .column-section {\n    display: flex;\n    flex: 1 1 auto;\n\n    .column {\n      flex: 1 1 auto;\n      min-width: calc(33.33% - ${({ theme }) => theme.gridUnit * 8}px);\n      padding: ${({ theme }) => theme.gridUnit * 4}px;\n\n      .async-select {\n        margin: 10px 0 20px;\n      }\n\n      &.condition {\n        border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n\n      &.message {\n        border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n    }\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n\n    &.add-margin {\n      margin-bottom: 5px;\n    }\n\n    .styled-input {\n      margin: 0 0 0 10px;\n\n      input {\n        flex: 0 0 auto;\n      }\n    }\n  }\n`;\nconst StyledSectionTitle = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n\n  h4 {\n    margin: 0;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n`;\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\nexport const StyledInputContainer = styled.div`\n  flex: 1;\n  margin: ${({ theme }) => theme.gridUnit * 2}px;\n  margin-top: 0;\n\n  .helper {\n    display: block;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n    padding: ${({ theme }) => theme.gridUnit}px 0;\n    text-align: left;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    > div {\n      width: 100%;\n    }\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  input[disabled] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n\n  textarea {\n    height: 300px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='description'] {\n      flex: 1 1 auto;\n    }\n  }\n\n  .input-label {\n    margin-left: 10px;\n  }\n`;\nconst StyledRadio = styled(Radio)`\n  display: block;\n  line-height: ${({ theme }) => theme.gridUnit * 7}px;\n`;\nconst StyledRadioGroup = styled(Radio.Group)`\n  margin-left: ${({ theme }) => theme.gridUnit * 5.5}px;\n`;\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  cursor: pointer;\n\n  i {\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &.disabled {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    cursor: default;\n  }\n`;\nconst timezoneHeaderStyle = (theme) => css`\n  margin: ${theme.gridUnit * 3}px 0;\n`;\nconst NotificationMethodAdd = ({ status = 'active', onClick }) => {\n  if (status === 'hidden') {\n    return null;\n  }\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n  return ___EmotionJSX(StyledNotificationAddButton, { className: status, onClick: checkStatus },\n  ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), ' ',\n  status === 'active' ?\n  t('Add notification method') :\n  t('Add delivery method'));\n\n};\nconst AlertReportModal = ({ addDangerToast, onAdd, onHide, show, alert = null, isReport = false }) => {var _currentAlert$databas2, _currentAlert$databas3, _currentAlert$validat5, _currentAlert$chart2, _currentAlert$chart3, _currentAlert$dashboa2, _currentAlert$dashboa3;\n  const conf = useCommonConf();\n  const allowedNotificationMethods = (conf == null ? void 0 : conf.ALERT_REPORTS_NOTIFICATION_METHODS) || DEFAULT_NOTIFICATION_METHODS;\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentAlert, setCurrentAlert] = useState();\n  const [isHidden, setIsHidden] = useState(true);\n  const [contentType, setContentType] = useState('dashboard');\n  const [reportFormat, setReportFormat] = useState(DEFAULT_NOTIFICATION_FORMAT);\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState(false);\n  const [sourceOptions, setSourceOptions] = useState([]);\n  const [dashboardOptions, setDashboardOptions] = useState([]);\n  const [chartOptions, setChartOptions] = useState([]);\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState('');\n  const isEditMode = alert !== null;\n  const formatOptionEnabled = contentType === 'chart' && (\n  isFeatureEnabled(FeatureFlag.ALERTS_ATTACH_REPORTS) || isReport);\n  const [notificationAddState, setNotificationAddState] = useState('active');\n  const [notificationSettings, setNotificationSettings] = useState([]);\n  const onNotificationAdd = () => {\n    const settings = notificationSettings.slice();\n    settings.push({\n      recipients: '',\n      options: allowedNotificationMethods });\n\n    setNotificationSettings(settings);\n    setNotificationAddState(settings.length === allowedNotificationMethods.length ?\n    'hidden' :\n    'disabled');\n  };\n  const updateNotificationSetting = (index, setting) => {\n    const settings = notificationSettings.slice();\n    settings[index] = setting;\n    setNotificationSettings(settings);\n    if (setting.method !== undefined && notificationAddState !== 'hidden') {\n      setNotificationAddState('active');\n    }\n  };\n  const removeNotificationSetting = (index) => {\n    const settings = notificationSettings.slice();\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n  // Alert fetch logic\n  const { state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('report', t('report'), addDangerToast);\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...DEFAULT_ALERT });\n    setNotificationAddState('active');\n  };\n  const onSave = () => {var _currentAlert$chart, _currentAlert$dashboa, _currentAlert$databas;\n    // Notification Settings\n    const recipients = [];\n    notificationSettings.forEach((setting) => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients },\n\n          type: setting.method });\n\n      }\n    });\n    const data = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull ?\n      {} :\n      currentAlert == null ? void 0 : currentAlert.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert == null ? void 0 : (_currentAlert$chart = currentAlert.chart) == null ? void 0 : _currentAlert$chart.value : null,\n      dashboard: contentType === 'dashboard' ? currentAlert == null ? void 0 : (_currentAlert$dashboa = currentAlert.dashboard) == null ? void 0 : _currentAlert$dashboa.value : null,\n      database: currentAlert == null ? void 0 : (_currentAlert$databas = currentAlert.database) == null ? void 0 : _currentAlert$databas.value,\n      owners: ((currentAlert == null ? void 0 : currentAlert.owners) || []).map((owner) => owner.value),\n      recipients,\n      report_format: contentType === 'dashboard' ?\n      DEFAULT_NOTIFICATION_FORMAT :\n      reportFormat || DEFAULT_NOTIFICATION_FORMAT };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n    data.context_markdown = 'string';\n    if (isEditMode) {\n      // Edit\n      if (currentAlert && currentAlert.id) {\n        const update_id = currentAlert.id;\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n        updateResource(update_id, data).then((response) => {\n          if (!response) {\n            return;\n          }\n          if (onAdd) {\n            onAdd();\n          }\n          hide();\n        });\n      }\n    } else\n    if (currentAlert) {\n      // Create\n      createResource(data).then((response) => {\n        if (!response) {\n          return;\n        }\n        if (onAdd) {\n          onAdd(response);\n        }\n        hide();\n      });\n    }\n  };\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({ filter: input, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/owners?q=${query}` }).\n    then((response) => ({\n      data: response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text })),\n\n      totalCount: response.json.count }));\n\n  }, []);\n  const getSourceData = useCallback((db) => {\n    const database = db || (currentAlert == null ? void 0 : currentAlert.database);\n    if (!database || database.label) {\n      return null;\n    }\n    let result;\n    // Cycle through source options to find the selected option\n    sourceOptions.forEach((source) => {\n      if (source.value === database.value || source.value === database.id) {\n        result = source;\n      }\n    });\n    return result;\n  }, [currentAlert == null ? void 0 : currentAlert.database, sourceOptions]);\n  // Updating alert/report state\n  const updateAlertState = (name, value) => {\n    setCurrentAlert((currentAlertData) => ({\n      ...currentAlertData,\n      [name]: value }));\n\n  };\n  const loadSourceOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({ filter: input, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/database?q=${query}` }).\n    then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text }));\n\n      setSourceOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const databaseLabel = currentAlert && currentAlert.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n  const loadDashboardOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({ filter: input, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/dashboard?q=${query}` }).\n    then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text }));\n\n      setDashboardOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getDashboardData = (db) => {\n    const dashboard = db || (currentAlert == null ? void 0 : currentAlert.dashboard);\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n    let result;\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach((dash) => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n    return result;\n  };\n  const getChartData = useCallback((chartData) => {\n    const chart = chartData || (currentAlert == null ? void 0 : currentAlert.chart);\n    if (!chart || chart.label) {\n      return null;\n    }\n    let result;\n    // Cycle through chart options to find the selected option\n    chartOptions.forEach((slice) => {\n      if (slice.value === chart.value || slice.value === chart.id) {\n        result = slice;\n      }\n    });\n    return result;\n  }, [chartOptions, currentAlert == null ? void 0 : currentAlert.chart]);\n  const noChartLabel = currentAlert && currentAlert.chart && !currentAlert.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n  const loadChartOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({ filter: input, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/chart?q=${query}` }).\n    then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text }));\n\n      setChartOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getChartVisualizationType = (chart) => SupersetClient.get({\n    endpoint: `/api/v1/chart/${chart.value}` }).\n  then((response) => setChartVizType(response.json.result.viz_type));\n  // Handle input/textarea updates\n  const onTextChange = (event) => {\n    const { target } = event;\n    updateAlertState(target.name, target.value);\n  };\n  const onTimeoutVerifyChange = (event) => {\n    const { target } = event;\n    const value = +target.value;\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, null);\n    } else\n    {\n      updateAlertState(target.name, value ? Math.max(value, TIMEOUT_MIN) : value);\n    }\n  };\n  const onSQLChange = (value) => {\n    updateAlertState('sql', value || '');\n  };\n  const onOwnersChange = (value) => {\n    updateAlertState('owners', value || []);\n  };\n  const onSourceChange = (value) => {\n    updateAlertState('database', value || []);\n  };\n  const onDashboardChange = (dashboard) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n  const onChartChange = (chart) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n  const onActiveSwitch = (checked) => {\n    updateAlertState('active', checked);\n  };\n  const onConditionChange = (op) => {var _currentAlert$validat;\n    setConditionNotNull(op === 'not null');\n    const config = {\n      op,\n      threshold: currentAlert ? (_currentAlert$validat =\n      currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat.threshold :\n      undefined };\n\n    updateAlertState('validator_config_json', config);\n  };\n  const onThresholdChange = (event) => {var _currentAlert$validat2;\n    const { target } = event;\n    const config = {\n      op: currentAlert ? (_currentAlert$validat2 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat2.op : undefined,\n      threshold: target.value };\n\n    updateAlertState('validator_config_json', config);\n  };\n  const onLogRetentionChange = (retention) => {\n    updateAlertState('log_retention', retention);\n  };\n  const onTimezoneChange = (timezone) => {\n    updateAlertState('timezone', timezone);\n  };\n  const onContentTypeChange = (event) => {\n    const { target } = event;\n    // Gives time to close the select before changing the type\n    setTimeout(() => setContentType(target.value), 200);\n  };\n  const onFormatChange = (event) => {\n    const { target } = event;\n    setReportFormat(target.value);\n  };\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n    let hasInfo = false;\n    notificationSettings.forEach((setting) => {var _setting$recipients;\n      if (!!setting.method && (_setting$recipients = setting.recipients) != null && _setting$recipients.length) {\n        hasInfo = true;\n      }\n    });\n    return hasInfo;\n  };\n  const validate = () => {var _currentAlert$name, _currentAlert$owners, _currentAlert$crontab;\n    if (currentAlert && (_currentAlert$name =\n    currentAlert.name) != null && _currentAlert$name.length && (_currentAlert$owners =\n    currentAlert.owners) != null && _currentAlert$owners.length && (_currentAlert$crontab =\n    currentAlert.crontab) != null && _currentAlert$crontab.length &&\n    currentAlert.working_timeout !== undefined && (\n    contentType === 'dashboard' && !!currentAlert.dashboard ||\n    contentType === 'chart' && !!currentAlert.chart) &&\n    checkNotificationSettings()) {var _currentAlert$sql, _currentAlert$validat3, _currentAlert$validat4;\n      if (isReport) {\n        setDisableSave(false);\n      } else\n      if (!!currentAlert.database && (_currentAlert$sql =\n      currentAlert.sql) != null && _currentAlert$sql.length && (\n      conditionNotNull || !!((_currentAlert$validat3 = currentAlert.validator_config_json) != null && _currentAlert$validat3.op)) && (\n      conditionNotNull ||\n      ((_currentAlert$validat4 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat4.threshold) !== undefined)) {\n        setDisableSave(false);\n      } else\n      {\n        setDisableSave(true);\n      }\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !(currentAlert != null && currentAlert.id) || (alert == null ? void 0 : alert.id) !== currentAlert.id || isHidden && show)) {\n      if (alert && alert.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentAlert || currentAlert.id || isHidden && show)) {\n      setCurrentAlert({ ...DEFAULT_ALERT });\n      setNotificationSettings([]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map((setting) => {\n        const config = typeof setting.recipient_config_json === 'string' ?\n        JSON.parse(setting.recipient_config_json) :\n        {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods };\n\n      });\n      setNotificationSettings(settings);\n      setNotificationAddState(settings.length === allowedNotificationMethods.length ?\n      'hidden' :\n      'active');\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(resource.chart ?\n      resource.report_format || DEFAULT_NOTIFICATION_FORMAT :\n      DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig = typeof resource.validator_config_json === 'string' ?\n      JSON.parse(resource.validator_config_json) :\n      resource.validator_config_json;\n      setConditionNotNull(resource.validator_type === 'not null');\n      if (resource.chart) {\n        setChartVizType(resource.chart.viz_type);\n      }\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart ?\n        getChartData(resource.chart) || {\n          value: resource.chart.id,\n          label: resource.chart.slice_name } :\n\n        undefined,\n        dashboard: resource.dashboard ?\n        getDashboardData(resource.dashboard) || {\n          value: resource.dashboard.id,\n          label: resource.dashboard.dashboard_title } :\n\n        undefined,\n        database: resource.database ?\n        getSourceData(resource.database) || {\n          value: resource.database.id,\n          label: resource.database.database_name } :\n\n        undefined,\n        owners: (resource.owners || []).map((owner) => ({\n          value: owner.id,\n          label: `${owner.first_name} ${owner.last_name}` })),\n\n        // @ts-ignore: Type not assignable\n        validator_config_json: resource.validator_type === 'not null' ?\n        {\n          op: 'not null' } :\n\n        validatorConfig });\n\n    }\n  }, [resource]);\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validate();\n  }, [\n  currentAlertSafe.name,\n  currentAlertSafe.owners,\n  currentAlertSafe.database,\n  currentAlertSafe.sql,\n  currentAlertSafe.validator_config_json,\n  currentAlertSafe.crontab,\n  currentAlertSafe.working_timeout,\n  currentAlertSafe.dashboard,\n  currentAlertSafe.chart,\n  contentType,\n  notificationSettings,\n  conditionNotNull]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return ___EmotionJSX(StyledModal, { className: \"no-content-padding\", responsive: true, disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), show: show, width: \"100%\", maxWidth: \"1450px\", title: ___EmotionJSX(\"h4\", null,\n    isEditMode ? ___EmotionJSX(Icons.EditAlt, { css: StyledIcon }) : ___EmotionJSX(Icons.PlusLarge, { css: StyledIcon }),\n    isEditMode ?\n    t(`Edit ${isReport ? 'Report' : 'Alert'}`) :\n    t(`Add ${isReport ? 'Report' : 'Alert'}`)) },\n\n  ___EmotionJSX(StyledSectionContainer, null,\n  ___EmotionJSX(\"div\", { className: \"header-section\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  isReport ? t('Report name') : t('Alert name'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"name\", value: currentAlert ? currentAlert.name : '', placeholder: isReport ? t('Report name') : t('Alert name'), onChange: onTextChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Owners'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Owners'), allowClear: true, name: \"owners\", mode: \"multiple\", value: (currentAlert == null ? void 0 : currentAlert.owners) || [], options: loadOwnerOptions, onChange: onOwnersChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Description')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"description\", value: currentAlert ? currentAlert.description || '' : '', placeholder: t('Description'), onChange: onTextChange }))),\n\n\n  ___EmotionJSX(StyledSwitchContainer, null,\n  ___EmotionJSX(Switch, { onChange: onActiveSwitch, checked: currentAlert ? currentAlert.active : true }),\n  ___EmotionJSX(\"div\", { className: \"switch-label\" }, \"Active\"))),\n\n\n  ___EmotionJSX(\"div\", { className: \"column-section\" },\n  !isReport && ___EmotionJSX(\"div\", { className: \"column condition\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Alert condition'))),\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Database'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Database'), name: \"source\", value: currentAlert != null && (_currentAlert$databas2 = currentAlert.database) != null && _currentAlert$databas2.label &&\n    currentAlert != null && (_currentAlert$databas3 = currentAlert.database) != null && _currentAlert$databas3.value ?\n    {\n      value: currentAlert.database.value,\n      label: currentAlert.database.label } :\n\n    undefined, options: loadSourceOptions, onChange: onSourceChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('SQL Query'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(TextAreaControl, { name: \"sql\", language: \"sql\", offerEditInModal: false, minLines: 15, maxLines: 15, onChange: onSQLChange, readOnly: false, initialValue: resource == null ? void 0 : resource.sql, key: currentAlert == null ? void 0 : currentAlert.id })),\n\n  ___EmotionJSX(\"div\", { className: \"inline-container wrap\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Trigger Alert If...'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Condition'), onChange: onConditionChange, placeholder: \"Condition\", value: (currentAlert == null ? void 0 : (_currentAlert$validat5 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat5.op) || undefined, options: CONDITIONS }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Value'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"threshold\", disabled: conditionNotNull, value: currentAlert &&\n    currentAlert.validator_config_json &&\n    currentAlert.validator_config_json.threshold !==\n    undefined ?\n    currentAlert.validator_config_json.threshold :\n    '', placeholder: t('Value'), onChange: onThresholdChange }))))),\n\n\n\n\n  ___EmotionJSX(\"div\", { className: \"column schedule\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null,\n  isReport ?\n  t('Report schedule') :\n  t('Alert condition schedule')),\n\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(AlertReportCronScheduler, { value: (currentAlert == null ? void 0 : currentAlert.crontab) || DEFAULT_CRON_VALUE, onChange: (newVal) => updateAlertState('crontab', newVal) }),\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Timezone')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", css: (theme) => timezoneHeaderStyle(theme) },\n  ___EmotionJSX(TimezoneSelector, { onTimezoneChange: onTimezoneChange, timezone: currentAlert == null ? void 0 : currentAlert.timezone })),\n\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Schedule settings'))),\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Log retention'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Log retention'), placeholder: t('Log retention'), onChange: onLogRetentionChange, value: (currentAlert == null ? void 0 : currentAlert.log_retention) || DEFAULT_RETENTION, options: RETENTION_OPTIONS }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Working timeout'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", min: \"1\", name: \"working_timeout\", value: (currentAlert == null ? void 0 : currentAlert.working_timeout) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange }),\n  ___EmotionJSX(\"span\", { className: \"input-label\" }, \"seconds\"))),\n\n\n  !isReport && ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Grace period')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", min: \"1\", name: \"grace_period\", value: (currentAlert == null ? void 0 : currentAlert.grace_period) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange }),\n  ___EmotionJSX(\"span\", { className: \"input-label\" }, \"seconds\")))),\n\n\n\n  ___EmotionJSX(\"div\", { className: \"column message\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Message content')),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(Radio.Group, { onChange: onContentTypeChange, value: contentType },\n  ___EmotionJSX(StyledRadio, { value: \"dashboard\" }, t('Dashboard')),\n  ___EmotionJSX(StyledRadio, { value: \"chart\" }, t('Chart'))),\n\n  ___EmotionJSX(Select, { ariaLabel: t('Chart'), css: /*#__PURE__*/_css({\n      display: contentType === 'chart' ? 'inline' : 'none' }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:AlertReportModal;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    name: \"chart\", value: currentAlert != null && (_currentAlert$chart2 = currentAlert.chart) != null && _currentAlert$chart2.label && currentAlert != null && (_currentAlert$chart3 = currentAlert.chart) != null && _currentAlert$chart3.value ?\n    {\n      value: currentAlert.chart.value,\n      label: currentAlert.chart.label } :\n\n    undefined, options: loadChartOptions, onChange: onChartChange }),\n  ___EmotionJSX(Select, { ariaLabel: t('Dashboard'), css: /*#__PURE__*/_css({\n      display: contentType === 'dashboard' ? 'inline' : 'none' }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:AlertReportModal;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    name: \"dashboard\", value: currentAlert != null && (_currentAlert$dashboa2 = currentAlert.dashboard) != null && _currentAlert$dashboa2.label && currentAlert != null && (_currentAlert$dashboa3 = currentAlert.dashboard) != null && _currentAlert$dashboa3.value ?\n    {\n      value: currentAlert.dashboard.value,\n      label: currentAlert.dashboard.label } :\n\n    undefined, options: loadDashboardOptions, onChange: onDashboardChange }),\n  formatOptionEnabled && ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledRadioGroup, { onChange: onFormatChange, value: reportFormat },\n  ___EmotionJSX(StyledRadio, { value: \"PNG\" }, t('Send as PNG')),\n  ___EmotionJSX(StyledRadio, { value: \"CSV\" }, t('Send as CSV')),\n  TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType) && ___EmotionJSX(StyledRadio, { value: \"TEXT\" }, t('Send as text')))),\n\n\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Notification method')),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  notificationSettings.map((notificationSetting, i) => ___EmotionJSX(NotificationMethod, { setting: notificationSetting, index: i, key: `NotificationMethod-${i}`, onUpdate: updateNotificationSetting, onRemove: removeNotificationSetting })),\n  ___EmotionJSX(NotificationMethodAdd, { status: notificationAddState, onClick: onNotificationAdd })))));\n\n\n\n\n};\nexport default withToasts(AlertReportModal);","map":null,"metadata":{},"sourceType":"module"}