{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\nimport { getChartKey } from 'src/explore/exploreUtils';\nimport { getControlsState } from 'src/explore/store';\nimport { getFormDataFromControls, applyMapStateToPropsToControl } from 'src/explore/controlUtils';\nexport default function getInitialState(bootstrapData) {\n  const { form_data: initialFormData } = bootstrapData;\n  const { slice } = bootstrapData;\n  const sliceName = slice ? slice.slice_name : null;\n  const exploreState = {\n    // note this will add `form_data` to state,\n    // which will be manipulatable by future reducers.\n    ...bootstrapData,\n    sliceName,\n    common: {\n      flash_messages: bootstrapData.common.flash_messages,\n      conf: bootstrapData.common.conf },\n\n    isDatasourceMetaLoading: false,\n    isStarred: false,\n    // Initial control state will skip `control.mapStateToProps`\n    // because `bootstrapData.controls` is undefined.\n    controls: getControlsState(bootstrapData, initialFormData) };\n\n  // apply initial mapStateToProps for all controls, must execute AFTER\n  // bootstrapState has initialized `controls`. Order of execution is not\n  // guaranteed, so controls shouldn't rely on the each other's mapped state.\n  Object.entries(exploreState.controls).forEach(([key, controlState]) => {\n    exploreState.controls[key] = applyMapStateToPropsToControl(controlState, exploreState);\n  });\n  const sliceFormData = slice ?\n  getFormDataFromControls(getControlsState(bootstrapData, slice.form_data)) :\n  null;\n  const chartKey = getChartKey(bootstrapData);\n  const chart = {\n    id: chartKey,\n    chartAlert: null,\n    chartStatus: null,\n    chartStackTrace: null,\n    chartUpdateEndTime: null,\n    chartUpdateStartTime: 0,\n    latestQueryFormData: getFormDataFromControls(exploreState.controls),\n    sliceFormData,\n    queryController: null,\n    queriesResponse: null,\n    triggerQuery: false,\n    lastRendered: 0 };\n\n  return {\n    charts: {\n      [chartKey]: chart },\n\n    saveModal: {\n      dashboards: [],\n      saveModalAlert: null },\n\n    explore: exploreState,\n    impressionId: shortid.generate(),\n    messageToasts: getToastsFromPyFlashMessages((bootstrapData.common || {}).flash_messages || []) };\n\n}","map":null,"metadata":{},"sourceType":"module"}