{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\n\nimport Popover from 'src/components/Popover';\nimport FormRow from 'src/components/FormRow';\nimport { Select } from 'src/components';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport { FILTER_CONFIG_ATTRIBUTES } from 'src/explore/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst INTEGRAL_TYPES = new Set([\n'TINYINT',\n'SMALLINT',\n'INT',\n'INTEGER',\n'BIGINT',\n'LONG']);\n\nconst DECIMAL_TYPES = new Set([\n'FLOAT',\n'DOUBLE',\n'REAL',\n'NUMERIC',\n'DECIMAL',\n'MONEY']);\n\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  asc: PropTypes.bool,\n  clearable: PropTypes.bool,\n  multiple: PropTypes.bool,\n  column: PropTypes.string,\n  label: PropTypes.string,\n  metric: PropTypes.string,\n  searchAllOptions: PropTypes.bool,\n  defaultValue: PropTypes.string };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  asc: true,\n  clearable: true,\n  multiple: true,\n  searchAllOptions: false };\n\n\nconst STYLE_WIDTH = { width: 350 };\n\nexport default class FilterBoxItemControl extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      column,\n      metric,\n      asc,\n      clearable,\n      multiple,\n      searchAllOptions,\n      label,\n      defaultValue } =\n    props;\n    this.state = {\n      column,\n      metric,\n      label,\n      asc,\n      clearable,\n      multiple,\n      searchAllOptions,\n      defaultValue };\n\n    this.onChange = this.onChange.bind(this);\n    this.onControlChange = this.onControlChange.bind(this);\n  }\n\n  onChange() {\n    this.props.onChange(this.state);\n  }\n\n  onControlChange(attr, value) {\n    let typedValue = value;\n    const { column: selectedColumnName, multiple } = this.state;\n    if (value && !multiple && attr === FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE) {\n      // if single value filter_box,\n      // convert input value string to the column's data type\n      const { datasource } = this.props;\n      const selectedColumn = datasource.columns.find(\n      (col) => col.column_name === selectedColumnName);\n\n\n      if (selectedColumn && selectedColumn.type) {\n        const type = selectedColumn.type.toUpperCase();\n        if (type === 'BOOLEAN') {\n          typedValue = value === 'true';\n        } else if (INTEGRAL_TYPES.has(type)) {\n          typedValue = Number.isNaN(Number(value)) ? null : parseInt(value, 10);\n        } else if (DECIMAL_TYPES.has(type)) {\n          typedValue = Number.isNaN(Number(value)) ? null : parseFloat(value);\n        }\n      }\n    }\n    this.setState({ [attr]: typedValue }, this.onChange);\n  }\n\n  setType() {}\n\n  textSummary() {\n    return this.state.column || 'N/A';\n  }\n\n  renderForm() {\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(FormRow, {\n        label: t('Column'),\n        control:\n        ___EmotionJSX(Select, {\n          ariaLabel: t('Column'),\n          value: this.state.column,\n          name: \"column\",\n          options: this.props.datasource.columns.\n          filter((col) => col.column_name !== this.state.column).\n          map((col) => ({\n            value: col.column_name,\n            label: col.column_name })).\n\n          concat([\n          { value: this.state.column, label: this.state.column }]),\n\n          onChange: (v) => this.onControlChange('column', v) }) }),\n\n\n\n      ___EmotionJSX(FormRow, {\n        label: t('Label'),\n        control:\n        ___EmotionJSX(TextControl, {\n          value: this.state.label,\n          name: \"label\",\n          onChange: (v) => this.onControlChange('label', v) }) }),\n\n\n\n      ___EmotionJSX(FormRow, {\n        label: t('Default'),\n        tooltip: t(\n        '(optional) default value for the filter, when using ' +\n        'the multiple option, you can use a semicolon-delimited list ' +\n        'of options.'),\n\n        control:\n        ___EmotionJSX(TextControl, {\n          value: this.state.defaultValue,\n          name: \"defaultValue\",\n          onChange: (v) =>\n          this.onControlChange(FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE, v) }) }),\n\n\n\n\n      ___EmotionJSX(FormRow, {\n        label: t('Sort metric'),\n        tooltip: t('Metric to sort the results by'),\n        control:\n        ___EmotionJSX(Select, {\n          ariaLabel: t('Sort metric'),\n          value: this.state.metric,\n          name: \"column\",\n          options: this.props.datasource.metrics.\n          filter((m) => m.metric_name !== this.state.metric).\n          map((m) => ({\n            value: m.metric_name,\n            label: m.metric_name })).\n\n          concat([\n          { value: this.state.metric, label: this.state.metric }]),\n\n          onChange: (v) => this.onControlChange('metric', v) }) }),\n\n\n\n      ___EmotionJSX(FormRow, {\n        label: t('Sort ascending'),\n        tooltip: t('Check for sorting ascending'),\n        isCheckbox: true,\n        control:\n        ___EmotionJSX(CheckboxControl, {\n          value: this.state.asc,\n          onChange: (v) => this.onControlChange('asc', v) }) }),\n\n\n\n      ___EmotionJSX(FormRow, {\n        label: t('Allow multiple selections'),\n        isCheckbox: true,\n        tooltip: t(\n        'Multiple selections allowed, otherwise filter ' +\n        'is limited to a single value'),\n\n        control:\n        ___EmotionJSX(CheckboxControl, {\n          value: this.state.multiple,\n          onChange: (v) =>\n          this.onControlChange(FILTER_CONFIG_ATTRIBUTES.MULTIPLE, v) }) }),\n\n\n\n\n      ___EmotionJSX(FormRow, {\n        label: t('Search all filter options'),\n        tooltip: t(\n        'By default, each filter loads at most 1000 choices at the initial page load. ' +\n        'Check this box if you have more than 1000 filter values and want to enable dynamically ' +\n        'searching that loads filter values as users type (may add stress to your database).'),\n\n        isCheckbox: true,\n        control:\n        ___EmotionJSX(CheckboxControl, {\n          value: this.state.searchAllOptions,\n          onChange: (v) =>\n          this.onControlChange(\n          FILTER_CONFIG_ATTRIBUTES.SEARCH_ALL_OPTIONS,\n          v) }) }),\n\n\n\n\n\n      ___EmotionJSX(FormRow, {\n        label: t('Required'),\n        tooltip: t('User must select a value for this filter'),\n        isCheckbox: true,\n        control:\n        ___EmotionJSX(CheckboxControl, {\n          value: !this.state.clearable,\n          onChange: (v) => this.onControlChange('clearable', !v) }) })));\n\n\n\n\n\n  }\n\n  renderPopover() {\n    return (\n      ___EmotionJSX(\"div\", { id: \"ts-col-popo\", style: STYLE_WIDTH },\n      this.renderForm()));\n\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"span\", null,\n      this.textSummary(), ' ',\n      ___EmotionJSX(Popover, {\n        trigger: \"click\",\n        placement: \"right\",\n        content: this.renderPopover(),\n        title: t('Filter configuration') },\n\n      ___EmotionJSX(InfoTooltipWithTrigger, {\n        icon: \"edit\",\n        className: \"text-primary\",\n        label: \"edit-ts-column\" }))));\n\n\n\n\n  }}\n\n\nFilterBoxItemControl.propTypes = propTypes;\nFilterBoxItemControl.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}