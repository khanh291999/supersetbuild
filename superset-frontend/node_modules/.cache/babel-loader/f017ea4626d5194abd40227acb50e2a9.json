{"ast":null,"code":"/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t, styled, supersetTheme } from '@superset-ui/core';\n\nimport { Dropdown, Menu } from 'src/common/components';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ChangeDatasourceModal from 'src/datasource/ChangeDatasourceModal';\nimport DatasourceModal from 'src/datasource/DatasourceModal';\nimport { postForm } from 'src/explore/exploreUtils';\nimport Button from 'src/components/Button';\nimport ErrorAlert from 'src/components/ErrorMessage/ErrorAlert';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  datasource: PropTypes.object.isRequired,\n  form_data: PropTypes.object.isRequired,\n  isEditable: PropTypes.bool,\n  onDatasourceSave: PropTypes.func };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  onDatasourceSave: null,\n  value: null,\n  isEditable: true };\n\n\nconst Styles = styled.div`\n  .data-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    padding: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n  .error-alert {\n    margin: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n  .ant-dropdown-trigger {\n    margin-left: ${({ theme }) => 2 * theme.gridUnit}px;\n    box-shadow: none;\n    &:active {\n      box-shadow: none;\n    }\n  }\n  .btn-group .open .dropdown-toggle {\n    box-shadow: none;\n    &.button-default {\n      background: none;\n    }\n  }\n  i.angle {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n  svg.datasource-modal-trigger {\n    color: ${({ theme }) => theme.colors.primary.base};\n    cursor: pointer;\n  }\n  .title-select {\n    flex: 1 1 100%;\n    display: inline-block;\n    background-color: ${({ theme }) => theme.colors.grayscale.light3};\n    padding: ${({ theme }) => theme.gridUnit * 2}px;\n    border-radius: ${({ theme }) => theme.borderRadius}px;\n    text-align: center;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n  .dataset-svg {\n    margin-right: ${({ theme }) => 2 * theme.gridUnit}px;\n    flex: none;\n  }\n  span[aria-label='dataset-physical'] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n  span[aria-label='more-vert'] {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nconst CHANGE_DATASET = 'change_dataset';\nconst VIEW_IN_SQL_LAB = 'view_in_sql_lab';\nconst EDIT_DATASET = 'edit_dataset';\n\nclass DatasourceControl extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showEditDatasourceModal: false,\n      showChangeDatasourceModal: false };\n\n    this.onDatasourceSave = this.onDatasourceSave.bind(this);\n    this.toggleChangeDatasourceModal = this.toggleChangeDatasourceModal.bind(\n    this);\n\n    this.toggleEditDatasourceModal = this.toggleEditDatasourceModal.bind(this);\n    this.toggleShowDatasource = this.toggleShowDatasource.bind(this);\n    this.handleMenuItemClick = this.handleMenuItemClick.bind(this);\n  }\n\n  onDatasourceSave(datasource) {var _this$props$form_data, _columns$find;\n    this.props.actions.setDatasource(datasource);\n    const timeCol = (_this$props$form_data = this.props.form_data) == null ? void 0 : _this$props$form_data.granularity_sqla;\n    const { columns } = this.props.datasource;\n    const firstDttmCol = columns.find((column) => column.is_dttm);\n    if (\n    datasource.type === 'table' &&\n    !((_columns$find = columns.find(({ column_name }) => column_name === timeCol)) != null && _columns$find.is_dttm))\n    {\n      // set `granularity_sqla` to first datatime column name or null\n      this.props.actions.setControlValue(\n      'granularity_sqla',\n      firstDttmCol ? firstDttmCol.column_name : null);\n\n    }\n    if (this.props.onDatasourceSave) {\n      this.props.onDatasourceSave(datasource);\n    }\n  }\n\n  toggleShowDatasource() {\n    this.setState(({ showDatasource }) => ({\n      showDatasource: !showDatasource }));\n\n  }\n\n  toggleChangeDatasourceModal() {\n    this.setState(({ showChangeDatasourceModal }) => ({\n      showChangeDatasourceModal: !showChangeDatasourceModal }));\n\n  }\n\n  toggleEditDatasourceModal() {\n    this.setState(({ showEditDatasourceModal }) => ({\n      showEditDatasourceModal: !showEditDatasourceModal }));\n\n  }\n\n  handleMenuItemClick({ key }) {\n    if (key === CHANGE_DATASET) {\n      this.toggleChangeDatasourceModal();\n    }\n    if (key === EDIT_DATASET) {\n      this.toggleEditDatasourceModal();\n    }\n    if (key === VIEW_IN_SQL_LAB) {\n      const { datasource } = this.props;\n      const payload = {\n        datasourceKey: `${datasource.id}__${datasource.type}`,\n        sql: datasource.sql };\n\n      postForm('/superset/sqllab/', payload);\n    }\n  }\n\n  render() {var _extra;\n    const { showChangeDatasourceModal, showEditDatasourceModal } = this.state;\n    const { datasource, onChange } = this.props;\n    const isMissingDatasource = datasource.id == null;\n\n    const isSqlSupported = datasource.type === 'table';\n\n    const datasourceMenu =\n    ___EmotionJSX(Menu, { onClick: this.handleMenuItemClick },\n    this.props.isEditable &&\n    ___EmotionJSX(Menu.Item, { key: EDIT_DATASET },\n    t('Edit dataset')),\n\n\n    ___EmotionJSX(Menu.Item, { key: CHANGE_DATASET }, t('Change dataset')),\n    isSqlSupported &&\n    ___EmotionJSX(Menu.Item, { key: VIEW_IN_SQL_LAB }, t('View in SQL Lab')));\n\n\n\n\n    const { health_check_message: healthCheckMessage } = datasource;\n\n    let extra = {};\n    if (datasource != null && datasource.extra) {\n      try {\n        extra = JSON.parse(datasource == null ? void 0 : datasource.extra);\n      } catch {} // eslint-disable-line no-empty\n    }\n\n    return (\n      ___EmotionJSX(Styles, { className: \"DatasourceControl\" },\n      ___EmotionJSX(\"div\", { className: \"data-container\" },\n      ___EmotionJSX(Icons.DatasetPhysical, { className: \"dataset-svg\" }),\n\n      !isMissingDatasource && datasource.name.length > 25 ?\n      ___EmotionJSX(Tooltip, { title: datasource.name },\n      ___EmotionJSX(\"span\", { className: \"title-select\" }, datasource.name)) :\n\n\n      ___EmotionJSX(\"span\", { title: datasource.name, className: \"title-select\" },\n      datasource.name),\n\n\n      healthCheckMessage &&\n      ___EmotionJSX(Tooltip, { title: healthCheckMessage },\n      ___EmotionJSX(Icons.AlertSolid, { iconColor: supersetTheme.colors.warning.base })),\n\n\n      ((_extra = extra) == null ? void 0 : _extra.warning_markdown) &&\n      ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown }),\n\n      ___EmotionJSX(Dropdown, {\n        overlay: datasourceMenu,\n        trigger: ['click'] },\n\n\n      ___EmotionJSX(Tooltip, { title: t('More dataset related options') },\n      ___EmotionJSX(Icons.MoreVert, {\n        className: \"datasource-modal-trigger\" })))),\n\n\n\n\n\n\n      isMissingDatasource &&\n      ___EmotionJSX(\"div\", { className: \"error-alert\" },\n      ___EmotionJSX(ErrorAlert, {\n        level: \"warning\",\n        title: t('Missing dataset'),\n        source: \"explore\",\n        subtitle:\n        ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(\"p\", null,\n        t(\n        'The dataset linked to this chart may have been deleted.')),\n\n\n        ___EmotionJSX(\"p\", null,\n        ___EmotionJSX(Button, {\n          buttonStyle: \"primary\",\n          onClick: () =>\n          this.handleMenuItemClick({ key: CHANGE_DATASET }) },\n\n\n        t('Change dataset')))) })),\n\n\n\n\n\n\n\n      showEditDatasourceModal &&\n      ___EmotionJSX(DatasourceModal, {\n        datasource: datasource,\n        show: showEditDatasourceModal,\n        onDatasourceSave: this.onDatasourceSave,\n        onHide: this.toggleEditDatasourceModal }),\n\n\n      showChangeDatasourceModal &&\n      ___EmotionJSX(ChangeDatasourceModal, {\n        onDatasourceSave: this.onDatasourceSave,\n        onHide: this.toggleChangeDatasourceModal,\n        show: showChangeDatasourceModal,\n        onChange: onChange })));\n\n\n\n\n  }}\n\n\nDatasourceControl.propTypes = propTypes;\nDatasourceControl.defaultProps = defaultProps;\n\nexport default DatasourceControl;","map":null,"metadata":{},"sourceType":"module"}