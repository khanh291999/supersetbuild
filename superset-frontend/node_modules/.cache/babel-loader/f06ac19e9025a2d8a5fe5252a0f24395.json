{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// https://en.wikipedia.org/wiki/Linear_congruential_generator\nfunction stringAsciiPRNG(value, m) {\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n  const charCodes = [...value].map((letter) => letter.charCodeAt(0));\n  const len = charCodes.length;\n  const a = len % (m - 1) + 1;\n  const c = charCodes.reduce((current, next) => current + next) % m;\n  let random = charCodes[0] % m;\n  [...new Array(len)].forEach(() => {\n    random = (a * random + c) % m;\n  });\n  return random;\n}\nexport function getRandomColor(sampleValue, colorList) {\n  // if no value is passed, always return transparent color for consistency\n  if (!sampleValue)\n  return 'transparent';\n  // value based random color index,\n  // ensuring the same sampleValue always resolves to the same color\n  return colorList[stringAsciiPRNG(sampleValue, colorList.length)];\n}","map":null,"metadata":{},"sourceType":"module"}