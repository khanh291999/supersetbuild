{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport moment from 'moment';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Alert from 'src/components/Alert';\nimport { t } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport shortid from 'shortid';\nimport Button from 'src/components/Button';\nimport * as actions from 'src/SqlLab/actions/sqlLab';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  query: PropTypes.object,\n  errorMessage: PropTypes.string,\n  timeout: PropTypes.number,\n  database: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired };\n\nconst defaultProps = {\n  query: {} };\n\n\nclass ExploreResultsButton extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.getInvalidColumns = this.getInvalidColumns.bind(this);\n    this.renderInvalidColumnMessage = this.renderInvalidColumnMessage.bind(\n    this);\n\n  }\n\n  getColumns() {\n    const { props } = this;\n    if (\n    props.query &&\n    props.query.results &&\n    props.query.results.selected_columns)\n    {\n      return props.query.results.selected_columns;\n    }\n    return [];\n  }\n\n  getQueryDuration() {\n    return moment.\n    duration(this.props.query.endDttm - this.props.query.startDttm).\n    asSeconds();\n  }\n\n  getInvalidColumns() {\n    const re1 = /__\\d+$/; // duplicate column name pattern\n    const re2 = /^__timestamp/i; // reserved temporal column alias\n\n    return this.props.query.results.selected_columns.\n    map((col) => col.name).\n    filter((col) => re1.test(col) || re2.test(col));\n  }\n\n  datasourceName() {\n    const { query } = this.props;\n    const uniqueId = shortid.generate();\n    let datasourceName = uniqueId;\n    if (query) {\n      datasourceName = query.user ? `${query.user}-` : '';\n      datasourceName += `${query.tab}-${uniqueId}`;\n    }\n    return datasourceName;\n  }\n\n  buildVizOptions() {\n    const { schema, sql, dbId, templateParams } = this.props.query;\n    return {\n      dbId,\n      schema,\n      sql,\n      templateParams,\n      datasourceName: this.datasourceName(),\n      columns: this.getColumns() };\n\n  }\n\n  renderTimeoutWarning() {\n    return (\n      ___EmotionJSX(Alert, {\n        type: \"warning\",\n        message:\n        ___EmotionJSX(React.Fragment, null,\n        t(\n        'This query took %s seconds to run, ',\n        Math.round(this.getQueryDuration())) +\n\n        t(\n        'and the explore view times out at %s seconds ',\n        this.props.timeout) +\n\n        t(\n        'following this flow will most likely lead to your query timing out. ') +\n\n        t(\n        'We recommend your summarize your data further before following that flow. ') +\n\n        t('If activated you can use the '),\n        ___EmotionJSX(\"strong\", null, \"CREATE TABLE AS \"),\n        t(\n        'feature to store a summarized data set that you can then explore.')) }));\n\n\n\n\n\n  }\n\n  renderInvalidColumnMessage() {\n    const invalidColumns = this.getInvalidColumns();\n    if (invalidColumns.length === 0) {\n      return null;\n    }\n    return (\n      ___EmotionJSX(\"div\", null,\n      t('Column name(s) '),\n      ___EmotionJSX(\"code\", null,\n      ___EmotionJSX(\"strong\", null, invalidColumns.join(', '), \" \")),\n\n      t(`cannot be used as a column name. The column name/alias \"__timestamp\"\n          is reserved for the main temporal expression, and column aliases ending with\n          double underscores followed by a numeric value (e.g. \"my_col__1\") are reserved\n          for deduplicating duplicate column names. Please use aliases to rename the\n          invalid column names.`)));\n\n\n  }\n\n  render() {\n    const allowsSubquery =\n    this.props.database && this.props.database.allows_subquery;\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: this.props.onClick,\n        disabled: !allowsSubquery,\n        tooltip: t('Explore the result set in the data exploration view') },\n\n      ___EmotionJSX(InfoTooltipWithTrigger, {\n        icon: \"line-chart\",\n        placement: \"top\",\n        label: \"explore\" }),\n      ' ',\n      t('Explore'))));\n\n\n\n  }}\n\nExploreResultsButton.propTypes = propTypes;\nExploreResultsButton.defaultProps = defaultProps;\n\nfunction mapStateToProps({ sqlLab, common }) {\n  return {\n    errorMessage: sqlLab.errorMessage,\n    timeout: common.conf ? common.conf.SUPERSET_WEBSERVER_TIMEOUT : null };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch) };\n\n}\n\nexport default connect(\nmapStateToProps,\nmapDispatchToProps)(\nExploreResultsButton);","map":null,"metadata":{},"sourceType":"module"}