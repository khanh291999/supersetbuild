{"ast":null,"code":"function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n/* eslint-disable no-dupe-class-members */\nimport { scaleOrdinal } from 'd3-scale';\nimport ExtensibleFunction from '../models/ExtensibleFunction';\nimport stringifyAndTrim from '../utils/stringifyAndTrim'; // Use type augmentation to correct the fact that\n// an instance of CategoricalScale is also a function\n\nclass ScaleCategoricalColor extends ExtensibleFunction {\n  /**\n   * Constructor\n   * @param {*} colors an array of colors\n   * @param {*} parentmanualColors optional parameter that comes from parent\n   * (usually CategoricalColorNamespace) and supersede this.manualColors\n   */\n  constructor(stateOrColors, parentmanualColors) {\n    super((value) => this.getColor(value));\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"parentManualColors\", void 0);\n\n    if (Array.isArray(stateOrColors)) {\n      this.state = {\n        manualColors: {},\n        scale: scaleOrdinal(stateOrColors) };\n\n    } else {\n      this.state = stateOrColors;\n    }\n\n    this.parentManualColors = parentmanualColors;\n  }\n\n  get colors() {\n    return this.state.scale.range();\n  }\n\n  getColor(value) {\n    const cleanedValue = stringifyAndTrim(value);\n    const parentColor = this.parentManualColors && this.parentManualColors[cleanedValue];\n\n    if (parentColor) {\n      return parentColor;\n    }\n\n    const manualColor = this.state.manualColors[cleanedValue];\n\n    if (manualColor) {\n      return manualColor;\n    }\n\n    return this.state.scale(cleanedValue);\n  }\n  /**\n   * Enforce specific color for given value\n   * @param {*} value value\n   * @param {*} manualColor manualColor\n   */\n\n\n  setColor(value, manualColor) {\n    this.state.manualColors[stringifyAndTrim(value)] = manualColor;\n    return this;\n  }\n  /**\n   * Get a mapping of data values to colors\n   * @returns an object where the key is the data value and the value is the hex color code\n   */\n\n\n  getColorMap() {\n    const colorMap = {};\n    this.state.scale.domain().forEach((value) => {\n      colorMap[String(value)] = this.state.scale(value);\n    });\n    return { ...colorMap,\n      ...this.state.manualColors,\n      ...this.parentManualColors };\n\n  }\n  /**\n   * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n   */\n\n\n  copy() {\n    const copy = new ScaleCategoricalColor({\n      manualColors: { ...this.state.manualColors },\n\n      scale: this.state.scale.copy() },\n    this.parentManualColors);\n    return copy;\n  }\n  /**\n   * Returns the scale's current domain.\n   */\n\n\n  domain(newDomain) {\n    if (typeof newDomain === 'undefined') {\n      return this.state.scale.domain();\n    }\n\n    this.state.scale.domain(newDomain);\n    return this;\n  }\n  /**\n   * Returns the scale's current range.\n   */\n\n\n  range(newRange) {\n    if (typeof newRange === 'undefined') {\n      return this.state.scale.range();\n    }\n\n    this.state.scale.range(newRange);\n    return this;\n  }\n  /**\n   * Returns the current unknown value, which defaults to \"implicit\".\n   */\n\n\n  unknown(value) {\n    if (typeof value === 'undefined') {\n      return this.state.scale.unknown();\n    }\n\n    this.state.scale.unknown(value);\n    return this;\n  }}\n\n\n\nexport default ScaleCategoricalColor;","map":null,"metadata":{},"sourceType":"module"}