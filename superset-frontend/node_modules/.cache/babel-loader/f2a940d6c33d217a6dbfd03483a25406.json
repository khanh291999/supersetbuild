{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { t, styled } from '@superset-ui/core';\n\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { noOp } from 'src/utils/common';\n\nimport { AGGREGATES_OPTIONS } from 'src/explore/constants';\nimport columnType from 'src/explore/components/controls/MetricControl/columnType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric, {\nEXPRESSION_TYPES } from\n'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\nStyledMetricOption,\nStyledColumnOption } from\n'src/explore/components/optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  getCurrentTab: PropTypes.func,\n  getCurrentLabel: PropTypes.func,\n  adhocMetric: PropTypes.instanceOf(AdhocMetric).isRequired,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  savedMetric: savedMetricType,\n  datasourceType: PropTypes.string };\n\n\nconst defaultProps = {\n  columns: [],\n  getCurrentTab: noOp };\n\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\nexport const SAVED_TAB_KEY = 'SAVED';\n\nconst startingWidth = 320;\nconst startingHeight = 240;\n\nexport default class AdhocMetricEditPopover extends React.PureComponent {\n  // \"Saved\" is a default tab unless there are no saved metrics for dataset\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props);this.defaultActiveTabKey = (this.props.savedMetric.metric_name || this.props.adhocMetric.isNew) && Array.isArray(this.props.savedMetricsOptions) && this.props.savedMetricsOptions.length > 0 ? SAVED_TAB_KEY : this.props.adhocMetric.expressionType;\n    this.onSave = this.onSave.bind(this);\n    this.onResetStateAndClose = this.onResetStateAndClose.bind(this);\n    this.onColumnChange = this.onColumnChange.bind(this);\n    this.onAggregateChange = this.onAggregateChange.bind(this);\n    this.onSavedMetricChange = this.onSavedMetricChange.bind(this);\n    this.onSqlExpressionChange = this.onSqlExpressionChange.bind(this);\n    this.onDragDown = this.onDragDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.handleAceEditorRef = this.handleAceEditorRef.bind(this);\n    this.refreshAceEditor = this.refreshAceEditor.bind(this);\n\n    this.state = {\n      adhocMetric: this.props.adhocMetric,\n      savedMetric: this.props.savedMetric,\n      width: startingWidth,\n      height: startingHeight };\n\n\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  componentDidMount() {\n    this.props.getCurrentTab(this.defaultActiveTabKey);\n  }\n\n  componentDidUpdate(prevProps, prevState) {var _prevState$adhocMetri, _this$state$adhocMetr, _prevState$adhocMetri2, _this$state$adhocMetr2, _prevState$adhocMetri3, _prevState$adhocMetri4, _this$state$adhocMetr3, _this$state$adhocMetr4, _prevState$savedMetri, _this$state$savedMetr;\n    if (\n    ((_prevState$adhocMetri = prevState.adhocMetric) == null ? void 0 : _prevState$adhocMetri.sqlExpression) !== ((_this$state$adhocMetr =\n    this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr.sqlExpression) ||\n    ((_prevState$adhocMetri2 = prevState.adhocMetric) == null ? void 0 : _prevState$adhocMetri2.aggregate) !== ((_this$state$adhocMetr2 = this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr2.aggregate) ||\n    ((_prevState$adhocMetri3 = prevState.adhocMetric) == null ? void 0 : (_prevState$adhocMetri4 = _prevState$adhocMetri3.column) == null ? void 0 : _prevState$adhocMetri4.column_name) !== ((_this$state$adhocMetr3 =\n    this.state.adhocMetric) == null ? void 0 : (_this$state$adhocMetr4 = _this$state$adhocMetr3.column) == null ? void 0 : _this$state$adhocMetr4.column_name) ||\n    ((_prevState$savedMetri = prevState.savedMetric) == null ? void 0 : _prevState$savedMetri.metric_name) !== ((_this$state$savedMetr = this.state.savedMetric) == null ? void 0 : _this$state$savedMetr.metric_name))\n    {var _this$state$savedMetr2, _this$state$savedMetr3, _this$state$adhocMetr5;\n      this.props.getCurrentLabel({\n        savedMetricLabel:\n        ((_this$state$savedMetr2 = this.state.savedMetric) == null ? void 0 : _this$state$savedMetr2.verbose_name) || ((_this$state$savedMetr3 =\n        this.state.savedMetric) == null ? void 0 : _this$state$savedMetr3.metric_name),\n        adhocMetricLabel: (_this$state$adhocMetr5 = this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr5.getDefaultLabel() });\n\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.onMouseUp);\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onSave() {var _this$props$savedMetr;\n    const { adhocMetric, savedMetric } = this.state;\n\n    const metric = savedMetric != null && savedMetric.metric_name ? savedMetric : adhocMetric;\n    const oldMetric = (_this$props$savedMetr = this.props.savedMetric) != null && _this$props$savedMetr.metric_name ?\n    this.props.savedMetric :\n    this.props.adhocMetric;\n    this.props.onChange(\n    {\n      ...metric },\n\n    oldMetric);\n\n    this.props.onClose();\n  }\n\n  onResetStateAndClose() {\n    this.setState(\n    {\n      adhocMetric: this.props.adhocMetric,\n      savedMetric: this.props.savedMetric },\n\n    this.props.onClose);\n\n  }\n\n  onColumnChange(columnName) {\n    const column = this.props.columns.find(\n    (column) => column.column_name === columnName);\n\n    this.setState((prevState) => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column,\n        expressionType: EXPRESSION_TYPES.SIMPLE }),\n\n      savedMetric: undefined }));\n\n  }\n\n  onAggregateChange(aggregate) {\n    // we construct this object explicitly to overwrite the value in the case aggregate is null\n    this.setState((prevState) => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        aggregate,\n        expressionType: EXPRESSION_TYPES.SIMPLE }),\n\n      savedMetric: undefined }));\n\n  }\n\n  onSavedMetricChange(savedMetricName) {\n    const savedMetric = this.props.savedMetricsOptions.find(\n    (metric) => metric.metric_name === savedMetricName);\n\n    this.setState((prevState) => ({\n      savedMetric,\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column: undefined,\n        aggregate: undefined,\n        sqlExpression: undefined,\n        expressionType: EXPRESSION_TYPES.SIMPLE }) }));\n\n\n  }\n\n  onSqlExpressionChange(sqlExpression) {\n    this.setState((prevState) => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        sqlExpression,\n        expressionType: EXPRESSION_TYPES.SQL }),\n\n      savedMetric: undefined }));\n\n  }\n\n  onDragDown(e) {\n    this.dragStartX = e.clientX;\n    this.dragStartY = e.clientY;\n    this.dragStartWidth = this.state.width;\n    this.dragStartHeight = this.state.height;\n    document.addEventListener('mousemove', this.onMouseMove);\n  }\n\n  onMouseMove(e) {\n    this.props.onResize();\n    this.setState({\n      width: Math.max(\n      this.dragStartWidth + (e.clientX - this.dragStartX),\n      startingWidth),\n\n      height: Math.max(\n      this.dragStartHeight + (e.clientY - this.dragStartY) * 2,\n      startingHeight) });\n\n\n  }\n\n  onMouseUp() {\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onTabChange(tab) {\n    this.refreshAceEditor();\n    this.props.getCurrentTab(tab);\n  }\n\n  handleAceEditorRef(ref) {\n    if (ref) {\n      this.aceEditorRef = ref;\n    }\n  }\n\n  refreshAceEditor() {\n    setTimeout(() => {\n      if (this.aceEditorRef) {\n        this.aceEditorRef.editor.resize();\n      }\n    }, 0);\n  }\n\n  renderColumnOption(option) {\n    const column = { ...option };\n    if (column.metric_name && !column.verbose_name) {\n      column.verbose_name = column.metric_name;\n    }\n    return ___EmotionJSX(StyledColumnOption, { column: column, showType: true });\n  }\n\n  renderMetricOption(savedMetric) {\n    return ___EmotionJSX(StyledMetricOption, { metric: savedMetric, showType: true });\n  }\n\n  render() {var _savedMetricsOptions$;\n    const {\n      adhocMetric: propsAdhocMetric,\n      savedMetric: propsSavedMetric,\n      columns,\n      savedMetricsOptions,\n      onChange,\n      onClose,\n      onResize,\n      datasourceType,\n      ...popoverProps } =\n    this.props;\n    const { adhocMetric, savedMetric } = this.state;\n    const keywords = sqlKeywords.concat(\n    columns.map((column) => ({\n      name: column.column_name,\n      value: column.column_name,\n      score: 50,\n      meta: 'column' })));\n\n\n\n    const columnValue =\n    adhocMetric.column && adhocMetric.column.column_name ||\n    adhocMetric.inferSqlExpressionColumn();\n\n    // autofocus on column if there's no value in column; otherwise autofocus on aggregate\n    const columnSelectProps = {\n      ariaLabel: t('Select column'),\n      placeholder: t('%s column(s)', columns.length),\n      value: columnValue,\n      onChange: this.onColumnChange,\n      allowClear: true,\n      autoFocus: !columnValue };\n\n\n    const aggregateSelectProps = {\n      ariaLabel: t('Select aggregate options'),\n      placeholder: t('%s aggregates(s)', AGGREGATES_OPTIONS.length),\n      value: adhocMetric.aggregate || adhocMetric.inferSqlExpressionAggregate(),\n      onChange: this.onAggregateChange,\n      allowClear: true,\n      autoFocus: !!columnValue };\n\n\n    const savedSelectProps = {\n      ariaLabel: t('Select saved metrics'),\n      placeholder: t('%s saved metric(s)', (_savedMetricsOptions$ = savedMetricsOptions == null ? void 0 : savedMetricsOptions.length) != null ? _savedMetricsOptions$ : 0),\n      value: savedMetric == null ? void 0 : savedMetric.metric_name,\n      onChange: this.onSavedMetricChange,\n      allowClear: true,\n      autoFocus: true };\n\n\n    if (this.props.datasourceType === 'druid' && aggregateSelectProps.options) {\n      aggregateSelectProps.options = aggregateSelectProps.options.filter(\n      (aggregate) => aggregate !== 'AVG');\n\n    }\n\n    const stateIsValid = adhocMetric.isValid() || (savedMetric == null ? void 0 : savedMetric.metric_name);\n    const hasUnsavedChanges =\n    !adhocMetric.equals(propsAdhocMetric) ||\n    !(\n    typeof (savedMetric == null ? void 0 : savedMetric.metric_name) === 'undefined' &&\n    typeof (propsSavedMetric == null ? void 0 : propsSavedMetric.metric_name) === 'undefined') &&\n\n    (savedMetric == null ? void 0 : savedMetric.metric_name) !== (propsSavedMetric == null ? void 0 : propsSavedMetric.metric_name);\n\n    return (\n      ___EmotionJSX(Form, _extends({\n        layout: \"vertical\",\n        id: \"metrics-edit-popover\" },\n\n      popoverProps),\n\n      ___EmotionJSX(Tabs, {\n        id: \"adhoc-metric-edit-tabs\",\n\n        defaultActiveKey: this.defaultActiveTabKey,\n        className: \"adhoc-metric-edit-tabs\",\n        style: { height: this.state.height, width: this.state.width },\n        onChange: this.onTabChange,\n        allowOverflow: true },\n\n      ___EmotionJSX(Tabs.TabPane, { key: SAVED_TAB_KEY, tab: t('Saved') },\n      ___EmotionJSX(FormItem, { label: t('Saved metric') },\n      ___EmotionJSX(StyledSelect, _extends({\n        options:\n        Array.isArray(savedMetricsOptions) ?\n        savedMetricsOptions.map((savedMetric) => ({\n          value: savedMetric.metric_name,\n          label: savedMetric.metric_name,\n          customLabel: this.renderMetricOption(savedMetric),\n          key: savedMetric.id })) :\n\n        [] },\n\n      savedSelectProps)))),\n\n\n\n      ___EmotionJSX(Tabs.TabPane, { key: EXPRESSION_TYPES.SIMPLE, tab: t('Simple') },\n      ___EmotionJSX(FormItem, { label: t('column') },\n      ___EmotionJSX(Select, _extends({\n        options: columns.map((column) => ({\n          value: column.column_name,\n          label: column.verbose_name || column.column_name,\n          key: column.id,\n          customLabel: this.renderColumnOption(column) })) },\n\n      columnSelectProps))),\n\n\n      ___EmotionJSX(FormItem, { label: t('aggregate') },\n      ___EmotionJSX(Select, _extends({\n        options: AGGREGATES_OPTIONS.map((option) => ({\n          value: option,\n          label: option,\n          key: option })) },\n\n      aggregateSelectProps)))),\n\n\n\n      ___EmotionJSX(Tabs.TabPane, {\n        key: EXPRESSION_TYPES.SQL,\n        tab: t('Custom SQL') },\n\n\n      this.props.datasourceType !== 'druid' ?\n      ___EmotionJSX(SQLEditor, {\n\n        showLoadingForImport: true,\n        ref: this.handleAceEditorRef,\n        keywords: keywords,\n        height: `${this.state.height - 80}px`,\n        onChange: this.onSqlExpressionChange,\n        width: \"100%\",\n        showGutter: false,\n        value:\n        adhocMetric.sqlExpression || adhocMetric.translateToSql(),\n\n        editorProps: { $blockScrolling: true },\n        enableLiveAutocompletion: true,\n        className: \"filter-sql-editor\",\n        wrapEnabled: true }) :\n\n\n      ___EmotionJSX(\"div\", { className: \"custom-sql-disabled-message\" }, \"Custom SQL Metrics are not available on druid datasources\"))),\n\n\n\n\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: this.onResetStateAndClose,\n\n        cta: true },\n\n      t('Close')),\n\n      ___EmotionJSX(Button, {\n        disabled: !stateIsValid,\n        buttonStyle:\n        hasUnsavedChanges && stateIsValid ? 'primary' : 'default',\n\n        buttonSize: \"small\",\n\n        onClick: this.onSave,\n        cta: true },\n\n      t('Save')),\n\n      ___EmotionJSX(\"i\", {\n        role: \"button\",\n        \"aria-label\": \"Resize\",\n        tabIndex: 0,\n        onMouseDown: this.onDragDown,\n        className: \"fa fa-expand edit-popover-resize text-muted\" }))));\n\n\n\n\n  }}\n\nAdhocMetricEditPopover.propTypes = propTypes;\nAdhocMetricEditPopover.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}