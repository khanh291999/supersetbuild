{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { Radio } from 'src/components/Radio';\nimport { Form, Typography } from 'src/common/components';\nimport { useComponentDidUpdate } from 'src/common/hooks/useComponentDidUpdate/useComponentDidUpdate';\nimport { ScopingType } from './types';\nimport ScopingTree from './ScopingTree';\nimport { getDefaultScopeValue, isScopingAll } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  & > * {\n    margin-bottom: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst CleanFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\nconst FilterScope = ({ pathToFormValue = [], formScopingType, formFilterScope, forceUpdate, filterScope, updateFormValues, chartId, initiallyExcludedCharts }) => {\n  const [initialFilterScope] = useState(filterScope || getDefaultScopeValue(chartId, initiallyExcludedCharts));\n  const [initialScopingType] = useState(isScopingAll(initialFilterScope, chartId) ?\n  ScopingType.all :\n  ScopingType.specific);\n  const [hasScopeBeenModified, setHasScopeBeenModified] = useState(!!filterScope);\n  const onUpdateFormValues = useCallback((formValues) => {\n    updateFormValues(formValues);\n    setHasScopeBeenModified(true);\n  }, [updateFormValues]);\n  const updateScopes = useCallback(() => {\n    if (filterScope || hasScopeBeenModified) {\n      return;\n    }\n    const newScope = getDefaultScopeValue(chartId, initiallyExcludedCharts);\n    updateFormValues({\n      scope: newScope,\n      scoping: isScopingAll(newScope, chartId) ?\n      ScopingType.all :\n      ScopingType.specific });\n\n  }, [\n  chartId,\n  filterScope,\n  hasScopeBeenModified,\n  initiallyExcludedCharts,\n  updateFormValues]);\n\n  useComponentDidUpdate(updateScopes);\n  return ___EmotionJSX(Wrapper, null,\n  ___EmotionJSX(CleanFormItem, { name: [...pathToFormValue, 'scoping'], initialValue: initialScopingType },\n  ___EmotionJSX(Radio.Group, { onChange: ({ target: { value } }) => {\n      if (value === ScopingType.all) {\n        const scope = getDefaultScopeValue(chartId);\n        updateFormValues({\n          scope });\n\n      }\n      setHasScopeBeenModified(true);\n      forceUpdate();\n    } },\n  ___EmotionJSX(Radio, { value: ScopingType.all }, t('Apply to all panels')),\n  ___EmotionJSX(Radio, { value: ScopingType.specific },\n  t('Apply to specific panels')))),\n\n\n\n  ___EmotionJSX(Typography.Text, { type: \"secondary\" },\n  (formScopingType != null ? formScopingType : initialScopingType) === ScopingType.specific ?\n  t('Only selected panels will be affected by this filter') :\n  t('All panels with this column will be affected by this filter')),\n\n  (formScopingType != null ? formScopingType : initialScopingType) === ScopingType.specific && ___EmotionJSX(ScopingTree, { updateFormValues: onUpdateFormValues, initialScope: initialFilterScope, formScope: formFilterScope, forceUpdate: forceUpdate, chartId: chartId, initiallyExcludedCharts: initiallyExcludedCharts }),\n  ___EmotionJSX(CleanFormItem, { name: [...pathToFormValue, 'scope'], hidden: true, initialValue: initialFilterScope }));\n\n};\nexport default FilterScope;","map":null,"metadata":{},"sourceType":"module"}