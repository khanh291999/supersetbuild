{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport columnType from './columnType';\nimport AdhocMetricOption from './AdhocMetricOption';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  option: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  index: PropTypes.number.isRequired,\n  onMetricEdit: PropTypes.func,\n  onRemoveMetric: PropTypes.func,\n  onMoveLabel: PropTypes.func,\n  onDropLabel: PropTypes.func,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  multi: PropTypes.bool,\n  datasourceType: PropTypes.string };\n\n\nexport default function MetricDefinitionValue({\n  option,\n  onMetricEdit,\n  onRemoveMetric,\n  columns,\n  savedMetrics,\n  savedMetricsOptions,\n  datasourceType,\n  onMoveLabel,\n  onDropLabel,\n  index,\n  type,\n  multi })\n{\n  const getSavedMetricByName = (metricName) =>\n  savedMetrics.find((metric) => metric.metric_name === metricName);\n\n  let savedMetric;\n  if (typeof option === 'string') {\n    savedMetric = getSavedMetricByName(option);\n  } else if (option.metric_name) {\n    savedMetric = option;\n  }\n\n  if (option instanceof AdhocMetric || savedMetric) {var _savedMetric;\n    const adhocMetric =\n    option instanceof AdhocMetric ? option : new AdhocMetric({ isNew: true });\n\n    const metricOptionProps = {\n      onMetricEdit,\n      onRemoveMetric,\n      columns,\n      savedMetricsOptions,\n      datasourceType,\n      adhocMetric,\n      onMoveLabel,\n      onDropLabel,\n      index,\n      savedMetric: (_savedMetric = savedMetric) != null ? _savedMetric : {},\n      type,\n      multi };\n\n\n    return ___EmotionJSX(AdhocMetricOption, metricOptionProps);\n  }\n  return null;\n}\nMetricDefinitionValue.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}