{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SyntaxHighlighterCopy from 'src/views/CRUD/data/components/SyntaxHighlighterCopy';\nimport { useQueryPreviewState } from 'src/views/CRUD/data/hooks';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst QueryTitle = styled.div`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n  margin-bottom: 0;\n  text-transform: uppercase;\n`;\nconst QueryLabel = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n  font-size: ${({ theme }) => theme.typography.sizes.m - 1}px;\n  padding: 4px 0 24px 0;\n`;\nconst QueryViewToggle = styled.div`\n  margin: 0 0 ${({ theme }) => theme.gridUnit * 6}px 0;\n`;\nconst TabButton = styled.div`\n  display: inline;\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  padding: ${({ theme }) => theme.gridUnit * 2}px\n    ${({ theme }) => theme.gridUnit * 4}px;\n  margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n  color: ${({ theme }) => theme.colors.secondary.dark1};\n\n  &.active,\n  &:focus,\n  &:hover {\n    background: ${({ theme }) => theme.colors.secondary.light4};\n    border-bottom: none;\n    border-radius: ${({ theme }) => theme.borderRadius}px;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &:hover:not(.active) {\n    background: ${({ theme }) => theme.colors.secondary.light5};\n  }\n`;\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    padding: ${({ theme }) => theme.gridUnit * 6}px;\n  }\n\n  pre {\n    font-size: ${({ theme }) => theme.typography.sizes.xs}px;\n    font-weight: ${({ theme }) => theme.typography.weights.normal};\n    line-height: ${({ theme }) => theme.typography.sizes.l}px;\n    height: 375px;\n    border: none;\n  }\n`;\nfunction QueryPreviewModal({ onHide, openInSqlLab, queries, query, fetchData, show, addDangerToast, addSuccessToast }) {\n  const { handleKeyPress, handleDataChange, disablePrevious, disableNext } = useQueryPreviewState({\n    queries,\n    currentQueryId: query.id,\n    fetchData });\n\n  const [currentTab, setCurrentTab] = useState('user');\n  const { id, sql, executed_sql } = query;\n  return ___EmotionJSX(\"div\", { role: \"none\", onKeyUp: handleKeyPress },\n  ___EmotionJSX(StyledModal, { onHide: onHide, show: show, title: t('Query preview'), footer: [\n    ___EmotionJSX(Button, { key: \"previous-query\", disabled: disablePrevious, onClick: () => handleDataChange(true) },\n    t('Previous')),\n\n    ___EmotionJSX(Button, { key: \"next-query\", disabled: disableNext, onClick: () => handleDataChange(false) },\n    t('Next')),\n\n    ___EmotionJSX(Button, { key: \"open-in-sql-lab\", buttonStyle: \"primary\", onClick: () => openInSqlLab(id) },\n    t('Open in SQL Lab'))] },\n\n\n  ___EmotionJSX(QueryTitle, null, t('Tab name')),\n  ___EmotionJSX(QueryLabel, null, query.tab_name),\n  ___EmotionJSX(QueryViewToggle, null,\n  ___EmotionJSX(TabButton, { role: \"button\", className: cx({ active: currentTab === 'user' }), onClick: () => setCurrentTab('user') },\n  t('User query')),\n\n  ___EmotionJSX(TabButton, { role: \"button\", className: cx({ active: currentTab === 'executed' }), onClick: () => setCurrentTab('executed') },\n  t('Executed query'))),\n\n\n  ___EmotionJSX(SyntaxHighlighterCopy, { addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, language: \"sql\" },\n  (currentTab === 'user' ? sql : executed_sql) || '')));\n\n\n\n}\nexport default withToasts(QueryPreviewModal);","map":null,"metadata":{},"sourceType":"module"}