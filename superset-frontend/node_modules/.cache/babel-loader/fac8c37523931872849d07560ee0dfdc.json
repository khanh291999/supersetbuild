{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport Icons from 'src/components/Icons';\nimport { StyledIcon } from 'src/views/CRUD/utils';\nimport Modal from 'src/components/Modal';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { CssEditor } from 'src/components/AsyncAceEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledCssTemplateTitle = styled.div`\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n`;\nconst StyledCssEditor = styled(CssEditor)`\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ theme }) => theme.colors.secondary.light2};\n`;\nconst TemplateContainer = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 10}px;\n\n  .control-label {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  input[type='text'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n    width: 50%;\n  }\n`;\nconst CssTemplateModal = ({ addDangerToast, onCssTemplateAdd, onHide, show, cssTemplate = null }) => {\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentCssTemplate, setCurrentCssTemplate] = useState(null);\n  const [isHidden, setIsHidden] = useState(true);\n  const isEditMode = cssTemplate !== null;\n  // cssTemplate fetch logic\n  const { state: { loading, resource }, fetchResource, createResource, updateResource } = useSingleViewResource('css_template', t('css_template'), addDangerToast);\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n  };\n  const onSave = () => {\n    if (isEditMode) {\n      // Edit\n      if (currentCssTemplate && currentCssTemplate.id) {\n        const update_id = currentCssTemplate.id;\n        delete currentCssTemplate.id;\n        delete currentCssTemplate.created_by;\n        updateResource(update_id, currentCssTemplate).then((response) => {\n          if (!response) {\n            return;\n          }\n          if (onCssTemplateAdd) {\n            onCssTemplateAdd();\n          }\n          hide();\n        });\n      }\n    } else\n    if (currentCssTemplate) {\n      // Create\n      createResource(currentCssTemplate).then((response) => {\n        if (!response) {\n          return;\n        }\n        if (onCssTemplateAdd) {\n          onCssTemplateAdd();\n        }\n        hide();\n      });\n    }\n  };\n  const onTemplateNameChange = (event) => {\n    const { target } = event;\n    const data = {\n      ...currentCssTemplate,\n      template_name: currentCssTemplate ? currentCssTemplate.template_name : '',\n      css: currentCssTemplate ? currentCssTemplate.css : '' };\n\n    data[target.name] = target.value;\n    setCurrentCssTemplate(data);\n  };\n  const onCssChange = (css) => {\n    const data = {\n      ...currentCssTemplate,\n      template_name: currentCssTemplate ? currentCssTemplate.template_name : '',\n      css };\n\n    setCurrentCssTemplate(data);\n  };\n  const validate = () => {\n    if (currentCssTemplate &&\n    currentCssTemplate.template_name.length &&\n    currentCssTemplate.css &&\n    currentCssTemplate.css.length) {\n      setDisableSave(false);\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !currentCssTemplate ||\n    !currentCssTemplate.id ||\n    cssTemplate && cssTemplate.id !== currentCssTemplate.id ||\n    isHidden && show)) {\n      if (cssTemplate && cssTemplate.id !== null && !loading) {\n        const id = cssTemplate.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentCssTemplate || currentCssTemplate.id || isHidden && show)) {\n      setCurrentCssTemplate({\n        template_name: '',\n        css: '' });\n\n    }\n  }, [cssTemplate]);\n  useEffect(() => {\n    if (resource) {\n      setCurrentCssTemplate(resource);\n    }\n  }, [resource]);\n  // Validation\n  useEffect(() => {\n    validate();\n  }, [\n  currentCssTemplate ? currentCssTemplate.template_name : '',\n  currentCssTemplate ? currentCssTemplate.css : '']);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return ___EmotionJSX(Modal, { disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), show: show, width: \"55%\", title: ___EmotionJSX(\"h4\", null,\n    isEditMode ? ___EmotionJSX(Icons.EditAlt, { css: StyledIcon }) : ___EmotionJSX(Icons.PlusLarge, { css: StyledIcon }),\n    isEditMode ?\n    t('Edit CSS template properties') :\n    t('Add CSS template')) },\n\n  ___EmotionJSX(StyledCssTemplateTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Basic information'))),\n\n  ___EmotionJSX(TemplateContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('CSS template name'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"input\", { name: \"template_name\", onChange: onTemplateNameChange, type: \"text\", value: currentCssTemplate == null ? void 0 : currentCssTemplate.template_name })),\n\n  ___EmotionJSX(TemplateContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('css'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(StyledCssEditor, { onChange: onCssChange, value: currentCssTemplate == null ? void 0 : currentCssTemplate.css, width: \"100%\" })));\n\n\n};\nexport default withToasts(CssTemplateModal);","map":null,"metadata":{},"sourceType":"module"}