{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport {\ntoggleExpandSlice,\nsetFocusedFilterField,\nunsetFocusedFilterField } from\n'src/dashboard/actions/dashboardState';\nimport { updateComponents } from 'src/dashboard/actions/dashboardLayout';\nimport { changeFilter } from 'src/dashboard/actions/dashboardFilters';\nimport {\naddSuccessToast,\naddDangerToast } from\n'src/components/MessageToasts/actions';\nimport { refreshChart } from 'src/chart/chartAction';\nimport { logEvent } from 'src/logger/actions';\nimport {\ngetActiveFilters,\ngetAppliedFilterValues } from\n'src/dashboard/util/activeDashboardFilters';\nimport getFormDataWithExtraFilters from 'src/dashboard/util/charts/getFormDataWithExtraFilters';\nimport Chart from 'src/dashboard/components/gridComponents/Chart';\nimport { PLACEHOLDER_DATASOURCE } from 'src/dashboard/constants';\n\nconst EMPTY_OBJECT = {};\n\nfunction mapStateToProps(\n{\n  charts: chartQueries,\n  dashboardInfo,\n  dashboardState,\n  dashboardLayout,\n  dataMask,\n  datasources,\n  sliceEntities,\n  nativeFilters,\n  common },\n\nownProps)\n{var _dashboardInfo$metada, _dashboardInfo$metada2, _dataMask$id, _dataMask$id2;\n  const { id } = ownProps;\n  const chart = chartQueries[id] || EMPTY_OBJECT;\n  const datasource =\n  chart && chart.form_data && datasources[chart.form_data.datasource] ||\n  PLACEHOLDER_DATASOURCE;\n  const { colorScheme, colorNamespace } = dashboardState;\n  const labelColors = (dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.label_colors) || {};\n  // note: this method caches filters if possible to prevent render cascades\n  const formData = getFormDataWithExtraFilters({\n    layout: dashboardLayout.present,\n    chart,\n    // eslint-disable-next-line camelcase\n    chartConfiguration: (_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.chart_configuration,\n    charts: chartQueries,\n    filters: getAppliedFilterValues(id),\n    colorScheme,\n    colorNamespace,\n    sliceId: id,\n    nativeFilters,\n    dataMask,\n    labelColors });\n\n\n  formData.dashboardId = dashboardInfo.id;\n\n  return {\n    chart,\n    datasource,\n    labelColors,\n    slice: sliceEntities.slices[id],\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    filters: getActiveFilters() || EMPTY_OBJECT,\n    formData,\n    editMode: dashboardState.editMode,\n    isExpanded: !!dashboardState.expandedSlices[id],\n    supersetCanExplore: !!dashboardInfo.superset_can_explore,\n    supersetCanShare: !!dashboardInfo.superset_can_share,\n    supersetCanCSV: !!dashboardInfo.superset_can_csv,\n    sliceCanEdit: !!dashboardInfo.slice_can_edit,\n    ownState: (_dataMask$id = dataMask[id]) == null ? void 0 : _dataMask$id.ownState,\n    filterState: (_dataMask$id2 = dataMask[id]) == null ? void 0 : _dataMask$id2.filterState,\n    maxRows: common.conf.SQL_MAX_ROW };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n  {\n    updateComponents,\n    addSuccessToast,\n    addDangerToast,\n    toggleExpandSlice,\n    changeFilter,\n    setFocusedFilterField,\n    unsetFocusedFilterField,\n    refreshChart,\n    logEvent },\n\n  dispatch);\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);","map":null,"metadata":{},"sourceType":"module"}