{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\n\nimport ChartIcon from 'src/components/ChartIcon';\nimport { CHART_TYPE } from 'src/dashboard/util/componentTypes';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nfunction traverse({ currentNode = {}, selectedChartId }) {\n  if (!currentNode) {\n    return null;\n  }\n\n  const { label, value, type, children } = currentNode;\n  if (children && children.length) {\n    const updatedChildren = children.map((child) =>\n    traverse({ currentNode: child, selectedChartId }));\n\n    return {\n      ...currentNode,\n      label:\n      ___EmotionJSX(\"span\", {\n        className: cx(`filter-scope-type ${type.toLowerCase()}`, {\n          'selected-filter': selectedChartId === value }) },\n\n\n      type === CHART_TYPE &&\n      ___EmotionJSX(\"span\", { className: \"type-indicator\" },\n      ___EmotionJSX(ChartIcon, null)),\n\n\n      label),\n\n\n      children: updatedChildren };\n\n  }\n  return {\n    ...currentNode,\n    label:\n    ___EmotionJSX(\"span\", {\n      className: cx(`filter-scope-type ${type.toLowerCase()}`, {\n        'selected-filter': selectedChartId === value }) },\n\n\n    label) };\n\n\n\n}\n\nexport default function renderFilterScopeTreeNodes({ nodes, selectedChartId }) {\n  if (!nodes) {\n    return [];\n  }\n\n  return nodes.map((node) => traverse({ currentNode: node, selectedChartId }));\n}","map":null,"metadata":{},"sourceType":"module"}