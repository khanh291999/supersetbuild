{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SAVE_FILTER_SETS, SET_FILTER_CONFIG_COMPLETE, SET_IN_SCOPE_STATUS_OF_FILTERS, SET_FILTER_SETS_CONFIG_COMPLETE, SET_FOCUSED_NATIVE_FILTER, UNSET_FOCUSED_NATIVE_FILTER } from 'src/dashboard/actions/nativeFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nexport function getInitialState({ filterSetsConfig, filterConfig, state: prevState }) {\n  const state = {};\n  const filters = {};\n  if (filterConfig) {\n    filterConfig.forEach((filter) => {\n      const { id } = filter;\n      filters[id] = filter;\n    });\n    state.filters = filters;\n  } else\n  {var _prevState$filters;\n    state.filters = (_prevState$filters = prevState == null ? void 0 : prevState.filters) != null ? _prevState$filters : {};\n  }\n  if (filterSetsConfig) {\n    const filterSets = {};\n    filterSetsConfig.forEach((filtersSet) => {\n      const { id } = filtersSet;\n      filterSets[id] = filtersSet;\n    });\n    state.filterSets = filterSets;\n  } else\n  {var _prevState$filterSets;\n    state.filterSets = (_prevState$filterSets = prevState == null ? void 0 : prevState.filterSets) != null ? _prevState$filterSets : {};\n  }\n  state.focusedFilterId = undefined;\n  return state;\n}\nexport default function nativeFilterReducer(state = {\n  filters: {},\n  filterSets: {} },\naction) {\n  const { filterSets } = state;\n  switch (action.type) {\n    case HYDRATE_DASHBOARD:\n      return {\n        filters: action.data.nativeFilters.filters,\n        filterSets: action.data.nativeFilters.filterSets };\n\n    case SAVE_FILTER_SETS:\n      return {\n        ...state,\n        filterSets: {\n          ...filterSets,\n          [action.filtersSetId]: {\n            id: action.filtersSetId,\n            name: action.name,\n            dataMask: action.dataMask } } };\n\n\n\n    case SET_FILTER_CONFIG_COMPLETE:\n    case SET_IN_SCOPE_STATUS_OF_FILTERS:\n      return getInitialState({ filterConfig: action.filterConfig, state });\n    case SET_FILTER_SETS_CONFIG_COMPLETE:\n      return getInitialState({\n        filterSetsConfig: action.filterSetsConfig,\n        state });\n\n    case SET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: action.id };\n\n    case UNSET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: undefined };\n\n    // TODO handle SET_FILTER_CONFIG_FAIL action\n    default:\n      return state;}\n\n}","map":null,"metadata":{},"sourceType":"module"}