{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled, css } from '@superset-ui/core';\n\nimport { Global } from '@emotion/react';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MainNav as DropdownMenu } from 'src/common/components';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Grid } from 'antd';\nimport Icons from 'src/components/Icons';\nimport { URL_PARAMS } from 'src/constants';\nimport RightMenu from './MenuRight';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledHeader = styled.header`\n  background-color: white;\n  margin-bottom: 2px;\n  &:nth-last-of-type(2) nav {\n    margin-bottom: 2px;\n  }\n\n  .caret {\n    display: none;\n  }\n  .navbar-brand {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .navbar-brand-text {\n    border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    height: 100%;\n    color: ${({ theme }) => theme.colors.grayscale.dark1};\n    padding-left: ${({ theme }) => theme.gridUnit * 4}px;\n    padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-right: ${({ theme }) => theme.gridUnit * 6}px;\n    font-size: ${({ theme }) => theme.gridUnit * 4}px;\n    float: left;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    span {\n      max-width: ${({ theme }) => theme.gridUnit * 58}px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n    @media (max-width: 1127px) {\n      display: none;\n    }\n  }\n  .main-nav .ant-menu-submenu-title > svg {\n    top: ${({ theme }) => theme.gridUnit * 5.25}px;\n  }\n  @media (max-width: 767px) {\n    .navbar-brand {\n      float: none;\n    }\n  }\n  .ant-menu-horizontal .ant-menu-item {\n    height: 100%;\n    line-height: inherit;\n  }\n  .ant-menu > .ant-menu-item > a {\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n  @media (max-width: 767px) {\n    .ant-menu-item {\n      padding: 0 ${({ theme }) => theme.gridUnit * 6}px 0\n        ${({ theme }) => theme.gridUnit * 3}px !important;\n    }\n    .ant-menu > .ant-menu-item > a {\n      padding: 0px;\n    }\n    .main-nav .ant-menu-submenu-title > svg:nth-child(1) {\n      display: none;\n    }\n    .ant-menu-item-active > a {\n      &:hover {\n        color: ${({ theme }) => theme.colors.primary.base} !important;\n        background-color: transparent !important;\n      }\n    }\n  }\n\n  .ant-menu-item a {\n    &:hover {\n      color: ${({ theme }) => theme.colors.grayscale.dark1};\n      background-color: ${({ theme }) => theme.colors.primary.light5};\n      border-bottom: none;\n      margin: 0;\n      &:after {\n        opacity: 1;\n        width: 100%;\n      }\n    }\n  }\n`;\nconst { SubMenu } = DropdownMenu;\nconst { useBreakpoint } = Grid;\nexport function Menu({ data: { menu, brand, navbar_right: navbarRight, settings }, isFrontendRoute = () => false }) {\n  const [showMenu, setMenu] = useState('horizontal');\n  const screens = useBreakpoint();\n  useEffect(() => {\n    function handleResize() {\n      if (window.innerWidth <= 767) {\n        setMenu('inline');\n      } else\n\n      setMenu('horizontal');\n    }\n    handleResize();\n    const windowResize = _debounce(() => handleResize(), 10);\n    window.addEventListener('resize', windowResize);\n    return () => window.removeEventListener('resize', windowResize);\n  }, []);\n  const standalone = getUrlParam(URL_PARAMS.standalone);\n  if (standalone)\n  return ___EmotionJSX(React.Fragment, null);\n  const renderSubMenu = ({ label, childs, url, index, isFrontendRoute }) => {\n    if (url && isFrontendRoute) {\n      return ___EmotionJSX(DropdownMenu.Item, { key: label, role: \"presentation\" },\n      ___EmotionJSX(Link, { role: \"button\", to: url },\n      label));\n\n\n    }\n    if (url) {\n      return ___EmotionJSX(DropdownMenu.Item, { key: label },\n      ___EmotionJSX(\"a\", { href: url }, label));\n\n    }\n    return ___EmotionJSX(SubMenu, { key: index, title: label, icon: showMenu === 'inline' ? ___EmotionJSX(React.Fragment, null) : ___EmotionJSX(Icons.TriangleDown, null) },\n    childs == null ? void 0 : childs.map((child, index1) => {\n      if (typeof child === 'string' && child === '-') {\n        return ___EmotionJSX(DropdownMenu.Divider, { key: `$${index1}` });\n      }\n      if (typeof child !== 'string') {\n        return ___EmotionJSX(DropdownMenu.Item, { key: `${child.label}` },\n        child.isFrontendRoute ? ___EmotionJSX(Link, { to: child.url || '' }, child.label) : ___EmotionJSX(\"a\", { href: child.url }, child.label));\n\n      }\n      return null;\n    }));\n\n  };\n  return ___EmotionJSX(StyledHeader, { className: \"top\", id: \"main-menu\", role: \"navigation\" },\n  ___EmotionJSX(Global, { styles: css`\n          .ant-menu-submenu.ant-menu-submenu-popup.ant-menu.ant-menu-light.ant-menu-submenu-placement-bottomLeft {\n            border-radius: 0px;\n          }\n          .ant-menu-submenu.ant-menu-submenu-popup.ant-menu.ant-menu-light {\n            border-radius: 0px;\n          }\n        ` }),\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { md: 16, xs: 24 },\n  ___EmotionJSX(Tooltip, { id: \"brand-tooltip\", placement: \"bottomLeft\", title: brand.tooltip, arrowPointAtCenter: true },\n  ___EmotionJSX(\"a\", { className: \"navbar-brand\", href: brand.path },\n  ___EmotionJSX(\"img\", { width: brand.width, src: brand.icon, alt: brand.alt }))),\n\n\n  brand.text && ___EmotionJSX(\"div\", { className: \"navbar-brand-text\" },\n  ___EmotionJSX(\"span\", null, brand.text)),\n\n  ___EmotionJSX(DropdownMenu, { mode: showMenu, className: \"main-nav\" },\n  menu.map((item) => {var _item$childs;\n    const props = {\n      ...item,\n      isFrontendRoute: isFrontendRoute(item.url),\n      childs: (_item$childs = item.childs) == null ? void 0 : _item$childs.map((c) => {\n        if (typeof c === 'string') {\n          return c;\n        }\n        return {\n          ...c,\n          isFrontendRoute: isFrontendRoute(c.url) };\n\n      }) };\n\n    return renderSubMenu(props);\n  }))),\n\n\n  ___EmotionJSX(Col, { md: 8, xs: 24 },\n  ___EmotionJSX(RightMenu, { align: screens.md ? 'flex-end' : 'flex-start', settings: settings, navbarRight: navbarRight, isFrontendRoute: isFrontendRoute }))));\n\n\n\n}\n// transform the menu data to reorganize components\nexport default function MenuWrapper({ data, ...rest }) {\n  const newMenuData = {\n    ...data };\n\n  // Menu items that should go into settings dropdown\n  const settingsMenus = {\n    Security: true,\n    Manage: true };\n\n  // Cycle through menu.menu to build out cleanedMenu and settings\n  const cleanedMenu = [];\n  const settings = [];\n  newMenuData.menu.forEach((item) => {\n    if (!item) {\n      return;\n    }\n    const children = [];\n    const newItem = {\n      ...item };\n\n    // Filter childs\n    if (item.childs) {\n      item.childs.forEach((child) => {\n        if (typeof child === 'string') {\n          children.push(child);\n        } else\n        if (child.label) {\n          children.push(child);\n        }\n      });\n      newItem.childs = children;\n    }\n    if (!settingsMenus.hasOwnProperty(item.name)) {\n      cleanedMenu.push(newItem);\n    } else\n    {\n      settings.push(newItem);\n    }\n  });\n  newMenuData.menu = cleanedMenu;\n  newMenuData.settings = settings;\n  return ___EmotionJSX(Menu, _extends({ data: newMenuData }, rest));\n}","map":null,"metadata":{},"sourceType":"module"}