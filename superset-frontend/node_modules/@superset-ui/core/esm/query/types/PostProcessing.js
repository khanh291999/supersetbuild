/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
export let PandasAxis;

(function (PandasAxis) {
  PandasAxis[PandasAxis["Row"] = 0] = "Row";
  PandasAxis[PandasAxis["Column"] = 1] = "Column";
})(PandasAxis || (PandasAxis = {}));

export function isPostProcessingAggregation(rule) {
  return (rule == null ? void 0 : rule.operation) === 'aggregation';
}
export function isPostProcessingBoxplot(rule) {
  return (rule == null ? void 0 : rule.operation) === 'boxplot';
}
export function isPostProcessingContribution(rule) {
  return (rule == null ? void 0 : rule.operation) === 'contribution';
}
export function isPostProcessingPivot(rule) {
  return (rule == null ? void 0 : rule.operation) === 'pivot';
}
export function isPostProcessingProphet(rule) {
  return (rule == null ? void 0 : rule.operation) === 'prophet';
}
export function isPostProcessingDiff(rule) {
  return (rule == null ? void 0 : rule.operation) === 'diff';
}
export function isPostProcessingRolling(rule) {
  return (rule == null ? void 0 : rule.operation) === 'rolling';
}
export function isPostProcessingCum(rule) {
  return (rule == null ? void 0 : rule.operation) === 'cum';
}
export function isPostProcessingCompare(rule) {
  return (rule == null ? void 0 : rule.operation) === 'compare';
}
export function isPostProcessingSort(rule) {
  return (rule == null ? void 0 : rule.operation) === 'sort';
}
export function isPostProcessingResample(rule) {
  return (rule == null ? void 0 : rule.operation) === 'resample';
}