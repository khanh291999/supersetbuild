"use strict";

exports.__esModule = true;
exports.default = exports.DEFAULT_NAMESPACE = void 0;
exports.getColor = getColor;
exports.getNamespace = getNamespace;
exports.getScale = getScale;

var _CategoricalColorScale = _interopRequireDefault(require("./CategoricalColorScale"));

var _CategoricalSchemeRegistrySingleton = _interopRequireDefault(require("./CategoricalSchemeRegistrySingleton"));

var _stringifyAndTrim = _interopRequireDefault(require("./stringifyAndTrim"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
class CategoricalColorNamespace {
  constructor(name) {
    this.name = void 0;
    this.forcedItems = void 0;
    this.scales = void 0;
    this.name = name;
    this.scales = {};
    this.forcedItems = {};
  }

  getScale(schemeId) {
    const id = schemeId ?? (0, _CategoricalSchemeRegistrySingleton.default)().getDefaultKey() ?? '';
    const scheme = (0, _CategoricalSchemeRegistrySingleton.default)().get(id);
    const newScale = new _CategoricalColorScale.default((scheme == null ? void 0 : scheme.colors) ?? [], this.forcedItems);
    return newScale;
  }
  /**
   * Enforce specific color for given value
   * This will apply across all color scales
   * in this namespace.
   * @param {*} value value
   * @param {*} forcedColor color
   */


  setColor(value, forcedColor) {
    this.forcedItems[(0, _stringifyAndTrim.default)(value)] = forcedColor;
    return this;
  }

  resetColors() {
    this.forcedItems = {};
  }

}

exports.default = CategoricalColorNamespace;
const namespaces = {};
const DEFAULT_NAMESPACE = 'GLOBAL';
exports.DEFAULT_NAMESPACE = DEFAULT_NAMESPACE;

function getNamespace(name = DEFAULT_NAMESPACE) {
  const instance = namespaces[name];

  if (instance) {
    return instance;
  }

  const newInstance = new CategoricalColorNamespace(name);
  namespaces[name] = newInstance;
  return newInstance;
}

function getColor(value, schemeId, namespace) {
  return getNamespace(namespace).getScale(schemeId).getColor(value);
}
/*
  Returns a new scale instance within the same namespace.
  Especially useful when a chart is booting for the first time
*/


function getScale(scheme, namespace) {
  return getNamespace(namespace).getScale(scheme);
}