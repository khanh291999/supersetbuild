"use strict";

exports.__esModule = true;
exports.default = createSmartNumberFormatter;

var _d3Format = require("d3-format");

var _NumberFormatter = _interopRequireDefault(require("../NumberFormatter"));

var _NumberFormats = _interopRequireDefault(require("../NumberFormats"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const siFormatter = (0, _d3Format.format)(`.3~s`);
const float2PointFormatter = (0, _d3Format.format)(`.2~f`);
const float4PointFormatter = (0, _d3Format.format)(`.4~f`);

function formatValue(value) {
  if (value === 0) {
    return '0';
  }

  const absoluteValue = Math.abs(value);

  if (absoluteValue >= 1000) {
    // Normal human being are more familiar
    // with billion (B) that giga (G)
    return siFormatter(value).replace('G', 'B');
  }

  if (absoluteValue >= 1) {
    return float2PointFormatter(value);
  }

  if (absoluteValue >= 0.001) {
    return float4PointFormatter(value);
  }

  if (absoluteValue > 0.000001) {
    return `${siFormatter(value * 1000000)}Âµ`;
  }

  return siFormatter(value);
}

function createSmartNumberFormatter(config = {}) {
  const {
    description,
    signed = false,
    id,
    label
  } = config;
  const getSign = signed ? value => value > 0 ? '+' : '' : () => '';
  return new _NumberFormatter.default({
    description,
    formatFunc: value => `${getSign(value)}${formatValue(value)}`,
    id: id || signed ? _NumberFormats.default.SMART_NUMBER_SIGNED : _NumberFormats.default.SMART_NUMBER,
    label: label ?? 'Adaptive formatter'
  });
}