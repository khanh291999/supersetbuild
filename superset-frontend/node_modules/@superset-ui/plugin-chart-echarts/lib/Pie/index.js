"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@superset-ui/core");

var _buildQuery = _interopRequireDefault(require("./buildQuery"));

var _controlPanel = _interopRequireDefault(require("./controlPanel"));

var _transformProps = _interopRequireDefault(require("./transformProps"));

var _thumbnail = _interopRequireDefault(require("./images/thumbnail.png"));

var _Pie = _interopRequireDefault(require("./images/Pie1.jpg"));

var _Pie2 = _interopRequireDefault(require("./images/Pie2.jpg"));

var _Pie3 = _interopRequireDefault(require("./images/Pie3.jpg"));

var _Pie4 = _interopRequireDefault(require("./images/Pie4.jpg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class EchartsPieChartPlugin extends _core.ChartPlugin {
  /**
   * The constructor is used to pass relevant metadata and callbacks that get
   * registered in respective registries that are used throughout the library
   * and application. A more thorough description of each property is given in
   * the respective imported file.
   *
   * It is worth noting that `buildQuery` and is optional, and only needed for
   * advanced visualizations that require either post processing operations
   * (pivoting, rolling aggregations, sorting etc) or submitting multiple queries.
   */
  constructor() {
    super({
      buildQuery: _buildQuery.default,
      controlPanel: _controlPanel.default,
      loadChart: () => Promise.resolve().then(() => _interopRequireWildcard(require('./EchartsPie'))),
      metadata: new _core.ChartMetadata({
        behaviors: [_core.Behavior.INTERACTIVE_CHART],
        category: (0, _core.t)('Part of a Whole'),
        credits: ['https://echarts.apache.org'],
        description: (0, _core.t)(`The classic. Great for showing how much of a company each investor gets, what demographics follow your blog, or what portion of the budget goes to the military industrial complex.

        Pie charts can be difficult to interpret precisely. If clarity of relative proportion is important, consider using a bar or other chart type instead.`),
        exampleGallery: [{
          url: _Pie.default
        }, {
          url: _Pie2.default
        }, {
          url: _Pie3.default
        }, {
          url: _Pie4.default
        }],
        name: (0, _core.t)('Pie Chart'),
        tags: [(0, _core.t)('Aesthetic'), (0, _core.t)('Categorical'), (0, _core.t)('Circular'), (0, _core.t)('Comparison'), (0, _core.t)('Percentages'), (0, _core.t)('Popular'), (0, _core.t)('Proportional'), (0, _core.t)('ECharts')],
        thumbnail: _thumbnail.default
      }),
      transformProps: _transformProps.default
    });
  }

}

exports.default = EchartsPieChartPlugin;