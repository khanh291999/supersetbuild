"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

var _types = require("../types");

var _controls = require("../../controls");

var _react2 = require("@emotion/react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const {
  contributionMode,
  logAxis,
  markerEnabled,
  markerSize,
  minorSplitLine,
  opacity,
  rowLimit,
  seriesType,
  truncateYAxis,
  yAxisBounds,
  zoomable,
  xAxisLabelRotation
} = _types.DEFAULT_FORM_DATA;
const config = {
  controlPanelSections: [_chartControls.sections.legacyTimeseriesTime, {
    label: (0, _core.t)('Query'),
    expanded: true,
    controlSetRows: [['metrics'], ['groupby'], [{
      name: 'contributionMode',
      config: {
        type: 'SelectControl',
        label: (0, _core.t)('Contribution Mode'),
        default: contributionMode,
        choices: [[null, 'None'], [_types.EchartsTimeseriesContributionType.Row, 'Total'], [_types.EchartsTimeseriesContributionType.Column, 'Series']],
        description: (0, _core.t)('Calculate contribution per series or total')
      }
    }], ['adhoc_filters'], _chartControls.emitFilterControl, ['limit'], ['timeseries_limit_metric'], [{
      name: 'order_desc',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Sort Descending'),
        default: true,
        description: (0, _core.t)('Whether to sort descending or ascending')
      }
    }], ['row_limit']]
  }, _chartControls.sections.advancedAnalyticsControls, _chartControls.sections.annotationsAndLayersControls, _chartControls.sections.forecastIntervalControls, _chartControls.sections.titleControls, {
    label: (0, _core.t)('Chart Options'),
    expanded: true,
    controlSetRows: [['color_scheme'], [{
      name: 'seriesType',
      config: {
        type: 'SelectControl',
        label: (0, _core.t)('Series Style'),
        renderTrigger: true,
        default: seriesType,
        choices: [[_types.EchartsTimeseriesSeriesType.Line, 'Line'], [_types.EchartsTimeseriesSeriesType.Smooth, 'Smooth Line'], [_types.EchartsTimeseriesSeriesType.Start, 'Step - start'], [_types.EchartsTimeseriesSeriesType.Middle, 'Step - middle'], [_types.EchartsTimeseriesSeriesType.End, 'Step - end']],
        description: (0, _core.t)('Series chart type (line, bar etc)')
      }
    }], [{
      name: 'opacity',
      config: {
        type: 'SliderControl',
        label: (0, _core.t)('Area chart opacity'),
        renderTrigger: true,
        min: 0,
        max: 1,
        step: 0.1,
        default: opacity,
        description: (0, _core.t)('Opacity of Area Chart. Also applies to confidence band.')
      }
    }], ..._controls.showValueSection, [{
      name: 'markerEnabled',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Marker'),
        renderTrigger: true,
        default: markerEnabled,
        description: (0, _core.t)('Draw a marker on data points. Only applicable for line types.')
      }
    }], [{
      name: 'markerSize',
      config: {
        type: 'SliderControl',
        label: (0, _core.t)('Marker Size'),
        renderTrigger: true,
        min: 0,
        max: 20,
        default: markerSize,
        description: (0, _core.t)('Size of marker. Also applies to forecast observations.'),
        visibility: ({
          controls
        }) => {
          var _controls$markerEnabl;

          return Boolean(controls == null ? void 0 : (_controls$markerEnabl = controls.markerEnabled) == null ? void 0 : _controls$markerEnabl.value);
        }
      }
    }], [{
      name: 'zoomable',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Data Zoom'),
        default: zoomable,
        renderTrigger: true,
        description: (0, _core.t)('Enable data zooming controls')
      }
    }], ..._controls.legendSection, [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('X Axis'))], [{
      name: 'x_axis_time_format',
      config: { ..._chartControls.sharedControls.x_axis_time_format,
        default: 'smart_date',
        description: `${_chartControls.D3_TIME_FORMAT_DOCS}. ${(0, _core.t)('When using other than adaptive formatting, labels may overlap.')}`
      }
    }], [{
      name: 'xAxisLabelRotation',
      config: {
        type: 'SelectControl',
        freeForm: true,
        clearable: false,
        label: (0, _core.t)('Rotate x axis label'),
        choices: [[0, '0°'], [45, '45°']],
        default: xAxisLabelRotation,
        renderTrigger: true,
        description: (0, _core.t)('Input field supports custom rotation. e.g. 30 for 30°')
      }
    }], ..._controls.richTooltipSection, // eslint-disable-next-line react/jsx-key
    [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Y Axis'))], ['y_axis_format'], [{
      name: 'logAxis',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Logarithmic y-axis'),
        renderTrigger: true,
        default: logAxis,
        description: (0, _core.t)('Logarithmic y-axis')
      }
    }], [{
      name: 'minorSplitLine',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Minor Split Line'),
        renderTrigger: true,
        default: minorSplitLine,
        description: (0, _core.t)('Draw split lines for minor y-axis ticks')
      }
    }], [{
      name: 'truncateYAxis',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Truncate Y Axis'),
        default: truncateYAxis,
        renderTrigger: true,
        description: (0, _core.t)('Truncate Y Axis. Can be overridden by specifying a min or max bound.')
      }
    }], [{
      name: 'y_axis_bounds',
      config: {
        type: 'BoundsControl',
        label: (0, _core.t)('Y Axis Bounds'),
        renderTrigger: true,
        default: yAxisBounds,
        description: (0, _core.t)('Bounds for the Y-axis. When left empty, the bounds are ' + 'dynamically defined based on the min/max of the data. Note that ' + "this feature will only expand the axis range. It won't " + "narrow the data's extent."),
        visibility: ({
          controls
        }) => {
          var _controls$truncateYAx;

          return Boolean(controls == null ? void 0 : (_controls$truncateYAx = controls.truncateYAxis) == null ? void 0 : _controls$truncateYAx.value);
        }
      }
    }]]
  }],
  controlOverrides: {
    row_limit: {
      default: rowLimit
    }
  }
};
var _default = config;
exports.default = _default;