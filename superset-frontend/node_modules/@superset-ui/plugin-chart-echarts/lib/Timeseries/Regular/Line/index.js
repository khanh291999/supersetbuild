"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@superset-ui/core");

var _buildQuery = _interopRequireDefault(require("../../buildQuery"));

var _controlPanel = _interopRequireDefault(require("../controlPanel"));

var _transformProps = _interopRequireDefault(require("../../transformProps"));

var _thumbnail = _interopRequireDefault(require("./images/thumbnail.png"));

var _types = require("../../types");

var _Line = _interopRequireDefault(require("./images/Line1.png"));

var _Line2 = _interopRequireDefault(require("./images/Line2.png"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const lineTransformProps = chartProps => (0, _transformProps.default)({ ...chartProps,
  formData: { ...chartProps.formData,
    seriesType: _types.EchartsTimeseriesSeriesType.Line
  }
});

class EchartsTimeseriesLineChartPlugin extends _core.ChartPlugin {
  constructor() {
    super({
      buildQuery: _buildQuery.default,
      controlPanel: _controlPanel.default,
      loadChart: () => Promise.resolve().then(() => _interopRequireWildcard(require('../../EchartsTimeseries'))),
      metadata: new _core.ChartMetadata({
        behaviors: [_core.Behavior.INTERACTIVE_CHART],
        category: (0, _core.t)('Evolution'),
        credits: ['https://echarts.apache.org'],
        description: (0, _core.t)('Time-series line chart is used to visualize repeated measurements taken over regular time intervals. Line chart is a type of chart which displays information as a series of data points connected by straight line segments. It is a basic type of chart common in many fields.'),
        exampleGallery: [{
          url: _Line.default
        }, {
          url: _Line2.default
        }],
        supportedAnnotationTypes: [_core.AnnotationType.Event, _core.AnnotationType.Formula, _core.AnnotationType.Interval, _core.AnnotationType.Timeseries],
        name: (0, _core.t)('Time-series Line Chart'),
        tags: [(0, _core.t)('ECharts'), (0, _core.t)('Predictive'), (0, _core.t)('Advanced-Analytics'), (0, _core.t)('Aesthetic'), (0, _core.t)('Line'), (0, _core.t)('Popular')],
        thumbnail: _thumbnail.default
      }),
      transformProps: lineTransformProps
    });
  }

}

exports.default = EchartsTimeseriesLineChartPlugin;