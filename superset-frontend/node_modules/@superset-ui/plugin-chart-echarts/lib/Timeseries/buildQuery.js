"use strict";

exports.__esModule = true;
exports.default = buildQuery;

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function buildQuery(formData) {
  return (0, _core.buildQueryContext)(formData, baseQueryObject => {
    const pivotOperatorInRuntime = (0, _chartControls.pivotOperator)(formData, { ...baseQueryObject,
      is_timeseries: true
    });

    if (pivotOperatorInRuntime && Object.values(_core.RollingType).includes(formData.rolling_type)) {
      pivotOperatorInRuntime.options = { ...pivotOperatorInRuntime.options,
        ...{
          flatten_columns: false,
          reset_index: false
        }
      };
    }

    return [{ ...baseQueryObject,
      is_timeseries: true,
      // todo: move `normalizeOrderBy to extractQueryFields`
      orderby: (0, _core.normalizeOrderBy)(baseQueryObject).orderby,
      time_offsets: (0, _chartControls.isValidTimeCompare)(formData, baseQueryObject) ? formData.time_compare : [],
      post_processing: [(0, _chartControls.resampleOperator)(formData, baseQueryObject), (0, _chartControls.timeCompareOperator)(formData, baseQueryObject), (0, _chartControls.sortOperator)(formData, { ...baseQueryObject,
        is_timeseries: true
      }), // in order to be able to rolling in multiple series, must do pivot before rollingOperator
      pivotOperatorInRuntime, (0, _chartControls.rollingWindowOperator)(formData, baseQueryObject), (0, _chartControls.contributionOperator)(formData, baseQueryObject), (0, _chartControls.prophetOperator)(formData, baseQueryObject)]
    }];
  });
}