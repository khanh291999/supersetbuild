"use strict";

exports.__esModule = true;
exports.default = transformProps;

var _core = require("@superset-ui/core");

var _types = require("./types");

var _types2 = require("../types");

var _controls = require("../utils/controls");

var _series = require("../utils/series");

var _annotation = require("../utils/annotation");

var _prophet = require("../utils/prophet");

var _defaults = require("../defaults");

var _transformers = require("./transformers");

var _constants = require("../constants");

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* eslint-disable camelcase */
function transformProps(chartProps) {
  const {
    width,
    height,
    filterState,
    formData,
    hooks,
    queriesData,
    datasource
  } = chartProps;
  const {
    verboseMap = {}
  } = datasource;
  const {
    annotation_data: annotationData_,
    data = []
  } = queriesData[0];
  const annotationData = annotationData_ || {};
  const {
    area,
    annotationLayers,
    colorScheme,
    contributionMode,
    forecastEnabled,
    legendOrientation,
    legendType,
    logAxis,
    markerEnabled,
    markerSize,
    opacity,
    minorSplitLine,
    seriesType,
    showLegend,
    stack,
    truncateYAxis,
    yAxisFormat,
    xAxisTimeFormat,
    yAxisBounds,
    tooltipTimeFormat,
    tooltipSortByMetric,
    zoomable,
    richTooltip,
    xAxisLabelRotation,
    emitFilter,
    groupby,
    showValue,
    onlyTotal,
    xAxisTitle,
    yAxisTitle,
    xAxisTitleMargin,
    yAxisTitleMargin,
    yAxisTitlePosition
  } = { ..._types.DEFAULT_FORM_DATA,
    ...formData
  };

  const colorScale = _core.CategoricalColorNamespace.getScale(colorScheme);

  const rebasedData = (0, _prophet.rebaseTimeseriesDatum)(data, verboseMap);
  const rawSeries = (0, _series.extractTimeseriesSeries)(rebasedData, {
    fillNeighborValue: stack && !forecastEnabled ? 0 : undefined
  });
  const seriesContexts = (0, _prophet.extractForecastSeriesContexts)(Object.values(rawSeries).map(series => series.name));
  const series = [];
  const formatter = (0, _core.getNumberFormatter)(contributionMode ? ',.0%' : yAxisFormat);
  const totalStackedValues = [];
  const showValueIndexes = [];
  rebasedData.forEach(data => {
    const values = Object.keys(data).reduce((prev, curr) => {
      if (curr === '__timestamp') {
        return prev;
      }

      const value = data[curr] || 0;
      return prev + value;
    }, 0);
    totalStackedValues.push(values);
  });

  if (stack) {
    rawSeries.forEach((entry, seriesIndex) => {
      const {
        data = []
      } = entry;
      data.forEach((datum, dataIndex) => {
        if (datum[1] !== null) {
          showValueIndexes[dataIndex] = seriesIndex;
        }
      });
    });
  }

  rawSeries.forEach(entry => {
    const transformedSeries = (0, _transformers.transformSeries)(entry, colorScale, {
      area,
      filterState,
      seriesContexts,
      markerEnabled,
      markerSize,
      areaOpacity: opacity,
      seriesType,
      stack,
      formatter,
      showValue,
      onlyTotal,
      totalStackedValues,
      showValueIndexes,
      richTooltip
    });
    if (transformedSeries) series.push(transformedSeries);
  });
  const selectedValues = (filterState.selectedValues || []).reduce((acc, selectedValue) => {
    const index = series.findIndex(({
      name
    }) => name === selectedValue);
    return { ...acc,
      [index]: selectedValue
    };
  }, {});
  annotationLayers.filter(layer => layer.show).forEach(layer => {
    if ((0, _core.isFormulaAnnotationLayer)(layer)) series.push((0, _transformers.transformFormulaAnnotation)(layer, data, colorScale));else if ((0, _core.isIntervalAnnotationLayer)(layer)) {
      series.push(...(0, _transformers.transformIntervalAnnotation)(layer, data, annotationData, colorScale));
    } else if ((0, _core.isEventAnnotationLayer)(layer)) {
      series.push(...(0, _transformers.transformEventAnnotation)(layer, data, annotationData, colorScale));
    } else if ((0, _core.isTimeseriesAnnotationLayer)(layer)) {
      series.push(...(0, _transformers.transformTimeseriesAnnotation)(layer, markerSize, data, annotationData));
    }
  }); // yAxisBounds need to be parsed to replace incompatible values with undefined

  let [min, max] = (yAxisBounds || []).map(_controls.parseYAxisBound); // default to 0-100% range when doing row-level contribution chart

  if (contributionMode === 'row' && stack) {
    if (min === undefined) min = 0;
    if (max === undefined) max = 1;
  }

  const tooltipFormatter = (0, _transformers.getTooltipTimeFormatter)(tooltipTimeFormat);
  const xAxisFormatter = (0, _transformers.getXAxisFormatter)(xAxisTimeFormat);
  const labelMap = series.reduce((acc, datum) => {
    const name = datum.name;
    return { ...acc,
      [name]: [name]
    };
  }, {});
  const {
    setDataMask = () => {}
  } = hooks;
  const addYAxisLabelOffset = !!yAxisTitle;
  const addXAxisLabelOffset = !!xAxisTitle;
  const padding = (0, _transformers.getPadding)(showLegend, legendOrientation, addYAxisLabelOffset, zoomable, null, addXAxisLabelOffset, yAxisTitlePosition, yAxisTitleMargin, xAxisTitleMargin);
  const legendData = rawSeries.filter(entry => (0, _prophet.extractForecastSeriesContext)(entry.name || '').type === _types2.ForecastSeriesEnum.Observation).map(entry => entry.name || '').concat((0, _annotation.extractAnnotationLabels)(annotationLayers, annotationData));
  const echartOptions = {
    useUTC: true,
    grid: { ..._defaults.defaultGrid,
      ...padding
    },
    xAxis: {
      type: 'time',
      name: xAxisTitle,
      nameGap: xAxisTitleMargin,
      nameLocation: 'middle',
      axisLabel: {
        hideOverlap: true,
        formatter: xAxisFormatter,
        rotate: xAxisLabelRotation
      }
    },
    yAxis: { ..._defaults.defaultYAxis,
      type: logAxis ? 'log' : 'value',
      min,
      max,
      minorTick: {
        show: true
      },
      minorSplitLine: {
        show: minorSplitLine
      },
      axisLabel: {
        formatter
      },
      scale: truncateYAxis,
      name: yAxisTitle,
      nameGap: yAxisTitleMargin,
      nameLocation: yAxisTitlePosition === 'Left' ? 'middle' : 'end'
    },
    tooltip: { ..._defaults.defaultTooltip,
      appendToBody: true,
      trigger: richTooltip ? 'axis' : 'item',
      formatter: params => {
        const xValue = richTooltip ? params[0].value[0] : params.value[0];
        const prophetValue = richTooltip ? params : [params];

        if (richTooltip && tooltipSortByMetric) {
          prophetValue.sort((a, b) => b.data[1] - a.data[1]);
        }

        const rows = [`${tooltipFormatter(xValue)}`];
        const prophetValues = (0, _prophet.extractProphetValuesFromTooltipParams)(prophetValue);
        Object.keys(prophetValues).forEach(key => {
          const value = prophetValues[key];
          const content = (0, _prophet.formatProphetTooltipSeries)({ ...value,
            seriesName: key,
            formatter
          });

          if (_series.currentSeries.name === key) {
            rows.push(`<span style="font-weight: 700">${content}</span>`);
          } else {
            rows.push(`<span style="opacity: 0.7">${content}</span>`);
          }
        });
        return rows.join('<br />');
      }
    },
    legend: { ...(0, _series.getLegendProps)(legendType, legendOrientation, showLegend, zoomable),
      data: legendData
    },
    series: (0, _series.dedupSeries)(series),
    toolbox: {
      show: zoomable,
      top: _constants.TIMESERIES_CONSTANTS.toolboxTop,
      right: _constants.TIMESERIES_CONSTANTS.toolboxRight,
      feature: {
        dataZoom: {
          yAxisIndex: false,
          title: {
            zoom: 'zoom area',
            back: 'restore zoom'
          }
        }
      }
    },
    dataZoom: zoomable ? [{
      type: 'slider',
      start: _constants.TIMESERIES_CONSTANTS.dataZoomStart,
      end: _constants.TIMESERIES_CONSTANTS.dataZoomEnd,
      bottom: _constants.TIMESERIES_CONSTANTS.zoomBottom
    }] : []
  };
  return {
    echartOptions,
    emitFilter,
    formData,
    groupby,
    height,
    labelMap,
    selectedValues,
    setDataMask,
    width,
    legendData
  };
}