"use strict";

exports.__esModule = true;
exports.getPadding = getPadding;
exports.getTooltipTimeFormatter = getTooltipTimeFormatter;
exports.getXAxisFormatter = getXAxisFormatter;
exports.transformEventAnnotation = transformEventAnnotation;
exports.transformFormulaAnnotation = transformFormulaAnnotation;
exports.transformIntervalAnnotation = transformIntervalAnnotation;
exports.transformSeries = transformSeries;
exports.transformTimeseriesAnnotation = transformTimeseriesAnnotation;

var _core = require("@superset-ui/core");

var _prophet = require("../utils/prophet");

var _types = require("../types");

var _annotation = require("../utils/annotation");

var _series = require("../utils/series");

var _constants = require("../constants");

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function transformSeries(series, colorScale, opts) {
  const {
    name
  } = series;
  const {
    area,
    filterState,
    seriesContexts = {},
    markerEnabled,
    markerSize,
    areaOpacity = 1,
    seriesType,
    stack,
    yAxisIndex = 0,
    showValue,
    onlyTotal,
    formatter,
    totalStackedValues = [],
    showValueIndexes = [],
    richTooltip
  } = opts;
  const contexts = seriesContexts[name || ''] || [];
  const hasForecast = contexts.includes(_types.ForecastSeriesEnum.ForecastTrend) || contexts.includes(_types.ForecastSeriesEnum.ForecastLower) || contexts.includes(_types.ForecastSeriesEnum.ForecastUpper);
  const forecastSeries = (0, _prophet.extractForecastSeriesContext)(name || '');
  const isConfidenceBand = forecastSeries.type === _types.ForecastSeriesEnum.ForecastLower || forecastSeries.type === _types.ForecastSeriesEnum.ForecastUpper;
  const isFiltered = (filterState == null ? void 0 : filterState.selectedValues) && !(filterState != null && filterState.selectedValues.includes(name));
  const opacity = isFiltered ? _constants.OpacityEnum.SemiTransparent : _constants.OpacityEnum.NonTransparent; // don't create a series if doing a stack or area chart and the result
  // is a confidence band

  if ((stack || area) && isConfidenceBand) return undefined;
  const isObservation = forecastSeries.type === _types.ForecastSeriesEnum.Observation;
  const isTrend = forecastSeries.type === _types.ForecastSeriesEnum.ForecastTrend;
  let stackId;

  if (isConfidenceBand) {
    stackId = forecastSeries.name;
  } else if (stack && isObservation) {
    // the suffix of the observation series is '' (falsy), which disables
    // stacking. Therefore we need to set something that is truthy.
    stackId = 'obs';
  } else if (stack && isTrend) {
    stackId = forecastSeries.type;
  }

  let plotType;

  if (!isConfidenceBand && (seriesType === 'scatter' || hasForecast && isObservation)) {
    plotType = 'scatter';
  } else if (isConfidenceBand) {
    plotType = 'line';
  } else {
    plotType = seriesType === 'bar' ? 'bar' : 'line';
  }

  const itemStyle = {
    color: colorScale(forecastSeries.name),
    opacity
  };
  let emphasis = {};
  let showSymbol = false;

  if (!isConfidenceBand) {
    if (plotType === 'scatter') {
      showSymbol = true;
    } else if (hasForecast && isObservation) {
      showSymbol = true;
    } else if (plotType === 'line' && showValue) {
      showSymbol = true;
    } else if (plotType === 'line' && !richTooltip && !markerEnabled) {
      // this is hack to make timeseries line chart clickable when tooltip trigger is 'item'
      // so that the chart can emit cross-filtering
      showSymbol = true;
      itemStyle.opacity = 0;
      emphasis = {
        itemStyle: {
          opacity: 1
        }
      };
    } else if (markerEnabled) {
      showSymbol = true;
    }
  }

  const lineStyle = isConfidenceBand ? {
    opacity: _constants.OpacityEnum.Transparent
  } : {
    opacity
  };
  return { ...series,
    yAxisIndex,
    name: forecastSeries.name,
    itemStyle,
    // @ts-ignore
    type: plotType,
    smooth: seriesType === 'smooth',
    triggerLineEvent: true,
    // @ts-ignore
    step: ['start', 'middle', 'end'].includes(seriesType) ? seriesType : undefined,
    stack: stackId,
    lineStyle,
    areaStyle: area ? {
      opacity: forecastSeries.type === _types.ForecastSeriesEnum.ForecastUpper ? opacity * areaOpacity : 0
    } : undefined,
    emphasis,
    showSymbol,
    symbolSize: markerSize,
    label: {
      show: !!showValue,
      position: 'top',
      formatter: params => {
        const {
          value: [, numericValue],
          dataIndex,
          seriesIndex,
          seriesName
        } = params;
        const isSelectedLegend = _series.currentSeries.legend === seriesName;
        if (!formatter) return numericValue;

        if (!stack || !onlyTotal || isSelectedLegend) {
          return formatter(numericValue);
        }

        if (seriesIndex === showValueIndexes[dataIndex]) {
          return formatter(totalStackedValues[dataIndex]);
        }

        return '';
      }
    }
  };
}

function transformFormulaAnnotation(layer, data, colorScale) {
  const {
    name,
    color,
    opacity,
    width,
    style
  } = layer;
  return {
    name,
    id: name,
    itemStyle: {
      color: color || colorScale(name)
    },
    lineStyle: {
      opacity: (0, _annotation.parseAnnotationOpacity)(opacity),
      type: style,
      width
    },
    type: 'line',
    smooth: true,
    data: (0, _annotation.evalFormula)(layer, data),
    symbolSize: 0
  };
}

function transformIntervalAnnotation(layer, data, annotationData, colorScale) {
  const series = [];
  const annotations = (0, _annotation.extractRecordAnnotations)(layer, annotationData);
  annotations.forEach(annotation => {
    const {
      name,
      color,
      opacity
    } = layer;
    const {
      descriptions,
      intervalEnd,
      time,
      title
    } = annotation;
    const label = (0, _annotation.formatAnnotationLabel)(name, title, descriptions);
    const intervalData = [[{
      name: label,
      xAxis: time
    }, {
      xAxis: intervalEnd
    }]];
    series.push({
      id: `Interval - ${label}`,
      type: 'line',
      animation: false,
      markArea: {
        silent: false,
        itemStyle: {
          color: color || colorScale(name),
          opacity: (0, _annotation.parseAnnotationOpacity)(opacity || _core.AnnotationOpacity.Medium),
          emphasis: {
            opacity: 0.8
          }
        },
        label: {
          show: false,
          color: '#000000',
          // @ts-ignore
          emphasis: {
            fontWeight: 'bold',
            show: true,
            position: 'insideTop',
            verticalAlign: 'top',
            backgroundColor: '#ffffff'
          }
        },
        data: intervalData
      }
    });
  });
  return series;
}

function transformEventAnnotation(layer, data, annotationData, colorScale) {
  const series = [];
  const annotations = (0, _annotation.extractRecordAnnotations)(layer, annotationData);
  annotations.forEach(annotation => {
    const {
      name,
      color,
      opacity,
      style,
      width
    } = layer;
    const {
      descriptions,
      time,
      title
    } = annotation;
    const label = (0, _annotation.formatAnnotationLabel)(name, title, descriptions);
    const eventData = [{
      name: label,
      xAxis: time
    }];
    const lineStyle = {
      width,
      type: style,
      color: color || colorScale(name),
      opacity: (0, _annotation.parseAnnotationOpacity)(opacity),
      emphasis: {
        width: width ? width + 1 : width,
        opacity: 1
      }
    };
    series.push({
      id: `Event - ${label}`,
      type: 'line',
      animation: false,
      markLine: {
        silent: false,
        symbol: 'none',
        lineStyle,
        label: {
          show: false,
          color: '#000000',
          position: 'insideEndTop',
          // @ts-ignore
          emphasis: {
            formatter: params => params.name,
            fontWeight: 'bold',
            show: true,
            backgroundColor: '#ffffff'
          }
        },
        data: eventData
      }
    });
  });
  return series;
}

function transformTimeseriesAnnotation(layer, markerSize, data, annotationData) {
  const series = [];
  const {
    hideLine,
    name,
    opacity,
    showMarkers,
    style,
    width
  } = layer;
  const result = annotationData[name];

  if ((0, _core.isTimeseriesAnnotationResult)(result)) {
    result.forEach(annotation => {
      const {
        key,
        values
      } = annotation;
      series.push({
        type: 'line',
        id: key,
        name: key,
        data: values.map(row => [row.x, row.y]),
        symbolSize: showMarkers ? markerSize : 0,
        lineStyle: {
          opacity: (0, _annotation.parseAnnotationOpacity)(opacity),
          type: style,
          width: hideLine ? 0 : width
        }
      });
    });
  }

  return series;
}

function getPadding(showLegend, legendOrientation, addYAxisTitleOffset, zoomable, margin, addXAxisTitleOffset, yAxisTitlePosition, yAxisTitleMargin, xAxisTitleMargin) {
  const yAxisOffset = addYAxisTitleOffset ? _constants.TIMESERIES_CONSTANTS.yAxisLabelTopOffset : 0;
  const xAxisOffset = addXAxisTitleOffset ? xAxisTitleMargin || 0 : 0;
  return (0, _series.getChartPadding)(showLegend, legendOrientation, margin, {
    top: yAxisTitlePosition && yAxisTitlePosition === 'Top' ? _constants.TIMESERIES_CONSTANTS.gridOffsetTop + (yAxisTitleMargin || 0) : _constants.TIMESERIES_CONSTANTS.gridOffsetTop + yAxisOffset,
    bottom: zoomable ? _constants.TIMESERIES_CONSTANTS.gridOffsetBottomZoomable + xAxisOffset : _constants.TIMESERIES_CONSTANTS.gridOffsetBottom + xAxisOffset,
    left: yAxisTitlePosition === 'Left' ? _constants.TIMESERIES_CONSTANTS.gridOffsetLeft + (yAxisTitleMargin || 0) : _constants.TIMESERIES_CONSTANTS.gridOffsetLeft,
    right: showLegend && legendOrientation === _types.LegendOrientation.Right ? 0 : _constants.TIMESERIES_CONSTANTS.gridOffsetRight
  });
}

function getTooltipTimeFormatter(format) {
  if (format === _core.smartDateFormatter.id) {
    return _core.smartDateDetailedFormatter;
  }

  if (format) {
    return (0, _core.getTimeFormatter)(format);
  }

  return String;
}

function getXAxisFormatter(format) {
  if (format === _core.smartDateFormatter.id || !format) {
    return undefined;
  }

  if (format) {
    return (0, _core.getTimeFormatter)(format);
  }

  return String;
}