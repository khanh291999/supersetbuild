"use strict";

exports.__esModule = true;
exports.default = configureEncodable;

var _encodable = require("encodable");

var _core = require("@superset-ui/core");

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const timeFormat = ({
  format,
  formatInLocalTime = false
} = {}) => {
  const formatString = formatInLocalTime ? (0, _encodable.addPrefix)(_core.LOCAL_PREFIX, format ?? (0, _core.getTimeFormatterRegistry)().getDefaultKey()) : format;
  return (0, _core.getTimeFormatter)(formatString);
};

const colorSchemeResolver = ({
  name,
  type = 'categorical'
} = {}) => {
  if (type === 'sequential') {
    const scheme = (0, _core.getSequentialSchemeRegistry)().get(name);
    return typeof scheme === 'undefined' ? scheme : {
      type: 'sequential',
      ...scheme
    };
  }

  if (type === 'categorical') {
    const scheme = (0, _core.getCategoricalSchemeRegistry)().get(name);
    return typeof scheme === 'undefined' ? scheme : {
      type: 'categorical',
      ...scheme
    };
  }

  return (0, _encodable.defaultColorSchemeResolver)({
    name,
    type
  });
};

const colorScaleResolver = ({
  name,
  namespace
} = {}) => _core.CategoricalColorNamespace.getScale(name, namespace);

function configureEncodable() {
  _encodable.Encodable.setNumberFormatResolver(_core.getNumberFormatter).setTimeFormatResolver(timeFormat).setColorSchemeResolver(colorSchemeResolver).setCategoricalColorScaleResolver(colorScaleResolver);
}