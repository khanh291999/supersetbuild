{"version":3,"sources":["src/TableRenderers.jsx"],"names":["redColorScaleGenerator","values","min","Math","apply","max","x","nonRed","round","backgroundColor","parseLabel","value","String","defaultBarchartScaleGenerator","range","maxScale","scaler","val","text","bgColor","bBase","position","height","bottom","left","right","abs","padding","displayHeaderCell","needToggle","ArrowIcon","onArrowClick","namesMapping","name","makeRenderer","opts","TableRenderer","props","state","collapsedRows","collapsedCols","clickHeaderHandler","bind","clickHandler","colAttrs","cols","rowAttrs","rows","tableOptions","Object","assign","rowTotals","colTotals","length","subtotalOptions","arrowCollapsed","arrowExpanded","colSubtotalDisplay","displayOnTop","enabled","hideOnExpand","rowSubtotalDisplay","pivotData","PivotData","subtotals","rowEnabled","colEnabled","rowPartialOnTop","colPartialOnTop","rowKeys","getRowKeys","colKeys","getColKeys","cellCallbacks","rowTotalCallbacks","colTotalCallbacks","grandTotalCallback","clickCallback","rowKey","flatRowKey","colKey","heatmapMappers","tableColorScaleGenerator","barchartMapper","barScaleGenerator","rowValues","colValues","getAggregator","filters","colLimit","i","attr","rowLimit","e","attrs","attrIdx","callback","isSubtotal","isGrandTotal","rowOrCol","allKeys","stopPropagation","keyLen","collapsed","filter","k","map","flatKey","updates","forEach","setState","slice","flatColKey","attrArr","numAttrs","spans","li","Array","lv","cv","ent","depth","limit","push","attrName","pivotSettings","visibleColKeys","colAttrSpans","maxColVisible","highlightHeaderCellsOnHover","omittedHighlightHeaderGroups","highlightedHeaderCells","dateFormatters","spaceCell","arrowClickHandle","subArrow","collapseAttr","expandAttr","attrNameCell","attrValueCells","rowIncrSpan","colSpan","colLabelClass","includes","isArray","rowSpan","toggleColKey","headerCellFormattedValue","clickColumnHeaderCallback","totalCell","aggregatorName","cells","maxRowVisible","r","needLabelToggle","clickRowHeaderCallback","rowIdx","rowAttrSpans","valueCellColors","cellStyle","valueCellBar","cellColorFormatters","colIncrSpan","valueCellClassName","needRowToggle","toggleRowKey","attrValuePaddingCell","rowClickHandlers","valueCells","agg","aggValue","keys","cellColorFormatter","key","formatter","column","formatterResult","getColorFromValue","style","fontWeight","format","rowCells","totalLabelCell","totalValueStyle","totalValueCells","grandTotalCell","totalCells","subtotalDisplay","some","j","cachedProps","cachedBasePivotSettings","getBasePivotSettings","visibleRowKeys","visibleKeys","calcAttrSpans","c","renderColHeaderRow","renderRowHeaderRow","renderTableRow","renderTotalsRow","colorScaleGenerator","rowTotalColors","colTotalColors","heatmapMode","colTotalValues","a","rowTotalValues","allValues","tree","cd","colorScale","v","rowColorScales","entries","rk","colColorScales","ck","t","rowTotalBar","colTotalBar","barchartMode","textAlign","paddingTop","barScales","rowBarScales","colBarScales","React","Component","defaultProps","propTypes","PropTypes","func","object","TSVExportRenderer","headerRow","join","result","row","unshift","width","window","innerWidth","innerHeight","PureComponent","Table"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData, flatKey} from './Utilities';\n\n/* eslint-disable react/prop-types */\n// eslint can't see inherited propTypes!\n\nfunction redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return (x) => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round((255 * (x - min)) / (max - min));\n    return {backgroundColor: `rgb(255,${nonRed},${nonRed})`};\n  };\n}\n\nconst parseLabel = (value) => {\n  if (typeof value === 'number' || typeof value === 'string') {\n    return value;\n  }\n  return String(value);\n};\n\nfunction defaultBarchartScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  const range = min < 0 ? max - min : Math.max(max, 0);\n  // eslint-disable-next-line no-magic-numbers\n  const maxScale = 100 / 1.4;\n  const scaler = (val) => Math.min(maxScale, maxScale * (val / range));\n\n  return (val, text) => {\n    let bgColor = 'gray';\n    let bBase = 0;\n    if (min < 0) {\n      bBase = scaler(-min);\n    }\n    if (val < 0) {\n      bBase += scaler(val);\n      bgColor = 'darkred';\n    }\n\n    return (\n      <div style={{position: 'relative', height: '100%'}}>\n        <div\n          style={{\n            position: 'absolute',\n            bottom: bBase + '%',\n            left: 0,\n            right: 0,\n            height: scaler(Math.abs(val)) + '%',\n            backgroundColor: bgColor,\n          }}\n        />\n        <div style={{position: 'relative', padding: '0 5px'}}>{text}</div>\n      </div>\n    );\n  };\n}\n\nfunction displayHeaderCell(\n  needToggle,\n  ArrowIcon,\n  onArrowClick,\n  value,\n  namesMapping\n) {\n  const name = namesMapping[value] || value;\n  return needToggle ? (\n    <span className=\"toggle-wrapper\">\n      <span className=\"toggle\" onClick={onArrowClick}>\n        {ArrowIcon}\n      </span>\n      <span className=\"toggle-val\">{parseLabel(name)}</span>\n    </span>\n  ) : (\n    parseLabel(name)\n  );\n}\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.Component {\n    constructor(props) {\n      super(props);\n\n      // We need state to record which entries are collapsed and which aren't.\n      // This is an object with flat-keys indicating if the corresponding rows\n      // should be collapsed.\n      this.state = {collapsedRows: {}, collapsedCols: {}};\n\n      this.clickHeaderHandler = this.clickHeaderHandler.bind(this);\n      this.clickHandler = this.clickHandler.bind(this);\n    }\n\n    getBasePivotSettings() {\n      // One-time extraction of pivot settings that we'll use throughout the render.\n\n      const props = this.props;\n      const colAttrs = props.cols;\n      const rowAttrs = props.rows;\n\n      const tableOptions = Object.assign(\n        {\n          rowTotals: true,\n          colTotals: true,\n        },\n        props.tableOptions\n      );\n      const rowTotals = tableOptions.rowTotals || colAttrs.length === 0;\n      const colTotals = tableOptions.colTotals || rowAttrs.length === 0;\n\n      const namesMapping = props.namesMapping || {};\n      const subtotalOptions = Object.assign(\n        {\n          arrowCollapsed: '\\u25B2',\n          arrowExpanded: '\\u25BC',\n        },\n        props.subtotalOptions\n      );\n\n      const colSubtotalDisplay = Object.assign(\n        {\n          displayOnTop: false,\n          enabled: rowTotals,\n          hideOnExpand: false,\n        },\n        subtotalOptions.colSubtotalDisplay\n      );\n\n      const rowSubtotalDisplay = Object.assign(\n        {\n          displayOnTop: false,\n          enabled: colTotals,\n          hideOnExpand: false,\n        },\n        subtotalOptions.rowSubtotalDisplay\n      );\n\n      const pivotData = new PivotData(\n        props,\n        !opts.subtotals\n          ? {}\n          : {\n              rowEnabled: rowSubtotalDisplay.enabled,\n              colEnabled: colSubtotalDisplay.enabled,\n              rowPartialOnTop: rowSubtotalDisplay.displayOnTop,\n              colPartialOnTop: colSubtotalDisplay.displayOnTop,\n            }\n      );\n      const rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n\n      // Also pre-calculate all the callbacks for cells, etc... This is nice to have to\n      // avoid re-calculations of the call-backs on cell expansions, etc...\n      const cellCallbacks = {};\n      const rowTotalCallbacks = {};\n      const colTotalCallbacks = {};\n      let grandTotalCallback = null;\n      if (tableOptions.clickCallback) {\n        for (const rowKey of rowKeys) {\n          const flatRowKey = flatKey(rowKey);\n          if (!(flatRowKey in cellCallbacks)) {\n            cellCallbacks[flatRowKey] = {};\n          }\n          for (const colKey of colKeys) {\n            cellCallbacks[flatRowKey][flatKey(colKey)] = this.clickHandler(\n              pivotData,\n              rowKey,\n              colKey\n            );\n          }\n        }\n\n        // Add in totals as well.\n        if (rowTotals) {\n          for (const rowKey of rowKeys) {\n            rowTotalCallbacks[flatKey(rowKey)] = this.clickHandler(\n              pivotData,\n              rowKey,\n              []\n            );\n          }\n        }\n        if (colTotals) {\n          for (const colKey of colKeys) {\n            colTotalCallbacks[flatKey(colKey)] = this.clickHandler(\n              pivotData,\n              [],\n              colKey\n            );\n          }\n        }\n        if (rowTotals && colTotals) {\n          grandTotalCallback = this.clickHandler(pivotData, [], []);\n        }\n      }\n\n      return Object.assign(\n        {\n          pivotData,\n          colAttrs,\n          rowAttrs,\n          colKeys,\n          rowKeys,\n          rowTotals,\n          colTotals,\n          arrowCollapsed: subtotalOptions.arrowCollapsed,\n          arrowExpanded: subtotalOptions.arrowExpanded,\n          colSubtotalDisplay,\n          rowSubtotalDisplay,\n          cellCallbacks,\n          rowTotalCallbacks,\n          colTotalCallbacks,\n          grandTotalCallback,\n          namesMapping,\n        },\n        TableRenderer.heatmapMappers(\n          pivotData,\n          props.tableColorScaleGenerator,\n          colTotals,\n          rowTotals\n        ),\n        TableRenderer.barchartMapper(\n          pivotData,\n          props.barScaleGenerator,\n          colTotals,\n          rowTotals\n        )\n      );\n    }\n\n    clickHandler(pivotData, rowValues, colValues) {\n      const colAttrs = this.props.cols;\n      const rowAttrs = this.props.rows;\n      const value = pivotData.getAggregator(rowValues, colValues).value();\n      const filters = {};\n      const colLimit = Math.min(colAttrs.length, colValues.length);\n      for (let i = 0; i < colLimit; i++) {\n        const attr = colAttrs[i];\n        if (colValues[i] !== null) {\n          filters[attr] = colValues[i];\n        }\n      }\n      const rowLimit = Math.min(rowAttrs.length, rowValues.length);\n      for (let i = 0; i < rowLimit; i++) {\n        const attr = rowAttrs[i];\n        if (rowValues[i] !== null) {\n          filters[attr] = rowValues[i];\n        }\n      }\n      return (e) =>\n        this.props.tableOptions.clickCallback(e, value, filters, pivotData);\n    }\n\n    clickHeaderHandler(\n      pivotData,\n      values,\n      attrs,\n      attrIdx,\n      callback,\n      isSubtotal = false,\n      isGrandTotal = false\n    ) {\n      const filters = {};\n      for (let i = 0; i <= attrIdx; i++) {\n        const attr = attrs[i];\n        filters[attr] = values[i];\n      }\n      return (e) =>\n        callback(\n          e,\n          values[attrIdx],\n          filters,\n          pivotData,\n          isSubtotal,\n          isGrandTotal\n        );\n    }\n\n    collapseAttr(rowOrCol, attrIdx, allKeys) {\n      return (e) => {\n        // Collapse an entire attribute.\n        e.stopPropagation();\n        const keyLen = attrIdx + 1;\n        const collapsed = allKeys\n          .filter((k) => k.length === keyLen)\n          .map(flatKey);\n\n        const updates = {};\n        collapsed.forEach((k) => {\n          updates[k] = true;\n        });\n\n        if (rowOrCol) {\n          this.setState((state) => ({\n            collapsedRows: Object.assign({}, state.collapsedRows, updates),\n          }));\n        } else {\n          this.setState((state) => ({\n            collapsedCols: Object.assign({}, state.collapsedCols, updates),\n          }));\n        }\n      };\n    }\n\n    expandAttr(rowOrCol, attrIdx, allKeys) {\n      return (e) => {\n        // Expand an entire attribute. This implicitly implies expanding all of the\n        // parents as well. It's a bit inefficient but ah well...\n        e.stopPropagation();\n        const updates = {};\n        allKeys.forEach((k) => {\n          for (let i = 0; i <= attrIdx; i++) {\n            updates[flatKey(k.slice(0, i + 1))] = false;\n          }\n        });\n\n        if (rowOrCol) {\n          this.setState((state) => ({\n            collapsedRows: Object.assign({}, state.collapsedRows, updates),\n          }));\n        } else {\n          this.setState((state) => ({\n            collapsedCols: Object.assign({}, state.collapsedCols, updates),\n          }));\n        }\n      };\n    }\n\n    toggleRowKey(flatRowKey) {\n      return (e) => {\n        e.stopPropagation();\n        this.setState((state) => ({\n          collapsedRows: Object.assign({}, state.collapsedRows, {\n            [flatRowKey]: !state.collapsedRows[flatRowKey],\n          }),\n        }));\n      };\n    }\n\n    toggleColKey(flatColKey) {\n      return (e) => {\n        e.stopPropagation();\n        this.setState((state) => ({\n          collapsedCols: Object.assign({}, state.collapsedCols, {\n            [flatColKey]: !state.collapsedCols[flatColKey],\n          }),\n        }));\n      };\n    }\n\n    calcAttrSpans(attrArr, numAttrs) {\n      // Given an array of attribute values (i.e. each element is another array with\n      // the value at every level), compute the spans for every attribute value at\n      // every level. The return value is a nested array of the same shape. It has\n      // -1's for repeated values and the span number otherwise.\n\n      const spans = [];\n      // Index of the last new value\n      const li = Array(numAttrs).map(() => 0);\n      let lv = Array(numAttrs).map(() => null);\n      for (let i = 0; i < attrArr.length; i++) {\n        // Keep increasing span values as long as the last keys are the same. For\n        // the rest, record spans of 1. Update the indices too.\n        const cv = attrArr[i];\n        const ent = [];\n        let depth = 0;\n        const limit = Math.min(lv.length, cv.length);\n        while (depth < limit && lv[depth] === cv[depth]) {\n          ent.push(-1);\n          spans[li[depth]][depth]++;\n          depth++;\n        }\n        while (depth < cv.length) {\n          li[depth] = i;\n          ent.push(1);\n          depth++;\n        }\n        spans.push(ent);\n        lv = cv;\n      }\n      return spans;\n    }\n\n    static heatmapMappers(\n      pivotData,\n      colorScaleGenerator,\n      colTotals,\n      rowTotals\n    ) {\n      let valueCellColors = () => ({});\n      let rowTotalColors = () => ({});\n      let colTotalColors = () => ({});\n      if (opts.heatmapMode) {\n        if (colTotals) {\n          const colTotalValues = Object.values(pivotData.colTotals).map((a) =>\n            a.value()\n          );\n          colTotalColors = colorScaleGenerator(colTotalValues);\n        }\n        if (rowTotals) {\n          const rowTotalValues = Object.values(pivotData.rowTotals).map((a) =>\n            a.value()\n          );\n          rowTotalColors = colorScaleGenerator(rowTotalValues);\n        }\n        if (opts.heatmapMode === 'full') {\n          const allValues = [];\n          Object.values(pivotData.tree).map((cd) =>\n            Object.values(cd).map(\n              (a) => !a.isSubtotal && allValues.push(a.value())\n            )\n          );\n          const colorScale = colorScaleGenerator(allValues);\n          valueCellColors = (r, c, v) => colorScale(v);\n        } else if (opts.heatmapMode === 'row') {\n          const rowColorScales = {};\n          Object.entries(pivotData.tree).map(([rk, cd]) => {\n            const rowValues = Object.values(cd).map(\n              (a) => !a.isSubtotal && a.value()\n            );\n            rowColorScales[rk] = colorScaleGenerator(rowValues);\n          });\n          valueCellColors = (r, c, v) => rowColorScales[flatKey(r)](v);\n        } else if (opts.heatmapMode === 'col') {\n          const colColorScales = {};\n          const colValues = {};\n          Object.values(pivotData.tree).map((cd) =>\n            Object.entries(cd).map(([ck, a]) => {\n              if (!(ck in colValues)) {\n                colValues[ck] = [];\n              }\n              if (!a.isSubtotal) {\n                colValues[ck].push(a.value());\n              }\n            })\n          );\n          for (const k in colValues) {\n            colColorScales[k] = colorScaleGenerator(colValues[k]);\n          }\n          valueCellColors = (r, c, v) => colColorScales[flatKey(c)](v);\n        }\n      }\n      return {valueCellColors, rowTotalColors, colTotalColors};\n    }\n\n    static barchartMapper(pivotData, barScaleGenerator, colTotals, rowTotals) {\n      let cellStyle = {};\n      let valueCellBar = (r, c, v, t) => t;\n      let rowTotalBar = (v, t) => t;\n      let colTotalBar = (v, t) => t;\n\n      if (opts.barchartMode) {\n        cellStyle = {\n          textAlign: 'center',\n          padding: 0,\n          paddingTop: '5px',\n          height: '60px',\n        };\n        if (colTotals) {\n          const colTotalValues = Object.values(pivotData.colTotals)\n            .filter((a) => !a.isSubtotal)\n            .map((a) => a.value());\n          colTotalBar = barScaleGenerator(colTotalValues);\n        }\n        if (rowTotals) {\n          const rowTotalValues = Object.values(pivotData.rowTotals)\n            .filter((a) => !a.isSubtotal)\n            .map((a) => a.value());\n          rowTotalBar = barScaleGenerator(rowTotalValues);\n        }\n        if (opts.barchartMode === 'full') {\n          const allValues = [];\n          Object.values(pivotData.tree).map((cd) =>\n            Object.values(cd).map(\n              (a) => !a.isSubtotal && allValues.push(a.value())\n            )\n          );\n          const barScales = barScaleGenerator(allValues);\n          valueCellBar = (r, c, v, t) => barScales(v, t);\n        } else if (opts.barchartMode === 'row') {\n          const rowBarScales = {};\n          Object.entries(pivotData.tree).map(([rk, cd]) => {\n            const rowValues = Object.values(cd).map(\n              (a) => !a.isSubtotal && a.value()\n            );\n            rowBarScales[rk] = barScaleGenerator(rowValues);\n          });\n          valueCellBar = (r, c, v, t) => rowBarScales[flatKey(r)](v, t);\n        } else if (opts.barchartMode === 'col') {\n          const colBarScales = {};\n          const colValues = {};\n          Object.values(pivotData.tree).map((cd) =>\n            Object.entries(cd).map(([ck, a]) => {\n              if (!(ck in colValues)) {\n                colValues[ck] = [];\n              }\n              if (!a.isSubtotal) {\n                colValues[ck].push(a.value());\n              }\n            })\n          );\n          for (const k in colValues) {\n            colBarScales[k] = barScaleGenerator(colValues[k]);\n          }\n          valueCellBar = (r, c, v, t) => colBarScales[flatKey(c)](v, t);\n        }\n      }\n      return {cellStyle, valueCellBar, rowTotalBar, colTotalBar};\n    }\n\n    renderColHeaderRow(attrName, attrIdx, pivotSettings) {\n      // Render a single row in the column header at the top of the pivot table.\n\n      const {\n        rowAttrs,\n        colAttrs,\n        colKeys,\n        visibleColKeys,\n        colAttrSpans,\n        rowTotals,\n        arrowExpanded,\n        arrowCollapsed,\n        colSubtotalDisplay,\n        maxColVisible,\n        pivotData,\n        namesMapping,\n      } = pivotSettings;\n      const {\n        highlightHeaderCellsOnHover,\n        omittedHighlightHeaderGroups = [],\n        highlightedHeaderCells,\n        dateFormatters,\n      } = this.props.tableOptions;\n\n      const spaceCell =\n        attrIdx === 0 && rowAttrs.length !== 0 ? (\n          <th\n            key=\"padding\"\n            colSpan={rowAttrs.length}\n            rowSpan={colAttrs.length}\n          />\n        ) : null;\n\n      const needToggle =\n        opts.subtotals &&\n        colSubtotalDisplay.enabled &&\n        attrIdx !== colAttrs.length - 1;\n      let arrowClickHandle = null;\n      let subArrow = null;\n      if (needToggle) {\n        arrowClickHandle =\n          attrIdx + 1 < maxColVisible\n            ? this.collapseAttr(false, attrIdx, colKeys)\n            : this.expandAttr(false, attrIdx, colKeys);\n        subArrow = attrIdx + 1 < maxColVisible ? arrowExpanded : arrowCollapsed;\n      }\n      const attrNameCell = (\n        <th key=\"label\" className=\"pvtAxisLabel\">\n          {displayHeaderCell(\n            needToggle,\n            subArrow,\n            arrowClickHandle,\n            attrName,\n            namesMapping\n          )}\n        </th>\n      );\n\n      const attrValueCells = [];\n      const rowIncrSpan = rowAttrs.length !== 0 ? 1 : 0;\n      // Iterate through columns. Jump over duplicate values.\n      let i = 0;\n      while (i < visibleColKeys.length) {\n        const colKey = visibleColKeys[i];\n        const colSpan = attrIdx < colKey.length ? colAttrSpans[i][attrIdx] : 1;\n        let colLabelClass = 'pvtColLabel';\n        if (attrIdx < colKey.length) {\n          if (\n            highlightHeaderCellsOnHover &&\n            !omittedHighlightHeaderGroups.includes(colAttrs[attrIdx])\n          ) {\n            colLabelClass += ' hoverable';\n          }\n          if (\n            highlightedHeaderCells &&\n            Array.isArray(highlightedHeaderCells[colAttrs[attrIdx]]) &&\n            highlightedHeaderCells[colAttrs[attrIdx]].includes(colKey[attrIdx])\n          ) {\n            colLabelClass += ' active';\n          }\n\n          const rowSpan =\n            1 + (attrIdx === colAttrs.length - 1 ? rowIncrSpan : 0);\n          const flatColKey = flatKey(colKey.slice(0, attrIdx + 1));\n          const onArrowClick = needToggle\n            ? this.toggleColKey(flatColKey)\n            : null;\n\n          const headerCellFormattedValue =\n            dateFormatters &&\n            dateFormatters[attrName] &&\n            typeof dateFormatters[attrName] === 'function'\n              ? dateFormatters[attrName](colKey[attrIdx])\n              : colKey[attrIdx];\n          attrValueCells.push(\n            <th\n              className={colLabelClass}\n              key={'colKey-' + flatColKey}\n              colSpan={colSpan}\n              rowSpan={rowSpan}\n              onClick={this.clickHeaderHandler(\n                pivotData,\n                colKey,\n                this.props.cols,\n                attrIdx,\n                this.props.tableOptions.clickColumnHeaderCallback\n              )}\n            >\n              {displayHeaderCell(\n                needToggle,\n                this.state.collapsedCols[flatColKey]\n                  ? arrowCollapsed\n                  : arrowExpanded,\n                onArrowClick,\n                headerCellFormattedValue,\n                namesMapping\n              )}\n            </th>\n          );\n        } else if (attrIdx === colKey.length) {\n          const rowSpan = colAttrs.length - colKey.length + rowIncrSpan;\n          attrValueCells.push(\n            <th\n              className={`${colLabelClass} pvtSubtotalLabel`}\n              key={'colKeyBuffer-' + flatKey(colKey)}\n              colSpan={colSpan}\n              rowSpan={rowSpan}\n              onClick={this.clickHeaderHandler(\n                pivotData,\n                colKey,\n                this.props.cols,\n                attrIdx,\n                this.props.tableOptions.clickColumnHeaderCallback,\n                true\n              )}\n            >\n              Subtotal\n            </th>\n          );\n        }\n        // The next colSpan columns will have the same value anyway...\n        i = i + colSpan;\n      }\n\n      const totalCell =\n        attrIdx === 0 && rowTotals ? (\n          <th\n            key=\"total\"\n            className=\"pvtTotalLabel\"\n            rowSpan={colAttrs.length + Math.min(rowAttrs.length, 1)}\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              [],\n              this.props.cols,\n              attrIdx,\n              this.props.tableOptions.clickColumnHeaderCallback,\n              false,\n              true\n            )}\n          >\n            {`Total (${this.props.aggregatorName})`}\n          </th>\n        ) : null;\n\n      const cells = [spaceCell, attrNameCell, ...attrValueCells, totalCell];\n      return <tr key={`colAttr-${attrIdx}`}>{cells}</tr>;\n    }\n\n    renderRowHeaderRow(pivotSettings) {\n      // Render just the attribute names of the rows (the actual attribute values\n      // will show up in the individual rows).\n\n      const {\n        rowAttrs,\n        colAttrs,\n        rowKeys,\n        arrowCollapsed,\n        arrowExpanded,\n        rowSubtotalDisplay,\n        maxRowVisible,\n        pivotData,\n        namesMapping,\n      } = pivotSettings;\n      return (\n        <tr key=\"rowHdr\">\n          {rowAttrs.map((r, i) => {\n            const needLabelToggle =\n              opts.subtotals &&\n              rowSubtotalDisplay.enabled &&\n              i !== rowAttrs.length - 1;\n            let arrowClickHandle = null;\n            let subArrow = null;\n            if (needLabelToggle) {\n              arrowClickHandle =\n                i + 1 < maxRowVisible\n                  ? this.collapseAttr(true, i, rowKeys)\n                  : this.expandAttr(true, i, rowKeys);\n              subArrow = i + 1 < maxRowVisible ? arrowExpanded : arrowCollapsed;\n            }\n            return (\n              <th className=\"pvtAxisLabel\" key={`rowAttr-${i}`}>\n                {displayHeaderCell(\n                  needLabelToggle,\n                  subArrow,\n                  arrowClickHandle,\n                  r,\n                  namesMapping\n                )}\n              </th>\n            );\n          })}\n          <th\n            className=\"pvtTotalLabel\"\n            key=\"padding\"\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              [],\n              this.props.rows,\n              0,\n              this.props.tableOptions.clickRowHeaderCallback,\n              false,\n              true\n            )}\n          >\n            {colAttrs.length === 0\n              ? `Total (${this.props.aggregatorName})`\n              : null}\n          </th>\n        </tr>\n      );\n    }\n\n    renderTableRow(rowKey, rowIdx, pivotSettings) {\n      // Render a single row in the pivot table.\n\n      const {\n        rowAttrs,\n        colAttrs,\n        rowAttrSpans,\n        visibleColKeys,\n        pivotData,\n        rowTotals,\n        rowSubtotalDisplay,\n        valueCellColors,\n        cellStyle,\n        valueCellBar,\n        arrowExpanded,\n        arrowCollapsed,\n        cellCallbacks,\n        rowTotalCallbacks,\n        namesMapping,\n      } = pivotSettings;\n\n      const {\n        highlightHeaderCellsOnHover,\n        omittedHighlightHeaderGroups = [],\n        highlightedHeaderCells,\n        cellColorFormatters,\n        dateFormatters,\n      } = this.props.tableOptions;\n      const flatRowKey = flatKey(rowKey);\n\n      const colIncrSpan = colAttrs.length !== 0 ? 1 : 0;\n      const attrValueCells = rowKey.map((r, i) => {\n        let valueCellClassName = 'pvtRowLabel';\n        if (\n          highlightHeaderCellsOnHover &&\n          !omittedHighlightHeaderGroups.includes(rowAttrs[i])\n        ) {\n          valueCellClassName += ' hoverable';\n        }\n        if (\n          highlightedHeaderCells &&\n          Array.isArray(highlightedHeaderCells[rowAttrs[i]]) &&\n          highlightedHeaderCells[rowAttrs[i]].includes(r)\n        ) {\n          valueCellClassName += ' active';\n        }\n        const rowSpan = rowAttrSpans[rowIdx][i];\n        if (rowSpan > 0) {\n          const flatRowKey = flatKey(rowKey.slice(0, i + 1));\n          const colSpan = 1 + (i === rowAttrs.length - 1 ? colIncrSpan : 0);\n          const needRowToggle =\n            opts.subtotals &&\n            rowSubtotalDisplay.enabled &&\n            i !== rowAttrs.length - 1;\n          const onArrowClick = needRowToggle\n            ? this.toggleRowKey(flatRowKey)\n            : null;\n\n          const headerCellFormattedValue =\n            dateFormatters && dateFormatters[rowAttrs[i]]\n              ? dateFormatters[rowAttrs[i]](r)\n              : r;\n          return (\n            <th\n              key={`rowKeyLabel-${i}`}\n              className={valueCellClassName}\n              rowSpan={rowSpan}\n              colSpan={colSpan}\n              onClick={this.clickHeaderHandler(\n                pivotData,\n                rowKey,\n                this.props.rows,\n                i,\n                this.props.tableOptions.clickRowHeaderCallback\n              )}\n            >\n              {displayHeaderCell(\n                needRowToggle,\n                this.state.collapsedRows[flatRowKey]\n                  ? arrowCollapsed\n                  : arrowExpanded,\n                onArrowClick,\n                headerCellFormattedValue,\n                namesMapping\n              )}\n            </th>\n          );\n        }\n        return null;\n      });\n\n      const attrValuePaddingCell =\n        rowKey.length < rowAttrs.length ? (\n          <th\n            className=\"pvtRowLabel pvtSubtotalLabel\"\n            key=\"rowKeyBuffer\"\n            colSpan={rowAttrs.length - rowKey.length + colIncrSpan}\n            rowSpan={1}\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              rowKey,\n              this.props.rows,\n              rowKey.length,\n              this.props.tableOptions.clickRowHeaderCallback,\n              true\n            )}\n          >\n            Subtotal\n          </th>\n        ) : null;\n\n      const rowClickHandlers = cellCallbacks[flatRowKey] || {};\n      const valueCells = visibleColKeys.map((colKey) => {\n        const flatColKey = flatKey(colKey);\n        const agg = pivotData.getAggregator(rowKey, colKey);\n        const aggValue = agg.value();\n        let backgroundColor;\n        const keys = [...rowKey, ...colKey];\n        if (cellColorFormatters) {\n          Object.values(cellColorFormatters).forEach((cellColorFormatter) => {\n            if (Array.isArray(cellColorFormatter)) {\n              for (const key of keys) {\n                cellColorFormatter\n                  .filter((formatter) => formatter.column === key)\n                  .forEach((formatter) => {\n                    const formatterResult =\n                      formatter.getColorFromValue(aggValue);\n                    if (formatterResult) {\n                      backgroundColor = formatterResult;\n                    }\n                  });\n                if (backgroundColor) {\n                  break;\n                }\n              }\n            }\n          });\n        }\n\n        const style = Object.assign(\n          {},\n          agg.isSubtotal\n            ? {fontWeight: 'bold'}\n            : valueCellColors(rowKey, colKey, aggValue),\n          !agg.isSubtotal ? {backgroundColor} : {},\n          cellStyle\n        );\n\n        return (\n          <td\n            className=\"pvtVal\"\n            key={'pvtVal-' + flatColKey}\n            onClick={rowClickHandlers[flatColKey]}\n            style={style}\n          >\n            {agg.isSubtotal\n              ? agg.format(aggValue)\n              : valueCellBar(rowKey, colKey, aggValue, agg.format(aggValue))}\n          </td>\n        );\n      });\n\n      let totalCell = null;\n      if (rowTotals) {\n        const agg = pivotData.getAggregator(rowKey, []);\n        const aggValue = agg.value();\n        totalCell = (\n          <td\n            key=\"total\"\n            className=\"pvtTotal\"\n            onClick={rowTotalCallbacks[flatRowKey]}\n            style={cellStyle}\n          >\n            {agg.format(aggValue)}\n          </td>\n        );\n      }\n\n      const rowCells = [\n        ...attrValueCells,\n        attrValuePaddingCell,\n        ...valueCells,\n        totalCell,\n      ];\n\n      return <tr key={'keyRow-' + flatRowKey}>{rowCells}</tr>;\n    }\n\n    renderTotalsRow(pivotSettings) {\n      // Render the final totals rows that has the totals for all the columns.\n\n      const {\n        rowAttrs,\n        colAttrs,\n        visibleColKeys,\n        rowTotals,\n        pivotData,\n        cellStyle,\n        colTotalCallbacks,\n        grandTotalCallback,\n      } = pivotSettings;\n\n      const totalLabelCell = (\n        <th\n          key=\"label\"\n          className=\"pvtTotalLabel pvtRowTotalLabel\"\n          colSpan={rowAttrs.length + Math.min(colAttrs.length, 1)}\n          onClick={this.clickHeaderHandler(\n            pivotData,\n            [],\n            this.props.rows,\n            0,\n            this.props.tableOptions.clickRowHeaderCallback,\n            false,\n            true\n          )}\n        >\n          {`Total (${this.props.aggregatorName})`}\n        </th>\n      );\n\n      const totalValueStyle = Object.assign({}, cellStyle, {\n        padding: '5px',\n      });\n      const totalValueCells = visibleColKeys.map((colKey) => {\n        const flatColKey = flatKey(colKey);\n        const agg = pivotData.getAggregator([], colKey);\n        const aggValue = agg.value();\n\n        return (\n          <td\n            className=\"pvtTotal pvtRowTotal\"\n            key={'total-' + flatColKey}\n            onClick={colTotalCallbacks[flatColKey]}\n            style={totalValueStyle}\n          >\n            {agg.format(aggValue)}\n          </td>\n        );\n      });\n\n      let grandTotalCell = null;\n      if (rowTotals) {\n        const agg = pivotData.getAggregator([], []);\n        const aggValue = agg.value();\n        grandTotalCell = (\n          <td\n            key=\"total\"\n            className=\"pvtGrandTotal pvtRowTotal\"\n            onClick={grandTotalCallback}\n          >\n            {agg.format(aggValue)}\n          </td>\n        );\n      }\n\n      const totalCells = [totalLabelCell, ...totalValueCells, grandTotalCell];\n\n      return (\n        <tr key=\"total\" className=\"pvtRowTotals\">\n          {totalCells}\n        </tr>\n      );\n    }\n\n    visibleKeys(keys, collapsed, numAttrs, subtotalDisplay) {\n      return keys.filter(\n        (key) =>\n          // Is the key hidden by one of its parents?\n          !key.some((k, j) => collapsed[flatKey(key.slice(0, j))]) &&\n          // Leaf key.\n          (key.length === numAttrs ||\n            // Children hidden. Must show total.\n            flatKey(key) in collapsed ||\n            // Don't hide totals.\n            !subtotalDisplay.hideOnExpand)\n      );\n    }\n\n    render() {\n      if (this.cachedProps !== this.props) {\n        this.cachedProps = this.props;\n        this.cachedBasePivotSettings = this.getBasePivotSettings();\n      }\n      const {\n        colAttrs,\n        rowAttrs,\n        rowKeys,\n        colKeys,\n        colTotals,\n        rowSubtotalDisplay,\n        colSubtotalDisplay,\n      } = this.cachedBasePivotSettings;\n\n      // Need to account for exclusions to compute the effective row\n      // and column keys.\n      const visibleRowKeys = opts.subtotals\n        ? this.visibleKeys(\n            rowKeys,\n            this.state.collapsedRows,\n            rowAttrs.length,\n            rowSubtotalDisplay\n          )\n        : rowKeys;\n      const visibleColKeys = opts.subtotals\n        ? this.visibleKeys(\n            colKeys,\n            this.state.collapsedCols,\n            colAttrs.length,\n            colSubtotalDisplay\n          )\n        : colKeys;\n\n      const pivotSettings = Object.assign(\n        {\n          visibleRowKeys,\n          maxRowVisible: Math.max(...visibleRowKeys.map((k) => k.length)),\n          visibleColKeys,\n          maxColVisible: Math.max(...visibleColKeys.map((k) => k.length)),\n          rowAttrSpans: this.calcAttrSpans(visibleRowKeys, rowAttrs.length),\n          colAttrSpans: this.calcAttrSpans(visibleColKeys, colAttrs.length),\n        },\n        this.cachedBasePivotSettings\n      );\n\n      return (\n        <table className=\"pvtTable\">\n          <thead>\n            {colAttrs.map((c, j) =>\n              this.renderColHeaderRow(c, j, pivotSettings)\n            )}\n            {rowAttrs.length !== 0 && this.renderRowHeaderRow(pivotSettings)}\n          </thead>\n          <tbody>\n            {visibleRowKeys.map((r, i) =>\n              this.renderTableRow(r, i, pivotSettings)\n            )}\n            {colTotals && this.renderTotalsRow(pivotSettings)}\n          </tbody>\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.barScaleGenerator = defaultBarchartScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\n  return TableRenderer;\n}\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map((r) => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map((c) => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map((r) => {\n      const row = r.map((x) => x);\n      colKeys.map((c) => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map((r) => r.join('\\t')).join('\\n')}\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({heatmapMode: 'full'}),\n  'Table Col Heatmap': makeRenderer({heatmapMode: 'col'}),\n  'Table Row Heatmap': makeRenderer({heatmapMode: 'row'}),\n  'Table Barchart': makeRenderer({barchartMode: 'full'}),\n  'Table Col Barchart': makeRenderer({barchartMode: 'col'}),\n  'Table Row Barchart': makeRenderer({barchartMode: 'row'}),\n  'Table With Subtotal': makeRenderer({subtotals: true}),\n  'Table With Subtotal Heatmap': makeRenderer({\n    heatmapMode: 'full',\n    subtotals: true,\n  }),\n  'Table With Subtotal Col Heatmap': makeRenderer({\n    heatmapMode: 'col',\n    subtotals: true,\n  }),\n  'Table With Subtotal Row Heatmap': makeRenderer({\n    heatmapMode: 'row',\n    subtotals: true,\n  }),\n  'Table With Subtotal Barchart': makeRenderer({\n    barchartMode: 'full',\n    subtotals: true,\n  }),\n  'Table With Subtotal Col Barchart': makeRenderer({\n    barchartMode: 'col',\n    subtotals: true,\n  }),\n  'Table With Subtotal Row Barchart': makeRenderer({\n    barchartMode: 'row',\n    subtotals: true,\n  }),\n  'Exportable TSV': TSVExportRenderer,\n};\n"]}